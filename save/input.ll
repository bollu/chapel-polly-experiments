; ModuleID = 'chpl__module-nopt.bc'
source_filename = "root"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%atomic_int64 = type { i64 }
%atomic_uint64 = type { i64 }
%chpl_chpl___EndCount_atomic_int64_int64_t_object = type { %chpl_chpl___EndCountBase_object, %atomic_int64, i64 }
%chpl_chpl___EndCountBase_object = type { %chpl_object_object, %chpl_TaskErrors, i8* }
%chpl_object_object = type { i32, i32 }
%chpl_TaskErrors = type { %chpl_Error_object*, %atomicbool }
%chpl_Error_object = type { %chpl_object_object, %chpl_Error_object*, i64, i32 }
%atomicbool = type { i8 }
%chpl_chpl_ModuleDeinit_object = type { %chpl_object_object, i8*, i8*, %chpl_chpl_ModuleDeinit_object* }
%_domain_DefaultRectangularDom_1_int64_t_F = type { i64, %chpl_DefaultRectangularDom_1_int64_t_F_object*, i8 }
%chpl_DefaultRectangularDom_1_int64_t_F_object = type { %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_DefaultDist_object*, [1 x %range_int64_t_bounded_F] }
%chpl_BaseRectangularDom_1_int64_t_F_object = type { %chpl_BaseDom_object }
%chpl_BaseDom_object = type { %chpl_object_object, %list_BaseArr_chpl, i64, %atomicbool, i8, i64 }
%list_BaseArr_chpl = type { %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object*, i64 }
%chpl_listNode_BaseArr_chpl_object = type { %chpl_object_object, %chpl_BaseArr_object*, %chpl_listNode_BaseArr_chpl_object* }
%chpl_BaseArr_object = type { %chpl_object_object, i64, i8 }
%chpl_DefaultDist_object = type { %chpl_BaseDist_object }
%chpl_BaseDist_object = type { %chpl_object_object, %list_BaseDom_chpl, %atomicbool, i8, i64 }
%list_BaseDom_chpl = type { %chpl_listNode_BaseDom_chpl_object*, %chpl_listNode_BaseDom_chpl_object*, i64 }
%chpl_listNode_BaseDom_chpl_object = type { %chpl_object_object, %chpl_BaseDom_object*, %chpl_listNode_BaseDom_chpl_object* }
%range_int64_t_bounded_F = type { i64, i64 }
%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t = type { i64, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, i8 }
%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object = type { %chpl_BaseRectangularArr_1_int64_t_F_locale_object, %chpl_DefaultRectangularDom_1_int64_t_F_object*, [1 x i64], [1 x i64], [1 x i64], i64, %chpl_locale_object**, %chpl_locale_object**, i8, %range_int64_t_bounded_F }
%chpl_BaseRectangularArr_1_int64_t_F_locale_object = type { %chpl_BaseArrOverRectangularDom_1_int64_t_F_object }
%chpl_BaseArrOverRectangularDom_1_int64_t_F_object = type { %chpl_BaseArr_object }
%chpl_locale_object = type { %chpl_object_object, %chpl_locale_object*, i64, i64, i64, i64, i64, i64, %atomic_int64 }
%chpl_DummyLocale_object = type { %chpl_locale_object }
%string = type { i64, i64, i8*, i8, i32 }
%_distribution_DefaultDist = type { i64, %chpl_DefaultDist_object*, i8 }
%chpl_ExternDist_object = type { %chpl_BaseDist_object }
%chpl_localeTreeRecord = type { %chpl_locale_object*, %chpl_locale_object* }
%struct.qio_file_functions_s = type { %struct.qio_err_s* (i8*, %struct.iovec*, i32, i64*, i8*)*, %struct.qio_err_s* (i8*, %struct.iovec*, i32, i64*, i8*)*, %struct.qio_err_s* (i8*, %struct.iovec*, i32, i64, i64*, i8*)*, %struct.qio_err_s* (i8*, %struct.iovec*, i32, i64, i64*, i8*)*, %struct.qio_err_s* (i8*, i8*)*, %struct.qio_err_s* (i8**, i8*, i32*, i32, i32, i8*)*, %struct.qio_err_s* (i8*, i64, i32, i64*, i8*)*, %struct.qio_err_s* (i8*, i64*, i8*)*, %struct.qio_err_s* (i8*, i8**, i8*)*, %struct.qio_err_s* (i8*, i8*)*, %struct.qio_err_s* (i8*, i8**, i8*)*, i32 (i8*, i8*)*, %struct.qio_err_s* (i8*, i64*, i8*)*, %struct.qio_err_s* (i8*, i64, i64, i8***, i32*, i8*)* }
%struct.qio_err_s = type { i32, i8*, i8*, i8*, i32 }
%struct.iovec = type { i8*, i64 }
%channel_F_dynamic_T_chpl = type { %chpl_locale_object*, %struct.qio_channel_s*, %chpl_locale_object* }
%struct.qio_channel_s = type { i64, i8*, i8*, i8*, i64, %struct.qio_err_s*, %struct.qio_file_s*, %struct.qio_lock_t, i64, i64, i32, i32, i64, %struct.qbuffer_s, i64, i8*, i8, i8, i64, i64, i64*, [4 x i64], %struct.qio_style_s }
%struct.qio_file_s = type { i64, %struct._IO_FILE*, i32, i32, %struct.qbuffer_s*, i8*, %struct.qio_file_functions_s*, i8*, i32, i8, i32, i64, i64, %struct.qbytes_s*, %struct.qio_lock_t, i64, %struct.qio_style_s }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.qbytes_s = type { i64, i8*, i64, void (%struct.qbytes_s*)*, i8, i8, i16, i32 }
%struct.qio_lock_t = type { %struct.chpl_sync_aux_t, i32, i64 }
%struct.chpl_sync_aux_t = type { i64, i32, i64, i64 }
%struct.qbuffer_s = type { i64, %struct.deque_s, i64, i64 }
%struct.deque_s = type { %struct.deque_node_s*, i64, %struct.deque_iterator_s, %struct.deque_iterator_s }
%struct.deque_node_s = type { i8* }
%struct.deque_iterator_s = type { i8*, i8*, i8*, %struct.deque_node_s* }
%struct.qio_style_s = type { i8, i8, i64, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8 }
%channel_T_dynamic_T_chpl = type { %chpl_locale_object*, %struct.qio_channel_s*, %chpl_locale_object* }
%DefaultComparator_chpl = type { i32 }
%ReverseComparator_DefaultComparator_chpl = type { %DefaultComparator_chpl }
%struct.wide_ptr_s = type { %struct.chpl_localeID_t, i8* }
%struct.chpl_localeID_t = type { i32 }
%struct._chpl_fn_info = type { i8*, i32, i32 }
%struct.chpl_qthread_tls_s = type { %struct.chpl_task_bundle_t*, %struct.chpl_task_prvData_t }
%struct.chpl_task_bundle_t = type { i8, i32, i32, i32, i16, void (i8*)*, i32, %struct.chpl_task_ChapelData_t }
%struct.chpl_task_ChapelData_t = type { [32 x i8] }
%struct.chpl_task_prvData_t = type { %struct.chpl_comm_taskPrvData_t }
%struct.chpl_comm_taskPrvData_t = type { i32 }
%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object = type { %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object, %chpl_DefaultRectangularDom_1_int64_t_F_object*, [1 x i64], [1 x i64], [1 x i64], i64, %chpl_localesSignal_object**, %chpl_localesSignal_object**, i8, %range_int64_t_bounded_F }
%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object = type { %chpl_BaseArrOverRectangularDom_1_int64_t_F_object }
%chpl_localesSignal_object = type { %chpl_object_object, %atomicbool }
%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t = type { i64, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, i8 }
%ARRTY = type { %chpl_BaseRectangularArr_2_int64_t_F__real64_object, %chpl_DefaultRectangularDom_2_int64_t_F_object*, [2 x i64], [2 x i64], [2 x i64], i64, double*, double*, i8, %range_int64_t_bounded_F }
%chpl_BaseRectangularArr_2_int64_t_F__real64_object = type { %chpl_BaseArrOverRectangularDom_2_int64_t_F_object }
%chpl_BaseArrOverRectangularDom_2_int64_t_F_object = type { %chpl_BaseArr_object }
%chpl_DefaultRectangularDom_2_int64_t_F_object = type { %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_DefaultDist_object*, [2 x %range_int64_t_bounded_F] }
%chpl_BaseRectangularDom_2_int64_t_F_object = type { %chpl_BaseDom_object }
%ARRTY2 = type { i64, %ARRTY*, i8 }
%_domain_DefaultRectangularDom_2_int64_t_F = type { i64, %chpl_DefaultRectangularDom_2_int64_t_F_object*, i8 }
%chpl___RuntimeTypeInfo = type { %_distribution_DefaultDist }
%chpl___RuntimeTypeInfo2 = type { %_distribution_DefaultDist }
%chpl___RuntimeTypeInfo3 = type { %_domain_DefaultRectangularDom_2_int64_t_F }
%chpl___RuntimeTypeInfo4 = type { %_domain_DefaultRectangularDom_1_int64_t_F }
%chpl___RuntimeTypeInfo5 = type { %_domain_DefaultRectangularDom_1_int64_t_F }
%_tuple_2_BaseDom_BaseDist = type { %chpl_BaseDom_object*, %chpl_BaseDist_object* }
%_tuple_2_BaseArr_BaseDom = type { %chpl_BaseArr_object*, %chpl_BaseDom_object* }
%channel_T_dynamic_F_chpl = type { %chpl_locale_object*, %struct.qio_channel_s*, %chpl_locale_object* }
%range_int64_t_boundedLow_F = type { i64, i64 }
%chpl__class_localscoforall_fn3_object = type { %struct.chpl_task_bundle_t, i64, i64, %range_int64_t_bounded_F, i64, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, double*, i64, i32 }
%chpl__class_localscoforall_fn5_object = type { %struct.chpl_task_bundle_t, i64, i64, %range_int64_t_bounded_F, i64, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, i64*, i64, i32 }
%chpl__class_localscoforall_fn4_object = type { %struct.chpl_task_bundle_t, i64, i64, %range_int64_t_bounded_F, i64, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, i64*, i64, i32 }
%chpl__class_localscoforall_fn2_object = type { %struct.chpl_task_bundle_t, i64, i64, %range_int64_t_bounded_F, i64, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_localesSignal_object**, i64, i32 }
%chpl__class_localscoforall_fn_object = type { %struct.chpl_task_bundle_t, i64, i64, %range_int64_t_bounded_F, i64, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_locale_object**, i64, i32 }
%chpl_TaskErrors_object = type { %chpl_Error_object, %chpl_Error_object* }
%chpl_IllegalArgumentError_object = type { %chpl_Error_object, %string, %string }
%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object = type { %chpl_BaseArrOverRectangularDom_1_int64_t_F_object }
%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object = type { %chpl_BaseArrOverRectangularDom_1_int64_t_F_object }
%chpl_NilThrownError_object = type { %chpl_Error_object }
%chpl_AbstractLocaleModel_object = type { %chpl_locale_object }
%chpl_AbstractRootLocale_object = type { %chpl_locale_object }
%localesBarrier = type { i32 }
%chpl_RootLocale_object = type { %chpl_AbstractRootLocale_object, %_domain_DefaultRectangularDom_1_int64_t_F, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t }
%range_int64_t_bounded_T = type { i64, i64, i64, i64, i8 }
%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object = type { %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object, %chpl_DefaultRectangularDom_1_int64_t_F_object*, [1 x i64], [1 x i64], [1 x i64], i64, i64*, i64*, i8, %range_int64_t_bounded_F }
%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object = type { %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object, %chpl_DefaultRectangularDom_1_int64_t_F_object*, [1 x i64], [1 x i64], [1 x i64], i64, i64*, i64*, i8, %range_int64_t_bounded_F }
%chpl__class_localscoforall_fn6_object = type { %struct.chpl_task_bundle_t, [2 x %range_int64_t_bounded_F], i64, i64, i64, %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %ARRTY*, %ARRTY*, i64, i32 }
%chpl__class_localscoforall_fn7_object = type { %struct.chpl_task_bundle_t, [1 x %range_int64_t_bounded_F], i64, i64, i64, %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, i64, i32 }
%chpl__class_localscoforall_fn8_object = type { %struct.chpl_task_bundle_t, [1 x %range_int64_t_bounded_F], i64, i64, i64, %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, i64, i32 }
%chpl__class_localscoforall_fn9_object = type { %struct.chpl_task_bundle_t, [1 x %range_int64_t_bounded_F], i64, i64, i64, %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, i64, i32 }
%chpl__class_localscoforall_fn10_object = type { %struct.chpl_task_bundle_t, [1 x %range_int64_t_bounded_F], i64, i64, i64, %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, i64, i32 }
%ioLiteral_chpl = type { %string, i8 }
%chpl_LocaleModel_object = type { %chpl_AbstractLocaleModel_object, i64, %string }
%struct.chpl_comm_on_bundle_t = type { %struct.chpl_task_bundle_t, %struct.chpl_comm_bundleData_t }
%struct.chpl_comm_bundleData_t = type { i64 }
%chpl_root_locale_accum = type { %atomic_int64, %atomic_int64, %atomic_int64, %atomic_int64, %atomic_int64 }
%chpl__class_localscoforall_fn11_object = type { %struct.chpl_task_bundle_t, %localesBarrier, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, i64, %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_RootLocale_object*, %chpl_root_locale_accum*, i64, i32 }
%file_chpl = type { %chpl_locale_object*, %struct.qio_file_s* }
%chpl_SystemError_chpl_object = type { %chpl_Error_object, %struct.qio_err_s*, %string }
%ioNewline_chpl = type { i8 }
%chpl_BlockingIOError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_ChildProcessError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_BrokenPipeError_chpl_object = type { %chpl_ConnectionError_chpl_object }
%chpl_ConnectionError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_ConnectionAbortedError_chpl_object = type { %chpl_ConnectionError_chpl_object }
%chpl_ConnectionRefusedError_chpl_object = type { %chpl_ConnectionError_chpl_object }
%chpl_ConnectionResetError_chpl_object = type { %chpl_ConnectionError_chpl_object }
%chpl_FileExistsError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_FileNotFoundError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_InterruptedError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_IsADirectoryError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_NotADirectoryError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_PermissionError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_ProcessLookupError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_TimeoutError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_EOFError_chpl_object = type { %chpl_IOError_chpl_object }
%chpl_IOError_chpl_object = type { %chpl_SystemError_chpl_object }
%chpl_UnexpectedEOFError_chpl_object = type { %chpl_IOError_chpl_object }
%chpl_BadFormatError_chpl_object = type { %chpl_IOError_chpl_object }
%struct.qio_truncate_info_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.chpl_main_argument_s = type { i64, i8**, i32 }
%union.anon = type { i64 }

@chpl__cid_chpl___EndCountBase = constant i32 2
@chpl__cid_chpl___EndCount_atomic_int64_int64_t = constant i32 3
@chpl__cid_chpl_ModuleDeinit = constant i32 4
@chpl__cid_BaseDist = constant i32 5
@chpl__cid_BaseDom = constant i32 8
@chpl__cid_BaseRectangularDom_1_int64_t_F = constant i32 9
@chpl__cid_BaseRectangularDom_2_int64_t_F = constant i32 11
@chpl__cid_BaseArr = constant i32 13
@chpl__cid_BaseArrOverRectangularDom_1_int64_t_F = constant i32 14
@chpl__cid_BaseArrOverRectangularDom_2_int64_t_F = constant i32 23
@chpl__cid_BaseRectangularArr_1_int64_t_F_int64_t = constant i32 15
@chpl__cid_BaseRectangularArr_1_int64_t_F_locale = constant i32 17
@chpl__cid_BaseRectangularArr_1_int64_t_F_localesSignal = constant i32 19
@chpl__cid_BaseRectangularArr_1_int64_t_F_uint64_t = constant i32 21
@chpl__cid_BaseRectangularArr_2_int64_t_F__real64 = constant i32 24
@chpl__cid_Error = constant i32 26
@chpl__cid_NilThrownError = constant i32 27
@chpl__cid_IllegalArgumentError = constant i32 28
@chpl__cid_TaskErrors = constant i32 29
@chpl__cid_locale = constant i32 50
@chpl__cid_DummyLocale = constant i32 51
@chpl__cid_AbstractLocaleModel = constant i32 52
@chpl__cid_AbstractRootLocale = constant i32 54
@chpl__cid_localesSignal = constant i32 56
@chpl__cid_DefaultDist = constant i32 6
@chpl__cid_DefaultRectangularDom_1_int64_t_F = constant i32 10
@chpl__cid_DefaultRectangularDom_2_int64_t_F = constant i32 12
@chpl__cid_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t = constant i32 16
@chpl__cid_DefaultRectangularArr_1_int64_t_F_locale_int64_t = constant i32 18
@chpl__cid_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t = constant i32 20
@chpl__cid_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t = constant i32 22
@chpl__cid_DefaultRectangularArr_2_int64_t_F__real64_int64_t = constant i32 25
@chpl__cid_ExternDist = constant i32 7
@chpl__cid_LocaleModel = constant i32 53
@chpl__cid_RootLocale = constant i32 55
@chpl__cid_object = constant i32 1
@chpl__cid_listNode_BaseArr_chpl = constant i32 57
@chpl__cid_listNode_BaseDom_chpl = constant i32 58
@chpl__cid_SystemError_chpl = constant i32 30
@chpl__cid_BlockingIOError_chpl = constant i32 31
@chpl__cid_ChildProcessError_chpl = constant i32 32
@chpl__cid_ConnectionError_chpl = constant i32 33
@chpl__cid_BrokenPipeError_chpl = constant i32 34
@chpl__cid_ConnectionAbortedError_chpl = constant i32 35
@chpl__cid_ConnectionRefusedError_chpl = constant i32 36
@chpl__cid_ConnectionResetError_chpl = constant i32 37
@chpl__cid_FileExistsError_chpl = constant i32 38
@chpl__cid_FileNotFoundError_chpl = constant i32 39
@chpl__cid_InterruptedError_chpl = constant i32 40
@chpl__cid_IsADirectoryError_chpl = constant i32 41
@chpl__cid_NotADirectoryError_chpl = constant i32 42
@chpl__cid_PermissionError_chpl = constant i32 43
@chpl__cid_ProcessLookupError_chpl = constant i32 44
@chpl__cid_TimeoutError_chpl = constant i32 45
@chpl__cid_IOError_chpl = constant i32 46
@chpl__cid_EOFError_chpl = constant i32 47
@chpl__cid_UnexpectedEOFError_chpl = constant i32 48
@chpl__cid_BadFormatError_chpl = constant i32 49
@numPrivateObjects = internal global %atomic_int64 zeroinitializer
@chpl___OpaqueIndexNext = internal global %atomic_uint64 zeroinitializer
@chpl_arrayInitMethod = internal global i64 0
@_remoteEndCountType = internal global %chpl_chpl___EndCount_atomic_int64_int64_t_object* null
@chpl_moduleDeinitFuns = internal global %chpl_chpl_ModuleDeinit_object* null
@chpl__testParOn = internal global i8 0
@chpl_emptyLocaleSpace = internal global %_domain_DefaultRectangularDom_1_int64_t_F zeroinitializer
@chpl_emptyLocales = internal global %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t zeroinitializer
@c_sublocid_none = internal constant i32 -1, align 4
@c_sublocid_any = internal constant i32 -2, align 4
@c_sublocid_all = internal constant i32 -3, align 4
@rootLocale = internal global %chpl_locale_object* null
@rootLocaleInitialized = internal global i8 0
@origRootLocale = internal global %chpl_locale_object* null
@dummyLocale = internal global %chpl_DummyLocale_object* null
@numLocales = internal global i64 0
@_str_literal_2967 = internal global %string zeroinitializer
@_str_literal_2065 = internal global %string zeroinitializer
@_str_literal_2067 = internal global %string zeroinitializer
@_str_literal_957 = internal global %string zeroinitializer
@_str_literal_959 = internal global %string zeroinitializer
@_str_literal_3195 = internal global %string zeroinitializer
@_str_literal_3197 = internal global %string zeroinitializer
@_str_literal_3226 = internal global %string zeroinitializer
@_str_literal_3228 = internal global %string zeroinitializer
@_str_literal_3230 = internal global %string zeroinitializer
@_str_literal_3254 = internal global %string zeroinitializer
@_str_literal_3256 = internal global %string zeroinitializer
@_str_literal_30 = internal global %string zeroinitializer
@_str_literal_1964 = internal global %string zeroinitializer
@_str_literal_1966 = internal global %string zeroinitializer
@_str_literal_1909 = internal global %string zeroinitializer
@_str_literal_1968 = internal global %string zeroinitializer
@_str_literal_1901 = internal global %string zeroinitializer
@_str_literal_919 = internal global %string zeroinitializer
@_str_literal_1911 = internal global %string zeroinitializer
@_str_literal_1915 = internal global %string zeroinitializer
@_str_literal_1917 = internal global %string zeroinitializer
@_str_literal_461 = internal global %string zeroinitializer
@_str_literal_1976 = internal global %string zeroinitializer
@_str_literal_1980 = internal global %string zeroinitializer
@_str_literal_314 = internal global %string zeroinitializer
@_str_literal_1599 = internal global %string zeroinitializer
@_str_literal_590 = internal global %string zeroinitializer
@_str_literal_972 = internal global %string zeroinitializer
@_str_literal_1921 = internal global %string zeroinitializer
@_str_literal_1924 = internal global %string zeroinitializer
@_str_literal_613 = internal global %string zeroinitializer
@_str_literal_615 = internal global %string zeroinitializer
@_str_literal_617 = internal global %string zeroinitializer
@_str_literal_1926 = internal global %string zeroinitializer
@_str_literal_1928 = internal global %string zeroinitializer
@_str_literal_1942 = internal global %string zeroinitializer
@_str_literal_1944 = internal global %string zeroinitializer
@_str_literal_1946 = internal global %string zeroinitializer
@_str_literal_1948 = internal global %string zeroinitializer
@_str_literal_349 = internal global %string zeroinitializer
@_str_literal_2724 = internal global %string zeroinitializer
@_str_literal_2726 = internal global %string zeroinitializer
@_str_literal_1952 = internal global %string zeroinitializer
@_str_literal_361 = internal global %string zeroinitializer
@_str_literal_1633 = internal global %string zeroinitializer
@_str_literal_1687 = internal global %string zeroinitializer
@_str_literal_1636 = internal global %string zeroinitializer
@_str_literal_180 = internal global %string zeroinitializer
@_str_literal_1662 = internal global %string zeroinitializer
@_str_literal_1664 = internal global %string zeroinitializer
@_str_literal_383 = internal global %string zeroinitializer
@_str_literal_385 = internal global %string zeroinitializer
@_str_literal_2255 = internal global %string zeroinitializer
@_str_literal_2273 = internal global %string zeroinitializer
@_str_literal_1077 = internal global %string zeroinitializer
@_str_literal_2276 = internal global %string zeroinitializer
@_str_literal_763 = internal global %string zeroinitializer
@_str_literal_1080 = internal global %string zeroinitializer
@_str_literal_3171 = internal global %string zeroinitializer
@_str_literal_3218 = internal global %string zeroinitializer
@_str_literal_2350 = internal global %string zeroinitializer
@_str_literal_2354 = internal global %string zeroinitializer
@_str_literal_405 = internal global %string zeroinitializer
@_str_literal_413 = internal global %string zeroinitializer
@_str_literal_417 = internal global %string zeroinitializer
@_str_literal_428 = internal global %string zeroinitializer
@_str_literal_2380 = internal global %string zeroinitializer
@_str_literal_2383 = internal global %string zeroinitializer
@_str_literal_1414 = internal global %string zeroinitializer
@_str_literal_2419 = internal global %string zeroinitializer
@_str_literal_2430 = internal global %string zeroinitializer
@_str_literal_2468 = internal global %string zeroinitializer
@_str_literal_2474 = internal global %string zeroinitializer
@_str_literal_2477 = internal global %string zeroinitializer
@_str_literal_2479 = internal global %string zeroinitializer
@_str_literal_2481 = internal global %string zeroinitializer
@_str_literal_2483 = internal global %string zeroinitializer
@_str_literal_2485 = internal global %string zeroinitializer
@_str_literal_2530 = internal global %string zeroinitializer
@_str_literal_2532 = internal global %string zeroinitializer
@chpl_offset_endCount = internal global i64 0
@chpl_offset_serial = internal global i64 0
@chpl_offset_end = internal global i64 0
@numThreadsPerLocale = internal global i64 0
@dataParTasksPerLocale = internal global i64 0
@dataParIgnoreRunningTasks = internal global i8 0
@dataParMinGranularity = internal global i64 0
@defaultDist = internal global %_distribution_DefaultDist zeroinitializer
@defaultExternDist = internal global %chpl_ExternDist_object* null
@chpl_emptyLocaleSpace2 = internal global %_domain_DefaultRectangularDom_1_int64_t_F zeroinitializer
@chpl_emptyLocales2 = internal global %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t zeroinitializer
@doneCreatingLocales = internal global i8 0
@chpl_nodeID = external global i32, align 4
@chpl_localeTree = internal global %chpl_localeTreeRecord zeroinitializer
@Locales = internal global %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* null
@call_tmp = internal global %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* null
@LocaleSpace = internal global %_domain_DefaultRectangularDom_1_int64_t_F zeroinitializer
@memTrack = internal global i8 0
@memStats = internal global i8 0
@memLeaksByType = internal global i8 0
@memLeaks = internal global i8 0
@memMax = internal global i64 0
@memThreshold = internal global i64 0
@memLog = internal global %string zeroinitializer
@memLeaksLog = internal global %string zeroinitializer
@memLeaksByDesc = internal global %string zeroinitializer
@cMemMax = internal global i64 0
@cMemThreshold = internal global i64 0
@printModuleInitOrder = internal global i8 0
@moduleInitLevel = internal global i32 0
@uint_A = internal global i8 0
@uint_Z = internal global i8 0
@uint_a = internal global i8 0
@uint_z = internal global i8 0
@uint_0 = internal global i8 0
@uint_9 = internal global i8 0
@uint_space = internal global i8 0
@uint_tab = internal global i8 0
@uint_newline = internal global i8 0
@uint_return = internal global i8 0
@chpl__init_ChapelStringLiterals_p = internal global i8 0
@chpl__init_DSIUtil_p = internal global i8 0
@chpl__init_SysCTypes_p = internal global i8 0
@chpl__init_matrix_multiplication_p = internal global i8 0
@chpl__init_ChapelDistribution_p = internal global i8 0
@chpl__init_ChapelDynDispHack_p = internal global i8 0
@chpl__init_LocaleModelHelpFlat_p = internal global i8 0
@chpl__init_MemConsistency_p = internal global i8 0
@chpl__init_StringCasts_p = internal global i8 0
@chpl__init_ChapelNumLocales_p = internal global i8 0
@chpl__init_ChapelTaskDataHelp_p = internal global i8 0
@chpl__init_ChapelTaskData_p = internal global i8 0
@chpl__init_ChapelTaskTable_p = internal global i8 0
@chpl__init_DefaultAssociative_p = internal global i8 0
@chpl__init_DefaultRectangular_p = internal global i8 0
@chpl__init_MemTracking_p = internal global i8 0
@chpl__init_ChapelBase_p = internal global i8 0
@chpl__init_ChapelStandard_p = internal global i8 0
@chpl__init_ChapelUtil_p = internal global i8 0
@chpl__init_CString_p = internal global i8 0
@chpl__init_ExternalArray_p = internal global i8 0
@chpl__init_LocaleTree_p = internal global i8 0
@chpl__init_ChapelError_p = internal global i8 0
@chpl__init_CPtr_p = internal global i8 0
@chpl__init_List_p = internal global i8 0
@chpl__init_ChapelDebugPrint_p = internal global i8 0
@chpl__init_ChapelThreads_p = internal global i8 0
@chpl__init_LocaleModelHelpMem_p = internal global i8 0
@chpl__init_LocaleModelHelpRuntime_p = internal global i8 0
@chpl__init_LocaleModel_p = internal global i8 0
@chpl__init_PrintModuleInitOrder_p = internal global i8 0
@chpl__init_LocaleModelHelpSetup_p = internal global i8 0
@chpl__init_Assert_p = internal global i8 0
@chpl__init_SysError_p = internal global i8 0
@chpl__init_RangeChunk_p = internal global i8 0
@chpl__init_ChapelTuple_p = internal global i8 0
@chpl__init_LocalesArray_p = internal global i8 0
@chpl__init_SysBasic_p = internal global i8 0
@chpl__init_Sys_p = internal global i8 0
@chpl__init_ChapelLocale_p = internal global i8 0
@chpl__init_String_p = internal global i8 0
@chpl__init_Atomics_p = internal global i8 0
@chpl__init_ChapelRange_p = internal global i8 0
@chpl__init_ChapelArray_p = internal global i8 0
@chpl__init_Sort_p = internal global i8 0
@chpl__init_ChapelIO_p = internal global i8 0
@chpl__init_Regexp_p = internal global i8 0
@chpl__init_IO_p = internal global i8 0
@chpl__init_AlignedTSupport_p = internal global i8 0
@chpl__init_FormattedIO_p = internal global i8 0
@IOHINT_NONE_chpl = internal global i32 0
@IOHINT_RANDOM_chpl = internal global i32 0
@IOHINT_SEQUENTIAL_chpl = internal global i32 0
@IOHINT_CACHED_chpl = internal global i32 0
@IOHINT_PARALLEL_chpl = internal global i32 0
@curl_function_struct = external global %struct.qio_file_functions_s, align 8
@curl_function_struct_ptr = external constant %struct.qio_file_functions_s*, align 8
@hdfs_function_struct_ptr = external constant %struct.qio_file_functions_s*, align 8
@_arg_to_proto_names_chpl = internal global [6 x %string] zeroinitializer
@stdin_chpl = internal global %channel_F_dynamic_T_chpl zeroinitializer
@stdout_chpl = internal global %channel_T_dynamic_T_chpl zeroinitializer
@stderr_chpl = internal global %channel_T_dynamic_T_chpl zeroinitializer
@defaultComparator_chpl = internal global %DefaultComparator_chpl zeroinitializer
@reverseComparator_chpl = internal global %ReverseComparator_DefaultComparator_chpl zeroinitializer
@chpl_numGlobalsOnHeap = constant i32 0
@chpl_globals_registry = global [1 x %struct.wide_ptr_s*] zeroinitializer
@chpl_heterogeneous = constant i32 0
@0 = private unnamed_addr constant [5 x i8] c"_ref\00"
@_cstr_literal_3710 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0)
@1 = private unnamed_addr constant [15 x i8] c"ReferenceCount\00"
@_cstr_literal_3711 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i32 0, i32 0)
@2 = private unnamed_addr constant [12 x i8] c"LocaleModel\00"
@_cstr_literal_3304 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0)
@3 = private unnamed_addr constant [11 x i8] c"RootLocale\00"
@_cstr_literal_3712 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0)
@4 = private unnamed_addr constant [7 x i8] c"locale\00"
@_cstr_literal_3713 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i32 0, i32 0)
@5 = private unnamed_addr constant [12 x i8] c"DummyLocale\00"
@_cstr_literal_3714 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0)
@6 = private unnamed_addr constant [20 x i8] c"AbstractLocaleModel\00"
@_cstr_literal_3715 = constant i8* getelementptr inbounds ([20 x i8], [20 x i8]* @6, i32 0, i32 0)
@7 = private unnamed_addr constant [19 x i8] c"AbstractRootLocale\00"
@_cstr_literal_3716 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @7, i32 0, i32 0)
@8 = private unnamed_addr constant [8 x i8] c"BaseDom\00"
@_cstr_literal_3717 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i32 0, i32 0)
@9 = private unnamed_addr constant [6 x i8] c"Error\00"
@_cstr_literal_3718 = constant i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0)
@10 = private unnamed_addr constant [21 x i8] c"IllegalArgumentError\00"
@_cstr_literal_3719 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @10, i32 0, i32 0)
@11 = private unnamed_addr constant [11 x i8] c"TaskErrors\00"
@_cstr_literal_3720 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @11, i32 0, i32 0)
@12 = private unnamed_addr constant [12 x i8] c"SystemError\00"
@_cstr_literal_3721 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i32 0, i32 0)
@13 = private unnamed_addr constant [16 x i8] c"BlockingIOError\00"
@_cstr_literal_3722 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @13, i32 0, i32 0)
@14 = private unnamed_addr constant [18 x i8] c"ChildProcessError\00"
@_cstr_literal_3723 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @14, i32 0, i32 0)
@15 = private unnamed_addr constant [16 x i8] c"ConnectionError\00"
@_cstr_literal_3724 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @15, i32 0, i32 0)
@16 = private unnamed_addr constant [16 x i8] c"BrokenPipeError\00"
@_cstr_literal_3725 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @16, i32 0, i32 0)
@17 = private unnamed_addr constant [23 x i8] c"ConnectionAbortedError\00"
@_cstr_literal_3726 = constant i8* getelementptr inbounds ([23 x i8], [23 x i8]* @17, i32 0, i32 0)
@18 = private unnamed_addr constant [23 x i8] c"ConnectionRefusedError\00"
@_cstr_literal_3727 = constant i8* getelementptr inbounds ([23 x i8], [23 x i8]* @18, i32 0, i32 0)
@19 = private unnamed_addr constant [21 x i8] c"ConnectionResetError\00"
@_cstr_literal_3728 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @19, i32 0, i32 0)
@20 = private unnamed_addr constant [16 x i8] c"FileExistsError\00"
@_cstr_literal_3729 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @20, i32 0, i32 0)
@21 = private unnamed_addr constant [18 x i8] c"FileNotFoundError\00"
@_cstr_literal_3730 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @21, i32 0, i32 0)
@22 = private unnamed_addr constant [17 x i8] c"InterruptedError\00"
@_cstr_literal_3731 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @22, i32 0, i32 0)
@23 = private unnamed_addr constant [18 x i8] c"IsADirectoryError\00"
@_cstr_literal_3732 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @23, i32 0, i32 0)
@24 = private unnamed_addr constant [19 x i8] c"NotADirectoryError\00"
@_cstr_literal_3733 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @24, i32 0, i32 0)
@25 = private unnamed_addr constant [16 x i8] c"PermissionError\00"
@_cstr_literal_3734 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @25, i32 0, i32 0)
@26 = private unnamed_addr constant [19 x i8] c"ProcessLookupError\00"
@_cstr_literal_3735 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @26, i32 0, i32 0)
@27 = private unnamed_addr constant [13 x i8] c"TimeoutError\00"
@_cstr_literal_3736 = constant i8* getelementptr inbounds ([13 x i8], [13 x i8]* @27, i32 0, i32 0)
@28 = private unnamed_addr constant [8 x i8] c"IOError\00"
@_cstr_literal_3737 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @28, i32 0, i32 0)
@29 = private unnamed_addr constant [9 x i8] c"EOFError\00"
@_cstr_literal_3738 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @29, i32 0, i32 0)
@30 = private unnamed_addr constant [19 x i8] c"UnexpectedEOFError\00"
@_cstr_literal_3739 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @30, i32 0, i32 0)
@31 = private unnamed_addr constant [15 x i8] c"BadFormatError\00"
@_cstr_literal_3740 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @31, i32 0, i32 0)
@32 = private unnamed_addr constant [15 x i8] c"BadRegexpError\00"
@_cstr_literal_3741 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @32, i32 0, i32 0)
@33 = private unnamed_addr constant [14 x i8] c"_EndCountBase\00"
@_cstr_literal_3742 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @33, i32 0, i32 0)
@34 = private unnamed_addr constant [18 x i8] c"chpl_ModuleDeinit\00"
@_cstr_literal_3743 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @34, i32 0, i32 0)
@35 = private unnamed_addr constant [13 x i8] c"ReduceScanOp\00"
@_cstr_literal_3744 = constant i8* getelementptr inbounds ([13 x i8], [13 x i8]* @35, i32 0, i32 0)
@36 = private unnamed_addr constant [14 x i8] c"localesSignal\00"
@_cstr_literal_3745 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @36, i32 0, i32 0)
@37 = private unnamed_addr constant [9 x i8] c"BaseDist\00"
@_cstr_literal_3746 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @37, i32 0, i32 0)
@38 = private unnamed_addr constant [12 x i8] c"DefaultDist\00"
@_cstr_literal_3747 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @38, i32 0, i32 0)
@39 = private unnamed_addr constant [8 x i8] c"BaseArr\00"
@_cstr_literal_3748 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @39, i32 0, i32 0)
@40 = private unnamed_addr constant [19 x i8] c"BaseAssociativeDom\00"
@_cstr_literal_3749 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @40, i32 0, i32 0)
@41 = private unnamed_addr constant [14 x i8] c"BaseOpaqueDom\00"
@_cstr_literal_3750 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @41, i32 0, i32 0)
@42 = private unnamed_addr constant [11 x i8] c"ExternDist\00"
@_cstr_literal_3751 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @42, i32 0, i32 0)
@43 = private unnamed_addr constant [15 x i8] c"NilThrownError\00"
@_cstr_literal_3752 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @43, i32 0, i32 0)
@44 = private unnamed_addr constant [21 x i8] c"_channel_regexp_info\00"
@_cstr_literal_3753 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @44, i32 0, i32 0)
@45 = private unnamed_addr constant [15 x i8] c"c_ptr(uint(8))\00"
@_cstr_literal_3754 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @45, i32 0, i32 0)
@46 = private unnamed_addr constant [32 x i8] c"_EndCount(atomic_int64,int(64))\00"
@_cstr_literal_3755 = constant i8* getelementptr inbounds ([32 x i8], [32 x i8]* @46, i32 0, i32 0)
@47 = private unnamed_addr constant [40 x i8] c"_ic_chpl_direct_param_stride_range_iter\00"
@_cstr_literal_3756 = constant i8* getelementptr inbounds ([40 x i8], [40 x i8]* @47, i32 0, i32 0)
@48 = private unnamed_addr constant [42 x i8] c"_ic_chpl_direct_counted_range_iter_helper\00"
@_cstr_literal_3757 = constant i8* getelementptr inbounds ([42 x i8], [42 x i8]* @48, i32 0, i32 0)
@49 = private unnamed_addr constant [35 x i8] c"_ic_chpl_direct_counted_range_iter\00"
@_cstr_literal_3758 = constant i8* getelementptr inbounds ([35 x i8], [35 x i8]* @49, i32 0, i32 0)
@50 = private unnamed_addr constant [34 x i8] c"_ic_these_range_int64_t_bounded_T\00"
@_cstr_literal_3759 = constant i8* getelementptr inbounds ([34 x i8], [34 x i8]* @50, i32 0, i32 0)
@51 = private unnamed_addr constant [34 x i8] c"_ic_these_range_int64_t_bounded_F\00"
@_cstr_literal_3760 = constant i8* getelementptr inbounds ([34 x i8], [34 x i8]* @51, i32 0, i32 0)
@52 = private unnamed_addr constant [37 x i8] c"_ic_these_range_int64_t_boundedLow_F\00"
@_cstr_literal_3761 = constant i8* getelementptr inbounds ([37 x i8], [37 x i8]* @52, i32 0, i32 0)
@53 = private unnamed_addr constant [24 x i8] c"domain(1,int(64),false)\00"
@_cstr_literal_3194 = constant i8* getelementptr inbounds ([24 x i8], [24 x i8]* @53, i32 0, i32 0)
@54 = private unnamed_addr constant [15 x i8] c"_ddata(locale)\00"
@_cstr_literal_3762 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @54, i32 0, i32 0)
@55 = private unnamed_addr constant [54 x i8] c"DefaultRectangularArr(1,int(64),false,locale,int(64))\00"
@_cstr_literal_3763 = constant i8* getelementptr inbounds ([54 x i8], [54 x i8]* @55, i32 0, i32 0)
@56 = private unnamed_addr constant [12 x i8] c"c_ptr(bool)\00"
@_cstr_literal_3764 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @56, i32 0, i32 0)
@57 = private unnamed_addr constant [27 x i8] c"_ic_chpl_direct_range_iter\00"
@_cstr_literal_3765 = constant i8* getelementptr inbounds ([27 x i8], [27 x i8]* @57, i32 0, i32 0)
@58 = private unnamed_addr constant [28 x i8] c"listNode(unmanaged BaseArr)\00"
@_cstr_literal_3766 = constant i8* getelementptr inbounds ([28 x i8], [28 x i8]* @58, i32 0, i32 0)
@59 = private unnamed_addr constant [43 x i8] c"BaseArrOverRectangularDom(1,int(64),false)\00"
@_cstr_literal_3767 = constant i8* getelementptr inbounds ([43 x i8], [43 x i8]* @59, i32 0, i32 0)
@60 = private unnamed_addr constant [28 x i8] c"_ic_these__ref_list_BaseArr\00"
@_cstr_literal_3768 = constant i8* getelementptr inbounds ([28 x i8], [28 x i8]* @60, i32 0, i32 0)
@61 = private unnamed_addr constant [38 x i8] c"_ic_chpl_direct_pos_stride_range_iter\00"
@_cstr_literal_3769 = constant i8* getelementptr inbounds ([38 x i8], [38 x i8]* @61, i32 0, i32 0)
@62 = private unnamed_addr constant [25 x i8] c"_ic_chpl__serialViewIter\00"
@_cstr_literal_3770 = constant i8* getelementptr inbounds ([25 x i8], [25 x i8]* @62, i32 0, i32 0)
@63 = private unnamed_addr constant [59 x i8] c"_ic_these_DefaultRectangularArr_1_int64_t_F_locale_int64_t\00"
@_cstr_literal_3771 = constant i8* getelementptr inbounds ([59 x i8], [59 x i8]* @63, i32 0, i32 0)
@64 = private unnamed_addr constant [71 x i8] c"_ic_these__ref__array_DefaultRectangularArr_1_int64_t_F_locale_int64_t\00"
@_cstr_literal_3772 = constant i8* getelementptr inbounds ([71 x i8], [71 x i8]* @64, i32 0, i32 0)
@65 = private unnamed_addr constant [44 x i8] c"_ic_these_DefaultRectangularDom_1_int64_t_F\00"
@_cstr_literal_3773 = constant i8* getelementptr inbounds ([44 x i8], [44 x i8]* @65, i32 0, i32 0)
@66 = private unnamed_addr constant [57 x i8] c"_ic_these__ref__domain_DefaultRectangularDom_1_int64_t_F\00"
@_cstr_literal_3774 = constant i8* getelementptr inbounds ([57 x i8], [57 x i8]* @66, i32 0, i32 0)
@67 = private unnamed_addr constant [42 x i8] c"_ic_chpl_initOnLocales_AbstractRootLocale\00"
@_cstr_literal_3775 = constant i8* getelementptr inbounds ([42 x i8], [42 x i8]* @67, i32 0, i32 0)
@68 = private unnamed_addr constant [32 x i8] c"_ddata(unmanaged localesSignal)\00"
@_cstr_literal_3776 = constant i8* getelementptr inbounds ([32 x i8], [32 x i8]* @68, i32 0, i32 0)
@69 = private unnamed_addr constant [71 x i8] c"DefaultRectangularArr(1,int(64),false,unmanaged localesSignal,int(64))\00"
@_cstr_literal_3777 = constant i8* getelementptr inbounds ([71 x i8], [71 x i8]* @69, i32 0, i32 0)
@70 = private unnamed_addr constant [66 x i8] c"_ic_these_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t\00"
@_cstr_literal_3778 = constant i8* getelementptr inbounds ([66 x i8], [66 x i8]* @70, i32 0, i32 0)
@71 = private unnamed_addr constant [78 x i8] c"_ic_these__ref__array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t\00"
@_cstr_literal_3779 = constant i8* getelementptr inbounds ([78 x i8], [78 x i8]* @71, i32 0, i32 0)
@72 = private unnamed_addr constant [24 x i8] c"domain(2,int(64),false)\00"
@_cstr_literal_3253 = constant i8* getelementptr inbounds ([24 x i8], [24 x i8]* @72, i32 0, i32 0)
@73 = private unnamed_addr constant [17 x i8] c"_ddata(real(64))\00"
@_cstr_literal_3780 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @73, i32 0, i32 0)
@74 = private unnamed_addr constant [56 x i8] c"DefaultRectangularArr(2,int(64),false,real(64),int(64))\00"
@_cstr_literal_3781 = constant i8* getelementptr inbounds ([56 x i8], [56 x i8]* @74, i32 0, i32 0)
@75 = private unnamed_addr constant [30 x i8] c"c_ptr(chpl_task_ChapelData_t)\00"
@_cstr_literal_3782 = constant i8* getelementptr inbounds ([30 x i8], [30 x i8]* @75, i32 0, i32 0)
@76 = private unnamed_addr constant [15 x i8] c"_ddata(string)\00"
@_cstr_literal_3783 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @76, i32 0, i32 0)
@77 = private unnamed_addr constant [28 x i8] c"_ic_these__ref_list_BaseDom\00"
@_cstr_literal_3784 = constant i8* getelementptr inbounds ([28 x i8], [28 x i8]* @77, i32 0, i32 0)
@78 = private unnamed_addr constant [28 x i8] c"listNode(unmanaged BaseDom)\00"
@_cstr_literal_3785 = constant i8* getelementptr inbounds ([28 x i8], [28 x i8]* @78, i32 0, i32 0)
@79 = private unnamed_addr constant [43 x i8] c"BaseArrOverRectangularDom(2,int(64),false)\00"
@_cstr_literal_3786 = constant i8* getelementptr inbounds ([43 x i8], [43 x i8]* @79, i32 0, i32 0)
@80 = private unnamed_addr constant [16 x i8] c"_ddata(int(64))\00"
@_cstr_literal_3787 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @80, i32 0, i32 0)
@81 = private unnamed_addr constant [55 x i8] c"DefaultRectangularArr(1,int(64),false,int(64),int(64))\00"
@_cstr_literal_3788 = constant i8* getelementptr inbounds ([55 x i8], [55 x i8]* @81, i32 0, i32 0)
@82 = private unnamed_addr constant [49 x i8] c"_ic_these_help_DefaultRectangularDom_1_int64_t_F\00"
@_cstr_literal_3789 = constant i8* getelementptr inbounds ([49 x i8], [49 x i8]* @82, i32 0, i32 0)
@83 = private unnamed_addr constant [17 x i8] c"_ddata(uint(64))\00"
@_cstr_literal_3790 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @83, i32 0, i32 0)
@84 = private unnamed_addr constant [56 x i8] c"DefaultRectangularArr(1,int(64),false,uint(64),int(64))\00"
@_cstr_literal_3791 = constant i8* getelementptr inbounds ([56 x i8], [56 x i8]* @84, i32 0, i32 0)
@85 = private unnamed_addr constant [61 x i8] c"_ic_these_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t\00"
@_cstr_literal_3792 = constant i8* getelementptr inbounds ([61 x i8], [61 x i8]* @85, i32 0, i32 0)
@86 = private unnamed_addr constant [73 x i8] c"_ic_these__ref__array_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t\00"
@_cstr_literal_3793 = constant i8* getelementptr inbounds ([73 x i8], [73 x i8]* @86, i32 0, i32 0)
@87 = private unnamed_addr constant [44 x i8] c"_ic_these_DefaultRectangularDom_2_int64_t_F\00"
@_cstr_literal_3794 = constant i8* getelementptr inbounds ([44 x i8], [44 x i8]* @87, i32 0, i32 0)
@88 = private unnamed_addr constant [60 x i8] c"_ic_these_DefaultRectangularArr_2_int64_t_F__real64_int64_t\00"
@_cstr_literal_3795 = constant i8* getelementptr inbounds ([60 x i8], [60 x i8]* @88, i32 0, i32 0)
@89 = private unnamed_addr constant [72 x i8] c"_ic_these__ref__array_DefaultRectangularArr_2_int64_t_F__real64_int64_t\00"
@_cstr_literal_3796 = constant i8* getelementptr inbounds ([72 x i8], [72 x i8]* @89, i32 0, i32 0)
@90 = private unnamed_addr constant [49 x i8] c"_ic_these_help_DefaultRectangularDom_2_int64_t_F\00"
@_cstr_literal_3797 = constant i8* getelementptr inbounds ([49 x i8], [49 x i8]* @90, i32 0, i32 0)
@91 = private unnamed_addr constant [31 x i8] c"_ic_chpl__serialViewIterHelper\00"
@_cstr_literal_3798 = constant i8* getelementptr inbounds ([31 x i8], [31 x i8]* @91, i32 0, i32 0)
@92 = private unnamed_addr constant [60 x i8] c"_ic_these_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t\00"
@_cstr_literal_3799 = constant i8* getelementptr inbounds ([60 x i8], [60 x i8]* @92, i32 0, i32 0)
@93 = private unnamed_addr constant [72 x i8] c"_ic_these__ref__array_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t\00"
@_cstr_literal_3800 = constant i8* getelementptr inbounds ([72 x i8], [72 x i8]* @93, i32 0, i32 0)
@94 = private unnamed_addr constant [23 x i8] c"c_ptr(chpl_localeID_t)\00"
@_cstr_literal_3801 = constant i8* getelementptr inbounds ([23 x i8], [23 x i8]* @94, i32 0, i32 0)
@95 = private unnamed_addr constant [18 x i8] c"c_ptr(c_void_ptr)\00"
@_cstr_literal_3802 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @95, i32 0, i32 0)
@96 = private unnamed_addr constant [21 x i8] c"_ic_these_TaskErrors\00"
@_cstr_literal_3803 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @96, i32 0, i32 0)
@97 = private unnamed_addr constant [57 x i8] c"_ic_these__ref__domain_DefaultRectangularDom_2_int64_t_F\00"
@_cstr_literal_3804 = constant i8* getelementptr inbounds ([57 x i8], [57 x i8]* @97, i32 0, i32 0)
@98 = private unnamed_addr constant [14 x i8] c"c_ptr(string)\00"
@_cstr_literal_3805 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @98, i32 0, i32 0)
@99 = private unnamed_addr constant [31 x i8] c"c_ptr(domain(1,int(64),false))\00"
@_cstr_literal_3806 = constant i8* getelementptr inbounds ([31 x i8], [31 x i8]* @99, i32 0, i32 0)
@100 = private unnamed_addr constant [31 x i8] c"c_ptr(domain(2,int(64),false))\00"
@_cstr_literal_3807 = constant i8* getelementptr inbounds ([31 x i8], [31 x i8]* @100, i32 0, i32 0)
@chpl_mem_descs = constant [140 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @16, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @20, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @22, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @23, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @25, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @31, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @34, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @35, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @36, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @37, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @38, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @39, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @40, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @41, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @43, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @44, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @45, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @46, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @47, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @48, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @49, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @50, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @51, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @52, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @53, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @54, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @55, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @56, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @57, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @51, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @58, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @59, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @60, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @61, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @63, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @65, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @69, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @70, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @72, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @73, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @74, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @75, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @76, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @77, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @78, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @65, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @63, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @65, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @63, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @70, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @70, i32 0, i32 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @79, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @80, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @81, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @82, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @82, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @65, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @47, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @57, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @83, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @84, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @85, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @86, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @87, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @88, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @89, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @90, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @90, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @87, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @91, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @88, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @89, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @90, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @90, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @87, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @88, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @89, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @92, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @93, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @92, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @93, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @92, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @93, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @85, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @86, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @85, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @86, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @94, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @95, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @96, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @87, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @97, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @98, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @99, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @100, i32 0, i32 0)]
@chpl_mem_numDescs = constant i32 140
@chpl_verbose_comm = external global i32, align 4
@chpl_comm_diagnostics = external global i32, align 4
@chpl_verbose_mem = external global i32, align 4
@chpl_private_broadcast_table = global [3 x i8*] [i8* bitcast (i32* @chpl_verbose_comm to i8*), i8* bitcast (i32* @chpl_comm_diagnostics to i8*), i8* bitcast (i32* @chpl_verbose_mem to i8*)]
@chpl_subclass_max_id = constant [59 x i32] [i32 0, i32 58, i32 3, i32 3, i32 4, i32 7, i32 6, i32 7, i32 12, i32 10, i32 10, i32 12, i32 12, i32 25, i32 22, i32 16, i32 16, i32 18, i32 18, i32 20, i32 20, i32 22, i32 22, i32 25, i32 25, i32 25, i32 49, i32 27, i32 28, i32 29, i32 49, i32 31, i32 32, i32 37, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 49, i32 47, i32 48, i32 49, i32 55, i32 51, i32 53, i32 53, i32 55, i32 55, i32 56, i32 57, i32 58]
@101 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_3808 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @101, i32 0, i32 0)
@102 = private unnamed_addr constant [7 x i8] c"object\00"
@_cstr_literal_3809 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @102, i32 0, i32 0)
@103 = private unnamed_addr constant [36 x i8] c"BaseRectangularDom(1,int(64),false)\00"
@_cstr_literal_3810 = constant i8* getelementptr inbounds ([36 x i8], [36 x i8]* @103, i32 0, i32 0)
@104 = private unnamed_addr constant [36 x i8] c"BaseRectangularDom(2,int(64),false)\00"
@_cstr_literal_3811 = constant i8* getelementptr inbounds ([36 x i8], [36 x i8]* @104, i32 0, i32 0)
@105 = private unnamed_addr constant [44 x i8] c"BaseRectangularArr(1,int(64),false,int(64))\00"
@_cstr_literal_3812 = constant i8* getelementptr inbounds ([44 x i8], [44 x i8]* @105, i32 0, i32 0)
@106 = private unnamed_addr constant [43 x i8] c"BaseRectangularArr(1,int(64),false,locale)\00"
@_cstr_literal_3813 = constant i8* getelementptr inbounds ([43 x i8], [43 x i8]* @106, i32 0, i32 0)
@107 = private unnamed_addr constant [60 x i8] c"BaseRectangularArr(1,int(64),false,unmanaged localesSignal)\00"
@_cstr_literal_3814 = constant i8* getelementptr inbounds ([60 x i8], [60 x i8]* @107, i32 0, i32 0)
@108 = private unnamed_addr constant [45 x i8] c"BaseRectangularArr(1,int(64),false,uint(64))\00"
@_cstr_literal_3815 = constant i8* getelementptr inbounds ([45 x i8], [45 x i8]* @108, i32 0, i32 0)
@109 = private unnamed_addr constant [45 x i8] c"BaseRectangularArr(2,int(64),false,real(64))\00"
@_cstr_literal_3816 = constant i8* getelementptr inbounds ([45 x i8], [45 x i8]* @109, i32 0, i32 0)
@chpl_classNames = constant [59 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @102, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @46, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @37, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @38, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @42, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @103, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @53, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @104, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @72, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @39, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @59, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @105, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @81, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @106, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @55, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @107, i32 0, i32 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @69, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @108, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @84, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @79, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @109, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @74, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @43, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @16, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @20, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @21, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @22, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @23, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @25, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @31, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @36, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @58, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @78, i32 0, i32 0)]
@chpl_ftable = constant [11 x void (i8*)*] [void (i8*)* bitcast (void (%chpl__class_localscoforall_fn2_object*)* @wrapcoforall_fn to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn_object*)* @wrapcoforall_fn2 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn5_object*)* @wrapcoforall_fn3 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn4_object*)* @wrapcoforall_fn4 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn3_object*)* @wrapcoforall_fn5 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn9_object*)* @wrapcoforall_fn6 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn7_object*)* @wrapcoforall_fn7 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn8_object*)* @wrapcoforall_fn8 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn6_object*)* @wrapcoforall_fn9 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn10_object*)* @wrapcoforall_fn10 to void (i8*)*), void (i8*)* bitcast (void (%chpl__class_localscoforall_fn11_object*)* @wrapcoforall_fn11 to void (i8*)*)]
@110 = private unnamed_addr constant [16 x i8] c"wrapcoforall_fn\00"
@_cstr_literal_3817 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @110, i32 0, i32 0)
@111 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn2\00"
@_cstr_literal_3818 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @111, i32 0, i32 0)
@112 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn3\00"
@_cstr_literal_3819 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @112, i32 0, i32 0)
@113 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn4\00"
@_cstr_literal_3820 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @113, i32 0, i32 0)
@114 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn5\00"
@_cstr_literal_3821 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @114, i32 0, i32 0)
@115 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn6\00"
@_cstr_literal_3822 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @115, i32 0, i32 0)
@116 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn7\00"
@_cstr_literal_3823 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @116, i32 0, i32 0)
@117 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn8\00"
@_cstr_literal_3824 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @117, i32 0, i32 0)
@118 = private unnamed_addr constant [17 x i8] c"wrapcoforall_fn9\00"
@_cstr_literal_3825 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @118, i32 0, i32 0)
@119 = private unnamed_addr constant [18 x i8] c"wrapcoforall_fn10\00"
@_cstr_literal_3826 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @119, i32 0, i32 0)
@120 = private unnamed_addr constant [18 x i8] c"wrapcoforall_fn11\00"
@_cstr_literal_3827 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @120, i32 0, i32 0)
@chpl_finfo = constant [12 x %struct._chpl_fn_info] [%struct._chpl_fn_info { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @110, i32 0, i32 0), i32 2, i32 793 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @111, i32 0, i32 0), i32 2, i32 793 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @112, i32 0, i32 0), i32 2, i32 793 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @113, i32 0, i32 0), i32 2, i32 793 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @114, i32 0, i32 0), i32 2, i32 793 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @115, i32 0, i32 0), i32 29, i32 1276 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @116, i32 0, i32 0), i32 29, i32 1276 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @117, i32 0, i32 0), i32 29, i32 1276 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @118, i32 0, i32 0), i32 29, i32 1276 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @119, i32 0, i32 0), i32 29, i32 1276 }, %struct._chpl_fn_info { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @120, i32 0, i32 0), i32 54, i32 71 }, %struct._chpl_fn_info zeroinitializer]
@chpl_vmtable = constant [291 x void (i8*)*] [void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_object_object*, i64, i32)* @chpl__auto_destroy_object to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_chpl___EndCountBase_object*, i64, i32)* @chpl__auto_destroy__EndCountBase to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_chpl___EndCount_atomic_int64_int64_t_object*, i64, i32)* @chpl__auto_destroy__EndCount to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_chpl_ModuleDeinit_object*, i64, i32)* @chpl__auto_destroy_chpl_ModuleDeinit to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseDist_object*, i64, i32)* @deinit7 to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_BaseDist_object*)* @dsiTrackDomains to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultDist_object*, i64, i32)* @chpl__auto_destroy_DefaultDist to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_DefaultDist_object*)* @dsiTrackDomains2 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ExternDist_object*, i64, i32)* @chpl__auto_destroy_ExternDist to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_ExternDist_object*)* @dsiTrackDomains3 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseDom_object*, i64, i32)* @deinit8 to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_BaseDom_object*)* @dsiLinksDistribution to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)* @dsiMyDist to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularDom_1_int64_t_F_object*, i64, i32)* @deinit9 to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_BaseDom_object*)* @dsiLinksDistribution to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)* @dsiMyDist to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultRectangularDom_1_int64_t_F_object*, i64, i32)* @chpl__auto_destroy_DefaultRectangularDom to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_DefaultRectangularDom_1_int64_t_F_object*)* @dsiLinksDistribution2 to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultDist_object* (%chpl_DefaultRectangularDom_1_int64_t_F_object*, i64, i32)* @dsiMyDist2 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularDom_2_int64_t_F_object*, i64, i32)* @deinit10 to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_BaseDom_object*)* @dsiLinksDistribution to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)* @dsiMyDist to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultRectangularDom_2_int64_t_F_object*, i64, i32)* @chpl__auto_destroy_DefaultRectangularDom2 to void (i8*)*), void (i8*)* bitcast (i8 (%chpl_DefaultRectangularDom_2_int64_t_F_object*)* @dsiLinksDistribution3 to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultDist_object* (%chpl_DefaultRectangularDom_2_int64_t_F_object*, i64, i32)* @dsiMyDist3 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseArr_object*, i64, i32)* @deinit11 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, i64, i32)* @deinit13 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)* @dsiPostReallocate to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object*, i64, i32)* @deinit16 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)* @dsiPostReallocate to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, i64, i32)* @chpl__auto_destroy_DefaultRectangularArr2 to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultRectangularDom_1_int64_t_F_object* (%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, i64, i32)* @dsiGetBaseDom6 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate7 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*)* @dsiPostReallocate7 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularArr_1_int64_t_F_locale_object*, i64, i32)* @deinit14 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)* @dsiPostReallocate to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, i64, i32)* @chpl__auto_destroy_DefaultRectangularArr5 to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultRectangularDom_1_int64_t_F_object* (%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, i64, i32)* @dsiGetBaseDom4 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate4 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*)* @dsiPostReallocate6 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object*, i64, i32)* @deinit15 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)* @dsiPostReallocate to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, i64, i32)* @chpl__auto_destroy_DefaultRectangularArr to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultRectangularDom_1_int64_t_F_object* (%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, i64, i32)* @dsiGetBaseDom2 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate5 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*)* @dsiPostReallocate3 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object*, i64, i32)* @deinit17 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)* @dsiPostReallocate to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, i64, i32)* @chpl__auto_destroy_DefaultRectangularArr3 to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultRectangularDom_1_int64_t_F_object* (%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, i64, i32)* @dsiGetBaseDom5 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate6 to void (i8*)*), void (i8*)* bitcast (void (%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*)* @dsiPostReallocate5 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*, i64, i32)* @deinit12 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*, [2 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate2 to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*)* @dsiPostReallocate2 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_BaseRectangularArr_2_int64_t_F__real64_object*, i64, i32)* @deinit18 to void (i8*)*), void (i8*)* bitcast (%chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)* @dsiGetBaseDom to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*, [2 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate2 to void (i8*)*), void (i8*)* bitcast (void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*)* @dsiPostReallocate2 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%ARRTY*, i64, i32)* @chpl__auto_destroy_DefaultRectangularArr4 to void (i8*)*), void (i8*)* bitcast (%chpl_DefaultRectangularDom_2_int64_t_F_object* (%ARRTY*, i64, i32)* @dsiGetBaseDom3 to void (i8*)*), void (i8*)* bitcast (void (%ARRTY*, [2 x %range_int64_t_bounded_F]*, i64, i32)* @dsiReallocate3 to void (i8*)*), void (i8*)* bitcast (void (%ARRTY*)* @dsiPostReallocate4 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_Error_object*, i64, i32)* @chpl__auto_destroy_Error to void (i8*)*), void (i8*)* bitcast (void (%chpl_Error_object*, %string*, i64, i32)* @message to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_NilThrownError_object*, i64, i32)* @chpl__auto_destroy_NilThrownError to void (i8*)*), void (i8*)* bitcast (void (%chpl_NilThrownError_object*, %string*, i64, i32)* @message2 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_IllegalArgumentError_object*, i64, i32)* @chpl__auto_destroy_IllegalArgumentError to void (i8*)*), void (i8*)* bitcast (void (%chpl_IllegalArgumentError_object*, %string*, i64, i32)* @message3 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_TaskErrors_object*, i64, i32)* @deinit19 to void (i8*)*), void (i8*)* bitcast (void (%chpl_TaskErrors_object*, %string*, i64, i32)* @message4 to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, i64, i32)* @chpl__auto_destroy_SystemError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BlockingIOError_chpl_object*, i64, i32)* @chpl__auto_destroy_BlockingIOError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ChildProcessError_chpl_object*, i64, i32)* @chpl__auto_destroy_ChildProcessError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ConnectionError_chpl_object*, i64, i32)* @chpl__auto_destroy_ConnectionError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BrokenPipeError_chpl_object*, i64, i32)* @chpl__auto_destroy_BrokenPipeError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ConnectionAbortedError_chpl_object*, i64, i32)* @chpl__auto_destroy_ConnectionAbortedError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ConnectionRefusedError_chpl_object*, i64, i32)* @chpl__auto_destroy_ConnectionRefusedError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ConnectionResetError_chpl_object*, i64, i32)* @chpl__auto_destroy_ConnectionResetError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_FileExistsError_chpl_object*, i64, i32)* @chpl__auto_destroy_FileExistsError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_FileNotFoundError_chpl_object*, i64, i32)* @chpl__auto_destroy_FileNotFoundError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_InterruptedError_chpl_object*, i64, i32)* @chpl__auto_destroy_InterruptedError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_IsADirectoryError_chpl_object*, i64, i32)* @chpl__auto_destroy_IsADirectoryError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_NotADirectoryError_chpl_object*, i64, i32)* @chpl__auto_destroy_NotADirectoryError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_PermissionError_chpl_object*, i64, i32)* @chpl__auto_destroy_PermissionError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_ProcessLookupError_chpl_object*, i64, i32)* @chpl__auto_destroy_ProcessLookupError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_TimeoutError_chpl_object*, i64, i32)* @chpl__auto_destroy_TimeoutError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_IOError_chpl_object*, i64, i32)* @chpl__auto_destroy_IOError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_EOFError_chpl_object*, i64, i32)* @chpl__auto_destroy_EOFError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_UnexpectedEOFError_chpl_object*, i64, i32)* @chpl__auto_destroy_UnexpectedEOFError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_BadFormatError_chpl_object*, i64, i32)* @chpl__auto_destroy_BadFormatError to void (i8*)*), void (i8*)* bitcast (void (%chpl_SystemError_chpl_object*, %string*, i64, i32)* @message_chpl to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_locale_object*, i64, i32)* @chpl__auto_destroy_locale to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_locale_object*, i64, i32)* @getChildCount to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_locale_object*, i64, i32)* @chpl_id to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)* @getChild to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_DummyLocale_object*, i64, i32)* @chpl__auto_destroy_DummyLocale to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_DummyLocale_object*, i64, i32)* @getChildCount2 to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_DummyLocale_object*, i64, i32)* @chpl_id2 to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_DummyLocale_object*, i64, i64, i32)* @getChild2 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_AbstractLocaleModel_object*, i64, i32)* @chpl__auto_destroy_AbstractLocaleModel to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_locale_object*, i64, i32)* @getChildCount to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_locale_object*, i64, i32)* @chpl_id to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)* @getChild to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_LocaleModel_object*, i64, i32)* @chpl__auto_destroy_LocaleModel to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_LocaleModel_object*, i64, i32)* @getChildCount3 to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_LocaleModel_object*, i64, i32)* @chpl_id3 to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_LocaleModel_object*, i64, i64, i32)* @getChild3 to void (i8*)*), void (i8*)* null, void (i8*)* bitcast (void (%chpl_AbstractRootLocale_object*, i64, i32)* @chpl__auto_destroy_AbstractRootLocale to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_locale_object*, i64, i32)* @getChildCount to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_locale_object*, i64, i32)* @chpl_id to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)* @getChild to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_AbstractRootLocale_object*, %struct.chpl_localeID_t*, i64, i32)* @localeIDtoLocale to void (i8*)*), void (i8*)* bitcast (void (%chpl_RootLocale_object*, i64, i32)* @deinit22 to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_RootLocale_object*, i64, i32)* @getChildCount4 to void (i8*)*), void (i8*)* bitcast (i64 (%chpl_RootLocale_object*, i64, i32)* @chpl_id4 to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_RootLocale_object*, i64, i64, i32)* @getChild4 to void (i8*)*), void (i8*)* bitcast (%chpl_locale_object* (%chpl_RootLocale_object*, %struct.chpl_localeID_t*, i64, i32)* @localeIDtoLocale2 to void (i8*)*), void (i8*)* bitcast (void (%chpl_localesSignal_object*, i64, i32)* @chpl__auto_destroy_localesSignal to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_listNode_BaseArr_chpl_object*, i64, i32)* @chpl__auto_destroy_listNode to void (i8*)*), void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* null, void (i8*)* bitcast (void (%chpl_listNode_BaseDom_chpl_object*, i64, i32)* @chpl__auto_destroy_listNode2 to void (i8*)*)]
@chpl_global_serialize_table = global [0 x i8*] zeroinitializer
@mainHasArgs = constant i32 0
@121 = private unnamed_addr constant [21 x i8] c"printModuleInitOrder\00"
@_cstr_literal_2939 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @121, i32 0, i32 0)
@122 = private unnamed_addr constant [5 x i8] c"bool\00"
@_cstr_literal_3828 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i32 0, i32 0)
@123 = private unnamed_addr constant [9 x i8] c"Built-in\00"
@_cstr_literal_2938 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i32 0, i32 0)
@124 = private unnamed_addr constant [22 x i8] c"dataParTasksPerLocale\00"
@_cstr_literal_2940 = constant i8* getelementptr inbounds ([22 x i8], [22 x i8]* @124, i32 0, i32 0)
@125 = private unnamed_addr constant [8 x i8] c"int(64)\00"
@_cstr_literal_3829 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @125, i32 0, i32 0)
@126 = private unnamed_addr constant [26 x i8] c"dataParIgnoreRunningTasks\00"
@_cstr_literal_2941 = constant i8* getelementptr inbounds ([26 x i8], [26 x i8]* @126, i32 0, i32 0)
@127 = private unnamed_addr constant [22 x i8] c"dataParMinGranularity\00"
@_cstr_literal_2942 = constant i8* getelementptr inbounds ([22 x i8], [22 x i8]* @127, i32 0, i32 0)
@128 = private unnamed_addr constant [9 x i8] c"memTrack\00"
@_cstr_literal_2943 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @128, i32 0, i32 0)
@129 = private unnamed_addr constant [9 x i8] c"memStats\00"
@_cstr_literal_2944 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @129, i32 0, i32 0)
@130 = private unnamed_addr constant [15 x i8] c"memLeaksByType\00"
@_cstr_literal_2945 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @130, i32 0, i32 0)
@131 = private unnamed_addr constant [9 x i8] c"memLeaks\00"
@_cstr_literal_2946 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @131, i32 0, i32 0)
@132 = private unnamed_addr constant [7 x i8] c"memMax\00"
@_cstr_literal_2947 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @132, i32 0, i32 0)
@133 = private unnamed_addr constant [9 x i8] c"uint(64)\00"
@_cstr_literal_3830 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @133, i32 0, i32 0)
@134 = private unnamed_addr constant [13 x i8] c"memThreshold\00"
@_cstr_literal_2948 = constant i8* getelementptr inbounds ([13 x i8], [13 x i8]* @134, i32 0, i32 0)
@135 = private unnamed_addr constant [7 x i8] c"memLog\00"
@_cstr_literal_2949 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @135, i32 0, i32 0)
@136 = private unnamed_addr constant [7 x i8] c"string\00"
@_cstr_literal_3225 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @136, i32 0, i32 0)
@137 = private unnamed_addr constant [12 x i8] c"memLeaksLog\00"
@_cstr_literal_2950 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @137, i32 0, i32 0)
@138 = private unnamed_addr constant [15 x i8] c"memLeaksByDesc\00"
@_cstr_literal_2951 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @138, i32 0, i32 0)
@139 = private unnamed_addr constant [11 x i8] c"numLocales\00"
@_cstr_literal_2952 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @139, i32 0, i32 0)
@140 = private unnamed_addr constant [5 x i8] c"%*s\0A\00"
@_cstr_literal_3315 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i32 0, i32 0)
@141 = private unnamed_addr constant [21 x i8] c"ChapelStringLiterals\00"
@_cstr_literal_3316 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @141, i32 0, i32 0)
@142 = private unnamed_addr constant [30 x i8] c"Pure virtual function called.\00"
@_cstr_literal_29 = constant i8* getelementptr inbounds ([30 x i8], [30 x i8]* @142, i32 0, i32 0)
@143 = private unnamed_addr constant [55 x i8] c"ArrayInit.heuristicInit should have been made concrete\00"
@_cstr_literal_179 = constant i8* getelementptr inbounds ([55 x i8], [55 x i8]* @143, i32 0, i32 0)
@144 = private unnamed_addr constant [40 x i8] c"Unexpected case in integral_to_c_string\00"
@_cstr_literal_313 = constant i8* getelementptr inbounds ([40 x i8], [40 x i8]* @144, i32 0, i32 0)
@145 = private unnamed_addr constant [40 x i8] c"Cannot call .c_str() on a remote string\00"
@_cstr_literal_348 = constant i8* getelementptr inbounds ([40 x i8], [40 x i8]* @145, i32 0, i32 0)
@146 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_360 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @146, i32 0, i32 0)
@147 = private unnamed_addr constant [5 x i8] c" \09\0D\0A\00"
@_cstr_literal_382 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @147, i32 0, i32 0)
@148 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_384 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @148, i32 0, i32 0)
@149 = private unnamed_addr constant [2 x i8] c"a\00"
@_cstr_literal_404 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @149, i32 0, i32 0)
@150 = private unnamed_addr constant [2 x i8] c" \00"
@_cstr_literal_412 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @150, i32 0, i32 0)
@151 = private unnamed_addr constant [2 x i8] c"\0A\00"
@_cstr_literal_416 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @151, i32 0, i32 0)
@152 = private unnamed_addr constant [2 x i8] c")\00"
@_cstr_literal_427 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @152, i32 0, i32 0)
@153 = private unnamed_addr constant [2 x i8] c":\00"
@_cstr_literal_460 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @153, i32 0, i32 0)
@154 = private unnamed_addr constant [5 x i8] c"true\00"
@_cstr_literal_589 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @154, i32 0, i32 0)
@155 = private unnamed_addr constant [2 x i8] c"[\00"
@_cstr_literal_612 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @155, i32 0, i32 0)
@156 = private unnamed_addr constant [3 x i8] c", \00"
@_cstr_literal_614 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @156, i32 0, i32 0)
@157 = private unnamed_addr constant [2 x i8] c"]\00"
@_cstr_literal_616 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @157, i32 0, i32 0)
@158 = private unnamed_addr constant [57 x i8] c"With a negative count, the range must have a last index.\00"
@_cstr_literal_762 = constant i8* getelementptr inbounds ([57 x i8], [57 x i8]* @158, i32 0, i32 0)
@159 = private unnamed_addr constant [47 x i8] c"Cannot create additional LocaleModel instances\00"
@_cstr_literal_918 = constant i8* getelementptr inbounds ([47 x i8], [47 x i8]* @159, i32 0, i32 0)
@160 = private unnamed_addr constant [35 x i8] c"dataParTasksPerLocale must be >= 0\00"
@_cstr_literal_956 = constant i8* getelementptr inbounds ([35 x i8], [35 x i8]* @160, i32 0, i32 0)
@161 = private unnamed_addr constant [34 x i8] c"dataParMinGranularity must be > 0\00"
@_cstr_literal_958 = constant i8* getelementptr inbounds ([34 x i8], [34 x i8]* @161, i32 0, i32 0)
@162 = private unnamed_addr constant [3 x i8] c" (\00"
@_cstr_literal_971 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @162, i32 0, i32 0)
@163 = private unnamed_addr constant [3 x i8] c"[\0A\00"
@_cstr_literal_1076 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @163, i32 0, i32 0)
@164 = private unnamed_addr constant [3 x i8] c",\0A\00"
@_cstr_literal_1079 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @164, i32 0, i32 0)
@165 = private unnamed_addr constant [3 x i8] c": \00"
@_cstr_literal_1413 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @165, i32 0, i32 0)
@166 = private unnamed_addr constant [45 x i8] c"internal error: dsiMyDist is not implemented\00"
@_cstr_literal_1598 = constant i8* getelementptr inbounds ([45 x i8], [45 x i8]* @166, i32 0, i32 0)
@167 = private unnamed_addr constant [49 x i8] c"internal error: dsiGetBaseDom is not implemented\00"
@_cstr_literal_1632 = constant i8* getelementptr inbounds ([49 x i8], [49 x i8]* @167, i32 0, i32 0)
@168 = private unnamed_addr constant [47 x i8] c"reallocating not supported for this array type\00"
@_cstr_literal_1635 = constant i8* getelementptr inbounds ([47 x i8], [47 x i8]* @168, i32 0, i32 0)
@169 = private unnamed_addr constant [17 x i8] c"internal error: \00"
@_cstr_literal_1661 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @169, i32 0, i32 0)
@170 = private unnamed_addr constant [29 x i8] c" contains an bad array type \00"
@_cstr_literal_1663 = constant i8* getelementptr inbounds ([29 x i8], [29 x i8]* @170, i32 0, i32 0)
@171 = private unnamed_addr constant [16 x i8] c"halt reached - \00"
@_cstr_literal_1686 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @171, i32 0, i32 0)
@172 = private unnamed_addr constant [62 x i8] c"To use task tracking, you must recompile with --task-tracking\00"
@_cstr_literal_1900 = constant i8* getelementptr inbounds ([62 x i8], [62 x i8]* @172, i32 0, i32 0)
@173 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_1908 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @173, i32 0, i32 0)
@174 = private unnamed_addr constant [21 x i8] c"thrown error was nil\00"
@_cstr_literal_1910 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @174, i32 0, i32 0)
@175 = private unnamed_addr constant [19 x i8] c"illegal argument '\00"
@_cstr_literal_1914 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @175, i32 0, i32 0)
@176 = private unnamed_addr constant [4 x i8] c"': \00"
@_cstr_literal_1916 = constant i8* getelementptr inbounds ([4 x i8], [4 x i8]* @176, i32 0, i32 0)
@177 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_1920 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @177, i32 0, i32 0)
@178 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_1923 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @178, i32 0, i32 0)
@179 = private unnamed_addr constant [10 x i8] c" errors: \00"
@_cstr_literal_1925 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @179, i32 0, i32 0)
@180 = private unnamed_addr constant [6 x i8] c" ... \00"
@_cstr_literal_1927 = constant i8* getelementptr inbounds ([6 x i8], [6 x i8]* @180, i32 0, i32 0)
@181 = private unnamed_addr constant [10 x i8] c"uncaught \00"
@_cstr_literal_1941 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @181, i32 0, i32 0)
@182 = private unnamed_addr constant [4 x i8] c"\0A  \00"
@_cstr_literal_1943 = constant i8* getelementptr inbounds ([4 x i8], [4 x i8]* @182, i32 0, i32 0)
@183 = private unnamed_addr constant [14 x i8] c": thrown here\00"
@_cstr_literal_1945 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @183, i32 0, i32 0)
@184 = private unnamed_addr constant [16 x i8] c": uncaught here\00"
@_cstr_literal_1947 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @184, i32 0, i32 0)
@185 = private unnamed_addr constant [23 x i8] c"bad cast from string '\00"
@_cstr_literal_1951 = constant i8* getelementptr inbounds ([23 x i8], [23 x i8]* @185, i32 0, i32 0)
@186 = private unnamed_addr constant [6 x i8] c"false\00"
@_cstr_literal_1963 = constant i8* getelementptr inbounds ([6 x i8], [6 x i8]* @186, i32 0, i32 0)
@187 = private unnamed_addr constant [35 x i8] c"bad cast from empty string to bool\00"
@_cstr_literal_1965 = constant i8* getelementptr inbounds ([35 x i8], [35 x i8]* @187, i32 0, i32 0)
@188 = private unnamed_addr constant [10 x i8] c"' to bool\00"
@_cstr_literal_1967 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @188, i32 0, i32 0)
@189 = private unnamed_addr constant [10 x i8] c"' to int(\00"
@_cstr_literal_1975 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @189, i32 0, i32 0)
@190 = private unnamed_addr constant [11 x i8] c"' to uint(\00"
@_cstr_literal_1979 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @190, i32 0, i32 0)
@191 = private unnamed_addr constant [16 x i8] c"array(BEFORE):\0A\00"
@_cstr_literal_2064 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @191, i32 0, i32 0)
@192 = private unnamed_addr constant [15 x i8] c"array(AFTER):\0A\00"
@_cstr_literal_2066 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @192, i32 0, i32 0)
@193 = private unnamed_addr constant [39 x i8] c"Operation attempted on an invalid file\00"
@_cstr_literal_2254 = constant i8* getelementptr inbounds ([39 x i8], [39 x i8]* @193, i32 0, i32 0)
@194 = private unnamed_addr constant [13 x i8] c"in file.path\00"
@_cstr_literal_2272 = constant i8* getelementptr inbounds ([13 x i8], [13 x i8]* @194, i32 0, i32 0)
@195 = private unnamed_addr constant [8 x i8] c"unknown\00"
@_cstr_literal_2275 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @195, i32 0, i32 0)
@196 = private unnamed_addr constant [10 x i8] c"in openfd\00"
@_cstr_literal_2349 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @196, i32 0, i32 0)
@197 = private unnamed_addr constant [10 x i8] c"in openfp\00"
@_cstr_literal_2353 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @197, i32 0, i32 0)
@198 = private unnamed_addr constant [42 x i8] c"Operation attempted on an invalid channel\00"
@_cstr_literal_2379 = constant i8* getelementptr inbounds ([42 x i8], [42 x i8]* @198, i32 0, i32 0)
@199 = private unnamed_addr constant [8 x i8] c"in lock\00"
@_cstr_literal_2382 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @199, i32 0, i32 0)
@200 = private unnamed_addr constant [15 x i8] c"in file.reader\00"
@_cstr_literal_2418 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @200, i32 0, i32 0)
@201 = private unnamed_addr constant [15 x i8] c"in file.writer\00"
@_cstr_literal_2429 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @201, i32 0, i32 0)
@202 = private unnamed_addr constant [24 x i8] c"in channel.writeBytes()\00"
@_cstr_literal_2467 = constant i8* getelementptr inbounds ([24 x i8], [24 x i8]* @202, i32 0, i32 0)
@203 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_2473 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @203, i32 0, i32 0)
@204 = private unnamed_addr constant [2 x i8] c"b\00"
@_cstr_literal_2476 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @204, i32 0, i32 0)
@205 = private unnamed_addr constant [2 x i8] c"c\00"
@_cstr_literal_2478 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @205, i32 0, i32 0)
@206 = private unnamed_addr constant [2 x i8] c"d\00"
@_cstr_literal_2480 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @206, i32 0, i32 0)
@207 = private unnamed_addr constant [2 x i8] c"e\00"
@_cstr_literal_2482 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @207, i32 0, i32 0)
@208 = private unnamed_addr constant [2 x i8] c"f\00"
@_cstr_literal_2484 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @208, i32 0, i32 0)
@209 = private unnamed_addr constant [18 x i8] c"in channel.write(\00"
@_cstr_literal_2529 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @209, i32 0, i32 0)
@210 = private unnamed_addr constant [1 x i8] zeroinitializer
@_cstr_literal_2531 = constant i8* getelementptr inbounds ([1 x i8], [1 x i8]* @210, i32 0, i32 0)
@211 = private unnamed_addr constant [12 x i8] c" with path \00"
@_cstr_literal_2723 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @211, i32 0, i32 0)
@212 = private unnamed_addr constant [9 x i8] c" offset \00"
@_cstr_literal_2725 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @212, i32 0, i32 0)
@213 = private unnamed_addr constant [30 x i8] c"enumerated type out of bounds\00"
@_cstr_literal_2966 = constant i8* getelementptr inbounds ([30 x i8], [30 x i8]* @213, i32 0, i32 0)
@214 = private unnamed_addr constant [38 x i8] c"bad cast from empty string to int(64)\00"
@_cstr_literal_3170 = constant i8* getelementptr inbounds ([38 x i8], [38 x i8]* @214, i32 0, i32 0)
@215 = private unnamed_addr constant [53 x i8] c"unmanaged BaseArrOverRectangularDom(1,int(64),false)\00"
@_cstr_literal_3196 = constant i8* getelementptr inbounds ([53 x i8], [53 x i8]* @215, i32 0, i32 0)
@216 = private unnamed_addr constant [39 x i8] c"bad cast from empty string to uint(64)\00"
@_cstr_literal_3217 = constant i8* getelementptr inbounds ([39 x i8], [39 x i8]* @216, i32 0, i32 0)
@217 = private unnamed_addr constant [35 x i8] c"[domain(2,int(64),false)] real(64)\00"
@_cstr_literal_3227 = constant i8* getelementptr inbounds ([35 x i8], [35 x i8]* @217, i32 0, i32 0)
@218 = private unnamed_addr constant [10 x i8] c"ioNewline\00"
@_cstr_literal_3229 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @218, i32 0, i32 0)
@219 = private unnamed_addr constant [53 x i8] c"unmanaged BaseArrOverRectangularDom(2,int(64),false)\00"
@_cstr_literal_3255 = constant i8* getelementptr inbounds ([53 x i8], [53 x i8]* @219, i32 0, i32 0)
@220 = private unnamed_addr constant [11 x i8] c"ChapelBase\00"
@_cstr_literal_3317 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @220, i32 0, i32 0)
@221 = private unnamed_addr constant [15 x i8] c"ChapelStandard\00"
@_cstr_literal_3318 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @221, i32 0, i32 0)
@222 = private unnamed_addr constant [21 x i8] c"PrintModuleInitOrder\00"
@_cstr_literal_3319 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @222, i32 0, i32 0)
@223 = private unnamed_addr constant [23 x i8] c"Initializing Modules:\0A\00"
@_cstr_literal_282 = constant i8* getelementptr inbounds ([23 x i8], [23 x i8]* @223, i32 0, i32 0)
@224 = private unnamed_addr constant [5 x i8] c"CPtr\00"
@_cstr_literal_3320 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @224, i32 0, i32 0)
@225 = private unnamed_addr constant [8 x i8] c"CString\00"
@_cstr_literal_3321 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @225, i32 0, i32 0)
@226 = private unnamed_addr constant [7 x i8] c"String\00"
@_cstr_literal_3322 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @226, i32 0, i32 0)
@227 = private unnamed_addr constant [67 x i8] c"these -- Attempt to iterate over a range with ambiguous alignment.\00"
@_cstr_literal_785 = constant i8* getelementptr inbounds ([67 x i8], [67 x i8]* @227, i32 0, i32 0)
@228 = private unnamed_addr constant [17 x i8] c"ChapelDebugPrint\00"
@_cstr_literal_3323 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @228, i32 0, i32 0)
@229 = private unnamed_addr constant [15 x i8] c"MemConsistency\00"
@_cstr_literal_3324 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @229, i32 0, i32 0)
@230 = private unnamed_addr constant [8 x i8] c"Atomics\00"
@_cstr_literal_3325 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @230, i32 0, i32 0)
@231 = private unnamed_addr constant [14 x i8] c"ChapelThreads\00"
@_cstr_literal_3326 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @231, i32 0, i32 0)
@232 = private unnamed_addr constant [12 x i8] c"ChapelTuple\00"
@_cstr_literal_3327 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @232, i32 0, i32 0)
@233 = private unnamed_addr constant [12 x i8] c"ChapelRange\00"
@_cstr_literal_3328 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @233, i32 0, i32 0)
@234 = private unnamed_addr constant [16 x i8] c"AlignedTSupport\00"
@_cstr_literal_3329 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @234, i32 0, i32 0)
@235 = private unnamed_addr constant [19 x i8] c"ChapelTaskDataHelp\00"
@_cstr_literal_3330 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @235, i32 0, i32 0)
@236 = private unnamed_addr constant [13 x i8] c"ChapelLocale\00"
@_cstr_literal_3305 = constant i8* getelementptr inbounds ([13 x i8], [13 x i8]* @236, i32 0, i32 0)
@237 = private unnamed_addr constant [19 x i8] c"DefaultRectangular\00"
@_cstr_literal_3306 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @237, i32 0, i32 0)
@238 = private unnamed_addr constant [13 x i8] c"LocalesArray\00"
@_cstr_literal_3307 = constant i8* getelementptr inbounds ([13 x i8], [13 x i8]* @238, i32 0, i32 0)
@239 = private unnamed_addr constant [12 x i8] c"ChapelArray\00"
@_cstr_literal_3308 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @239, i32 0, i32 0)
@240 = private unnamed_addr constant [19 x i8] c"ChapelDistribution\00"
@_cstr_literal_3309 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @240, i32 0, i32 0)
@241 = private unnamed_addr constant [9 x i8] c"ChapelIO\00"
@_cstr_literal_3331 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @241, i32 0, i32 0)
@242 = private unnamed_addr constant [11 x i8] c"LocaleTree\00"
@_cstr_literal_3310 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @242, i32 0, i32 0)
@243 = private unnamed_addr constant [19 x i8] c"DefaultAssociative\00"
@_cstr_literal_3332 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @243, i32 0, i32 0)
@244 = private unnamed_addr constant [14 x i8] c"ExternalArray\00"
@_cstr_literal_3311 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @244, i32 0, i32 0)
@245 = private unnamed_addr constant [16 x i8] c"ChapelTaskTable\00"
@_cstr_literal_3333 = constant i8* getelementptr inbounds ([16 x i8], [16 x i8]* @245, i32 0, i32 0)
@246 = private unnamed_addr constant [12 x i8] c"MemTracking\00"
@_cstr_literal_3312 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @246, i32 0, i32 0)
@247 = private unnamed_addr constant [11 x i8] c"ChapelUtil\00"
@_cstr_literal_3334 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @247, i32 0, i32 0)
@248 = private unnamed_addr constant [12 x i8] c"ChapelError\00"
@_cstr_literal_3335 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @248, i32 0, i32 0)
@249 = private unnamed_addr constant [18 x i8] c"ChapelDynDispHack\00"
@_cstr_literal_3336 = constant i8* getelementptr inbounds ([18 x i8], [18 x i8]* @249, i32 0, i32 0)
@250 = private unnamed_addr constant [15 x i8] c"ChapelTaskData\00"
@_cstr_literal_3337 = constant i8* getelementptr inbounds ([15 x i8], [15 x i8]* @250, i32 0, i32 0)
@251 = private unnamed_addr constant [12 x i8] c"StringCasts\00"
@_cstr_literal_3338 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @251, i32 0, i32 0)
@252 = private unnamed_addr constant [20 x i8] c"LocaleModelHelpFlat\00"
@_cstr_literal_3339 = constant i8* getelementptr inbounds ([20 x i8], [20 x i8]* @252, i32 0, i32 0)
@253 = private unnamed_addr constant [19 x i8] c"LocaleModelHelpMem\00"
@_cstr_literal_3340 = constant i8* getelementptr inbounds ([19 x i8], [19 x i8]* @253, i32 0, i32 0)
@254 = private unnamed_addr constant [21 x i8] c"LocaleModelHelpSetup\00"
@_cstr_literal_3341 = constant i8* getelementptr inbounds ([21 x i8], [21 x i8]* @254, i32 0, i32 0)
@255 = private unnamed_addr constant [23 x i8] c"LocaleModelHelpRuntime\00"
@_cstr_literal_3342 = constant i8* getelementptr inbounds ([23 x i8], [23 x i8]* @255, i32 0, i32 0)
@256 = private unnamed_addr constant [17 x i8] c"ChapelNumLocales\00"
@_cstr_literal_3343 = constant i8* getelementptr inbounds ([17 x i8], [17 x i8]* @256, i32 0, i32 0)
@257 = private unnamed_addr constant [22 x i8] c"matrix_multiplication\00"
@_cstr_literal_3344 = constant i8* getelementptr inbounds ([22 x i8], [22 x i8]* @257, i32 0, i32 0)
@258 = private unnamed_addr constant [7 x i8] c"Assert\00"
@_cstr_literal_3345 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @258, i32 0, i32 0)
@259 = private unnamed_addr constant [14 x i8] c"assert failed\00"
@_cstr_literal_41 = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @259, i32 0, i32 0)
@260 = private unnamed_addr constant [10 x i8] c"SysCTypes\00"
@_cstr_literal_3346 = constant i8* getelementptr inbounds ([10 x i8], [10 x i8]* @260, i32 0, i32 0)
@261 = private unnamed_addr constant [8 x i8] c"DSIUtil\00"
@_cstr_literal_3347 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @261, i32 0, i32 0)
@262 = private unnamed_addr constant [5 x i8] c"Sort\00"
@_cstr_literal_3313 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @262, i32 0, i32 0)
@263 = private unnamed_addr constant [5 x i8] c"List\00"
@_cstr_literal_3348 = constant i8* getelementptr inbounds ([5 x i8], [5 x i8]* @263, i32 0, i32 0)
@264 = private unnamed_addr constant [9 x i8] c"SysBasic\00"
@_cstr_literal_3349 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @264, i32 0, i32 0)
@265 = private unnamed_addr constant [12 x i8] c"FormattedIO\00"
@_cstr_literal_3350 = constant i8* getelementptr inbounds ([12 x i8], [12 x i8]* @265, i32 0, i32 0)
@266 = private unnamed_addr constant [3 x i8] c"IO\00"
@_cstr_literal_3314 = constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @266, i32 0, i32 0)
@267 = private unnamed_addr constant [11 x i8] c"RangeChunk\00"
@_cstr_literal_3351 = constant i8* getelementptr inbounds ([11 x i8], [11 x i8]* @267, i32 0, i32 0)
@268 = private unnamed_addr constant [4 x i8] c"Sys\00"
@_cstr_literal_3352 = constant i8* getelementptr inbounds ([4 x i8], [4 x i8]* @268, i32 0, i32 0)
@269 = private unnamed_addr constant [9 x i8] c"SysError\00"
@_cstr_literal_3353 = constant i8* getelementptr inbounds ([9 x i8], [9 x i8]* @269, i32 0, i32 0)
@270 = private unnamed_addr constant [8 x i8] c"<error>\00"
@_cstr_literal_2721 = constant i8* getelementptr inbounds ([8 x i8], [8 x i8]* @270, i32 0, i32 0)
@271 = private unnamed_addr constant [7 x i8] c"Regexp\00"
@_cstr_literal_3354 = constant i8* getelementptr inbounds ([7 x i8], [7 x i8]* @271, i32 0, i32 0)
@.str = private unnamed_addr constant [24 x i8] c"dest != src || num == 0\00", align 1
@.str.1 = private unnamed_addr constant [88 x i8] c"/scratch/siddhart/gsoc2018/chapel-install//lib/chapel/1.18/runtime/include/./chpl-mem.h\00", align 1
@__PRETTY_FUNCTION__.chpl_memcpy = private unnamed_addr constant [48 x i8] c"void *chpl_memcpy(void *, const void *, size_t)\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"data && data->bundle\00", align 1
@.str.3 = private unnamed_addr constant [108 x i8] c"/scratch/siddhart/gsoc2018/chapel-install//lib/chapel/1.18/runtime/include/tasks/qthreads/chpl-tasks-impl.h\00", align 1
@__PRETTY_FUNCTION__.chpl_task_getPrvBundle = private unnamed_addr constant [49 x i8] c"chpl_task_bundle_t *chpl_task_getPrvBundle(void)\00", align 1
@chpl_qthread_done_initializing = external global i32, align 4
@chpl_qthread_comm_pthread = external global i64, align 8
@chpl_qthread_comm_task_tls = external global %struct.chpl_qthread_tls_s, align 8
@chpl_qthread_process_pthread = external global i64, align 8
@chpl_qthread_process_tls = external global %struct.chpl_qthread_tls_s, align 8
@.str.4 = private unnamed_addr constant [4 x i8] c"tls\00", align 1
@__PRETTY_FUNCTION__.chpl_qthread_get_tasklocal = private unnamed_addr constant [53 x i8] c"chpl_qthread_tls_t *chpl_qthread_get_tasklocal(void)\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"*s!=((void*)0)\00", align 1
@__PRETTY_FUNCTION__.chpl_rt_free_c_string = private unnamed_addr constant [57 x i8] c"void chpl_rt_free_c_string(c_string *, int32_t, int32_t)\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"ch != ((void*)0)\00", align 1
@.str.7 = private unnamed_addr constant [87 x i8] c"/scratch/siddhart/gsoc2018/chapel-install//lib/chapel/1.18/runtime/include/./qio/qio.h\00", align 1
@__PRETTY_FUNCTION__.qio_channel_lock = private unnamed_addr constant [41 x i8] c"qioerr qio_channel_lock(qio_channel_t *)\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@stderr = external global %struct._IO_FILE*, align 8
@str = private unnamed_addr constant [22 x i8] c"Initializing Modules:\00"

define internal void @chplDummyFunction() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__init_AlignedTSupport(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_AlignedTSupport_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @234, i64 0, i64 0), i64 15, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_AlignedTSupport_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_Atomics(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_Atomics_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @230, i64 0, i64 0), i64 7, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_Atomics_p, align 1, !tbaa !8
  tail call void @chpl__init_MemConsistency(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @atomic_fence(i32 %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @atomic_thread_fence(i32 %arg)
  %tmp = trunc i64 %arg1 to i32
  tail call void @chpl_rmem_consist_fence(i32 %arg, i32 %tmp, i32 %arg2)
  ret void
}

define internal void @init(%atomicbool* nonnull %arg, i8 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomicbool, %atomicbool* %arg, i64 0, i32 0
  store i8 %arg1, i8* %tmp, align 1, !tbaa !10
  ret void
}

define internal void @init2(%atomic_uint64* nonnull %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomic_uint64, %atomic_uint64* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !13
  ret void
}

define internal void @init3(%atomic_int64* nonnull %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomic_int64, %atomic_int64* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !16
  ret void
}

define internal void @chpl__init_CPtr(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_CPtr_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @224, i64 0, i64 0), i64 4, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_CPtr_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_CString(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_CString_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @225, i64 0, i64 0), i64 7, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_CString_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_ChapelArray() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__init_ChapelArray(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca i64, align 8
  %tmp2 = alloca %atomic_uint64, align 8
  %tmp3 = alloca i64, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load i8, i8* @chpl__init_ChapelArray_p, align 1, !tbaa !2
  %tmp5 = icmp eq i8 %tmp4, 0
  br i1 %tmp5, label %bb6, label %bb15

bb6:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @239, i64 0, i64 0), i64 11, i64 %arg, i32 %arg1)
  %tmp7 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp8 = add i32 %tmp7, 1
  store i32 %tmp8, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelArray_p, align 1, !tbaa !8
  tail call void @chpl__init_ChapelBase(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelTuple(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelLocale(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Sort(i64 %arg, i32 %arg1)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @239, i64 0, i64 0), i8* bitcast (void ()* @chpl__deinit_ChapelArray to i8*), i64 %arg, i32 %arg1)
  call void @atomic_init_int_least64_t(i64* nonnull %tmp, i64 0)
  %tmp9 = load i64, i64* %tmp, align 8, !tbaa !19
  call void @init3(%atomic_int64* @numPrivateObjects, i64 %tmp9)
  call void @atomic_init_uint_least64_t(i64* nonnull %tmp3, i64 0)
  %tmp10 = load i64, i64* %tmp3, align 8, !tbaa !20
  call void @init2(%atomic_uint64* %tmp2, i64 %tmp10)
  %tmp11 = getelementptr inbounds %atomic_uint64, %atomic_uint64* %tmp2, i64 0, i32 0
  %tmp12 = load i64, i64* %tmp11, align 8
  store i64 %tmp12, i64* getelementptr inbounds (%atomic_uint64, %atomic_uint64* @chpl___OpaqueIndexNext, i64 0, i32 0), align 8
  %tmp13 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp14 = add i32 %tmp13, -1
  store i32 %tmp14, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb15

bb15:                                             ; preds = %.split, %bb6
  ret void
}

define internal void @_newArray(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg1) {
bb:
  %tmp = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init9(%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp, i64 -1, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i8 0)
  %tmp2 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp2, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg1, align 8
  ret void
}

define internal void @_newArray2(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg1) {
bb:
  %tmp = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init7(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp, i64 -1, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i8 0)
  %tmp2 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp2, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg1, align 8
  ret void
}

define internal void @_newArray3(%ARRTY* %arg, %ARRTY2* nonnull %arg1) {
bb:
  %tmp = alloca %ARRTY2, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init8(%ARRTY2* %tmp, i64 -1, %ARRTY* %arg, i8 0)
  %tmp2 = load %ARRTY2, %ARRTY2* %tmp, align 8
  store %ARRTY2 %tmp2, %ARRTY2* %arg1, align 8
  ret void
}

define internal void @_newDomain(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init5(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 -1, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i8 0)
  %tmp2 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp2, %_domain_DefaultRectangularDom_2_int64_t_F* %arg1, align 8
  ret void
}

define internal void @_newDomain2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init6(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 -1, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i8 0)
  %tmp2 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp2, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, align 8
  ret void
}

define internal void @_getDomain(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init6(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 -1, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i8 1)
  %tmp2 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp2, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, align 8
  ret void
}

define internal void @_getDomain2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init5(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 -1, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i8 1)
  %tmp2 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp2, %_domain_DefaultRectangularDom_2_int64_t_F* %arg1, align 8
  ret void
}

define internal void @_newDistribution(%chpl_DefaultDist_object* %arg, %_distribution_DefaultDist* nonnull %arg1) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init4(%_distribution_DefaultDist* %tmp, i64 -1, %chpl_DefaultDist_object* %arg, i8 0)
  %tmp2 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp, align 8
  store %_distribution_DefaultDist %tmp2, %_distribution_DefaultDist* %arg1, align 8
  ret void
}

define internal void @_getDistribution(%chpl_DefaultDist_object* %arg, %_distribution_DefaultDist* nonnull %arg1) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init4(%_distribution_DefaultDist* %tmp, i64 -1, %chpl_DefaultDist_object* %arg, i8 1)
  %tmp2 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp, align 8
  store %_distribution_DefaultDist %tmp2, %_distribution_DefaultDist* %arg1, align 8
  ret void
}

define internal %chpl___RuntimeTypeInfo @chpl__buildDomainRuntimeType(%_distribution_DefaultDist* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, align 8
  %tmp1 = insertvalue %chpl___RuntimeTypeInfo undef, %_distribution_DefaultDist %tmp, 0
  ret %chpl___RuntimeTypeInfo %tmp1
}

define internal %chpl___RuntimeTypeInfo2 @chpl__buildDomainRuntimeType2(%_distribution_DefaultDist* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, align 8
  %tmp1 = insertvalue %chpl___RuntimeTypeInfo2 undef, %_distribution_DefaultDist %tmp, 0
  ret %chpl___RuntimeTypeInfo2 %tmp1
}

define internal void @chpl__convertRuntimeTypeToValue(%_distribution_DefaultDist* nonnull %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call %chpl_DefaultRectangularDom_1_int64_t_F_object* @newRectangularDom4(%_distribution_DefaultDist* %arg, i64 %arg2, i32 %arg3)
  call void @_newDomain2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp4, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp5 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp5, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, align 8
  ret void
}

define internal void @chpl__convertRuntimeTypeToValue2(%_distribution_DefaultDist* nonnull %arg, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call %chpl_DefaultRectangularDom_2_int64_t_F_object* @newRectangularDom3(%_distribution_DefaultDist* %arg, i64 %arg2, i32 %arg3)
  call void @_newDomain(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp4, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp)
  %tmp5 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp5, %_domain_DefaultRectangularDom_2_int64_t_F* %arg1, align 8
  ret void
}

define internal %chpl___RuntimeTypeInfo2 @chpl__convertValueToRuntimeType(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  %tmp3 = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @dist2(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, %_distribution_DefaultDist* %tmp3)
  %tmp4 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp3, align 8
  store %_distribution_DefaultDist %tmp4, %_distribution_DefaultDist* %tmp, align 8
  %tmp5 = call %chpl___RuntimeTypeInfo2 @chpl__buildDomainRuntimeType2(%_distribution_DefaultDist* %tmp)
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp, i64 %arg1, i32 %arg2)
  ret %chpl___RuntimeTypeInfo2 %tmp5
}

define internal %chpl___RuntimeTypeInfo @chpl__convertValueToRuntimeType2(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  %tmp3 = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @dist(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, %_distribution_DefaultDist* %tmp3)
  %tmp4 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp3, align 8
  store %_distribution_DefaultDist %tmp4, %_distribution_DefaultDist* %tmp, align 8
  %tmp5 = call %chpl___RuntimeTypeInfo @chpl__buildDomainRuntimeType(%_distribution_DefaultDist* %tmp)
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp, i64 %arg1, i32 %arg2)
  ret %chpl___RuntimeTypeInfo %tmp5
}

define internal %chpl___RuntimeTypeInfo3 @chpl__buildArrayRuntimeType(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, align 8
  %tmp1 = insertvalue %chpl___RuntimeTypeInfo3 undef, %_domain_DefaultRectangularDom_2_int64_t_F %tmp, 0
  ret %chpl___RuntimeTypeInfo3 %tmp1
}

define internal %chpl___RuntimeTypeInfo4 @chpl__buildArrayRuntimeType2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, align 8
  %tmp1 = insertvalue %chpl___RuntimeTypeInfo4 undef, %_domain_DefaultRectangularDom_1_int64_t_F %tmp, 0
  ret %chpl___RuntimeTypeInfo4 %tmp1
}

define internal %chpl___RuntimeTypeInfo5 @chpl__buildArrayRuntimeType3(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, align 8
  %tmp1 = insertvalue %chpl___RuntimeTypeInfo5 undef, %_domain_DefaultRectangularDom_1_int64_t_F %tmp, 0
  ret %chpl___RuntimeTypeInfo5 %tmp1
}

define internal void @chpl__convertRuntimeTypeToValue3(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, %ARRTY2* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %ARRTY2, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @buildArray2(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, %ARRTY2* %tmp, i64 %arg2, i32 %arg3)
  %tmp4 = load %ARRTY2, %ARRTY2* %tmp, align 8
  store %ARRTY2 %tmp4, %ARRTY2* %arg1, align 8
  ret void
}

define internal void @chpl__convertRuntimeTypeToValue4(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @buildArray3(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp, i64 %arg2, i32 %arg3)
  %tmp4 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp4, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg1, align 8
  ret void
}

define internal void @chpl__convertRuntimeTypeToValue5(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @buildArray(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp, i64 %arg2, i32 %arg3)
  %tmp4 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp4, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg1, align 8
  ret void
}

define internal %chpl___RuntimeTypeInfo3 @chpl__convertValueToRuntimeType3(%ARRTY2* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp3 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @_dom2(%ARRTY2* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp3)
  %tmp4 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp3, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp4, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  %tmp5 = call %chpl___RuntimeTypeInfo3 @chpl__buildArrayRuntimeType(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp)
  call void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 %arg1, i32 %arg2)
  ret %chpl___RuntimeTypeInfo3 %tmp5
}

define internal void @chpl_incRefCountsForDomainsInArrayEltTypes(%chpl_BaseArr_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl_incRefCountsForDomainsInArrayEltTypes2(%chpl_BaseArr_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl_incRefCountsForDomainsInArrayEltTypes3(%chpl_BaseArr_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl_decRefCountsForDomainsInArrayEltTypes(%chpl_BaseArr_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl_decRefCountsForDomainsInArrayEltTypes2(%chpl_BaseArr_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl_decRefCountsForDomainsInArrayEltTypes3(%chpl_BaseArr_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__buildDomainExpr(%range_int64_t_bounded_F %arg, %range_int64_t_bounded_F %arg7, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg8, i64 %arg9, i32 %arg10) {
bb:
  %tmp = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp11 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp12 = alloca %_distribution_DefaultDist, align 8
  %tmp13 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %.repack3 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 0
  %.elt4 = extractvalue %range_int64_t_bounded_F %arg7, 0
  store i64 %.elt4, i64* %.repack3, align 8
  %.repack5 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  %.elt6 = extractvalue %range_int64_t_bounded_F %arg7, 1
  store i64 %.elt6, i64* %.repack5, align 8
  %tmp14 = tail call %chpl___RuntimeTypeInfo @chpl__buildDomainRuntimeType(%_distribution_DefaultDist* @defaultDist)
  %tmp15 = extractvalue %chpl___RuntimeTypeInfo %tmp14, 0
  store %_distribution_DefaultDist %tmp15, %_distribution_DefaultDist* %tmp12, align 8
  call void @chpl__convertRuntimeTypeToValue2(%_distribution_DefaultDist* %tmp12, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp13, i64 %arg9, i32 %arg10)
  %tmp16 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp13, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp16, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, align 8
  call void @setIndices(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, [2 x %range_int64_t_bounded_F]* %tmp)
  %tmp17 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp17, %_domain_DefaultRectangularDom_2_int64_t_F* %arg8, align 8
  ret void
}

define internal void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp6 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp7 = alloca %_distribution_DefaultDist, align 8
  %tmp8 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp9 = tail call %chpl___RuntimeTypeInfo2 @chpl__buildDomainRuntimeType2(%_distribution_DefaultDist* @defaultDist)
  %tmp10 = extractvalue %chpl___RuntimeTypeInfo2 %tmp9, 0
  store %_distribution_DefaultDist %tmp10, %_distribution_DefaultDist* %tmp7, align 8
  call void @chpl__convertRuntimeTypeToValue(%_distribution_DefaultDist* %tmp7, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, i64 %arg4, i32 %arg5)
  %tmp11 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp11, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  call void @setIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, [1 x %range_int64_t_bounded_F]* %tmp)
  %tmp12 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp12, %_domain_DefaultRectangularDom_1_int64_t_F* %arg3, align 8
  ret void
}

define internal %_domain_DefaultRectangularDom_1_int64_t_F* @chpl__ensureDomainExpr(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret %_domain_DefaultRectangularDom_1_int64_t_F* %arg
}

define internal void @chpl__ensureDomainExpr2(%range_int64_t_bounded_F %arg, %range_int64_t_bounded_F %arg1, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @chpl__buildDomainExpr(%range_int64_t_bounded_F %arg, %range_int64_t_bounded_F %arg1, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 %arg3, i32 %arg4)
  %tmp5 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp5, %_domain_DefaultRectangularDom_2_int64_t_F* %arg2, align 8
  ret void
}

define internal void @chpl__ensureDomainExpr3(%range_int64_t_bounded_F %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %arg, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg2, i32 %arg3)
  %tmp4 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp4, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, align 8
  ret void
}

define internal void @chpl__buildDistValue(%chpl_DefaultDist_object* %arg, %_distribution_DefaultDist* nonnull %arg1) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @_newDistribution(%chpl_DefaultDist_object* %arg, %_distribution_DefaultDist* %tmp)
  %tmp2 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp, align 8
  store %_distribution_DefaultDist %tmp2, %_distribution_DefaultDist* %arg1, align 8
  ret void
}

define internal void @init4(%_distribution_DefaultDist* nonnull %arg, i64 %arg1, %chpl_DefaultDist_object* %arg2, i8 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !21
  %tmp4 = getelementptr inbounds %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, i64 0, i32 1
  store %chpl_DefaultDist_object* %arg2, %chpl_DefaultDist_object** %tmp4, align 8, !tbaa !28
  %tmp5 = getelementptr inbounds %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, i64 0, i32 2
  store i8 %arg3, i8* %tmp5, align 1, !tbaa !29
  ret void
}

define internal void @deinit(%_distribution_DefaultDist* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @clone2(%_distribution_DefaultDist* nonnull %arg, %_distribution_DefaultDist* nonnull %arg1) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = getelementptr inbounds %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp2, align 8, !tbaa !28
  %tmp4 = tail call %chpl_DefaultDist_object* @dsiClone(%chpl_DefaultDist_object* %tmp3)
  call void @_newDistribution(%chpl_DefaultDist_object* %tmp4, %_distribution_DefaultDist* %tmp)
  %tmp5 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp, align 8
  store %_distribution_DefaultDist %tmp5, %_distribution_DefaultDist* %arg1, align 8
  ret void
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @newRectangularDom(%_distribution_DefaultDist* nonnull %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, i64 0, i32 1
  %tmp4 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp, align 8, !tbaa !28
  %tmp5 = tail call %chpl_DefaultRectangularDom_1_int64_t_F_object* @dsiNewRectangularDom(%chpl_DefaultDist_object* %tmp4, [1 x %range_int64_t_bounded_F]* %arg1, i64 %arg2, i32 %arg3)
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp5
}

define internal %chpl_DefaultRectangularDom_2_int64_t_F_object* @newRectangularDom2(%_distribution_DefaultDist* nonnull %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_distribution_DefaultDist, %_distribution_DefaultDist* %arg, i64 0, i32 1
  %tmp4 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp, align 8, !tbaa !28
  %tmp5 = tail call %chpl_DefaultRectangularDom_2_int64_t_F_object* @dsiNewRectangularDom2(%chpl_DefaultDist_object* %tmp4, [2 x %range_int64_t_bounded_F]* %arg1, i64 %arg2, i32 %arg3)
  ret %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp5
}

define internal %chpl_DefaultRectangularDom_2_int64_t_F_object* @newRectangularDom3(%_distribution_DefaultDist* nonnull %arg, i64 %arg14, i32 %arg15) {
bb:
  %tmp = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp16 = alloca %range_int64_t_bounded_F, align 8
  %tmp17 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init22(%range_int64_t_bounded_F* %tmp16, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp16, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp16, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp17, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp17, i64 0, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp17, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack8 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack8, align 8
  %.repack10 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 0
  store i64 %.unpack4, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  store i64 %.unpack6, i64* %.repack12, align 8
  %tmp18 = call %chpl_DefaultRectangularDom_2_int64_t_F_object* @newRectangularDom2(%_distribution_DefaultDist* %arg, [2 x %range_int64_t_bounded_F]* %tmp, i64 %arg14, i32 %arg15)
  ret %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp18
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @newRectangularDom4(%_distribution_DefaultDist* nonnull %arg, i64 %arg6, i32 %arg7) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp8 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init22(%range_int64_t_bounded_F* %tmp8, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp8, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp8, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp9 = call %chpl_DefaultRectangularDom_1_int64_t_F_object* @newRectangularDom(%_distribution_DefaultDist* %arg, [1 x %range_int64_t_bounded_F]* %tmp, i64 %arg6, i32 %arg7)
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp9
}

define internal void @init5(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, i64 %arg1, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg2, i8 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !30
  %tmp4 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg2, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp4, align 8, !tbaa !35
  %tmp5 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 2
  store i8 %arg3, i8* %tmp5, align 1, !tbaa !36
  ret void
}

define internal void @init6(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, i64 %arg1, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg2, i8 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !37
  %tmp4 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg2, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp4, align 8, !tbaa !41
  %tmp5 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 2
  store i8 %arg3, i8* %tmp5, align 1, !tbaa !42
  ret void
}

define internal void @_do_destroy(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_tuple_2_BaseDom_BaseDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 2
  %tmp4 = load i8, i8* %tmp3, align 1, !tbaa !42
  %tmp5 = icmp eq i8 %tmp4, 0
  br i1 %tmp5, label %bb6, label %bb23

bb6:                                              ; preds = %.split
  %tmp7 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp8 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp7, align 8, !tbaa !41
  %tmp9 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, i64 0, i32 0, i32 0
  call void @remove3(%chpl_BaseDom_object* %tmp9, %_tuple_2_BaseDom_BaseDist* %tmp, i64 %arg1, i32 %arg2)
  %tmp10 = bitcast %_tuple_2_BaseDom_BaseDist* %tmp to %chpl_object_object**
  %tmp11 = load %chpl_object_object*, %chpl_object_object** %tmp10, align 8, !tbaa !43
  %tmp12 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp, i64 0, i32 1
  %tmp13 = load %chpl_BaseDist_object*, %chpl_BaseDist_object** %tmp12, align 8, !tbaa !45
  %tmp14 = icmp eq %chpl_BaseDist_object* %tmp13, null
  br i1 %tmp14, label %bb17, label %bb15

bb15:                                             ; preds = %bb6
  %tmp16 = call %chpl_BaseDist_object* @remove2(%chpl_BaseDist_object* nonnull %tmp13, i64 %arg1, i32 %arg2)
  br label %bb17

bb17:                                             ; preds = %bb15, %bb6
  %.0 = phi %chpl_BaseDist_object* [ %tmp16, %bb15 ], [ null, %bb6 ]
  %tmp18 = icmp eq %chpl_object_object* %tmp11, null
  br i1 %tmp18, label %bb20, label %bb19

bb19:                                             ; preds = %bb17
  call void @_delete_dom(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, i64 %arg1, i32 %arg2)
  br label %bb20

bb20:                                             ; preds = %bb19, %bb17
  %tmp21 = icmp eq %chpl_BaseDist_object* %.0, null
  br i1 %tmp21, label %bb23, label %bb22

bb22:                                             ; preds = %bb20
  call void @_delete_dist(%chpl_BaseDist_object* nonnull %.0, i64 %arg1, i32 %arg2)
  br label %bb23

bb23:                                             ; preds = %bb22, %bb20, %.split
  ret void
}

define internal void @_do_destroy2(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_tuple_2_BaseDom_BaseDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 2
  %tmp4 = load i8, i8* %tmp3, align 1, !tbaa !36
  %tmp5 = icmp eq i8 %tmp4, 0
  br i1 %tmp5, label %bb6, label %bb23

bb6:                                              ; preds = %.split
  %tmp7 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp8 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp7, align 8, !tbaa !35
  %tmp9 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp8, i64 0, i32 0, i32 0
  call void @remove3(%chpl_BaseDom_object* %tmp9, %_tuple_2_BaseDom_BaseDist* %tmp, i64 %arg1, i32 %arg2)
  %tmp10 = bitcast %_tuple_2_BaseDom_BaseDist* %tmp to %chpl_object_object**
  %tmp11 = load %chpl_object_object*, %chpl_object_object** %tmp10, align 8, !tbaa !43
  %tmp12 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp, i64 0, i32 1
  %tmp13 = load %chpl_BaseDist_object*, %chpl_BaseDist_object** %tmp12, align 8, !tbaa !45
  %tmp14 = icmp eq %chpl_BaseDist_object* %tmp13, null
  br i1 %tmp14, label %bb17, label %bb15

bb15:                                             ; preds = %bb6
  %tmp16 = call %chpl_BaseDist_object* @remove2(%chpl_BaseDist_object* nonnull %tmp13, i64 %arg1, i32 %arg2)
  br label %bb17

bb17:                                             ; preds = %bb15, %bb6
  %.0 = phi %chpl_BaseDist_object* [ %tmp16, %bb15 ], [ null, %bb6 ]
  %tmp18 = icmp eq %chpl_object_object* %tmp11, null
  br i1 %tmp18, label %bb20, label %bb19

bb19:                                             ; preds = %bb17
  call void @_delete_dom2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp8, i64 %arg1, i32 %arg2)
  br label %bb20

bb20:                                             ; preds = %bb19, %bb17
  %tmp21 = icmp eq %chpl_BaseDist_object* %.0, null
  br i1 %tmp21, label %bb23, label %bb22

bb22:                                             ; preds = %bb20
  call void @_delete_dist(%chpl_BaseDist_object* nonnull %.0, i64 %arg1, i32 %arg2)
  br label %bb23

bb23:                                             ; preds = %bb22, %bb20, %.split
  ret void
}

define internal void @deinit2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @_do_destroy(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit3(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @_do_destroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @dist(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, %_distribution_DefaultDist* nonnull %arg1) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp2, align 8, !tbaa !35
  %tmp4 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp3, i64 0, i32 1
  %tmp5 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp4, align 8, !tbaa !46
  call void @_getDistribution(%chpl_DefaultDist_object* %tmp5, %_distribution_DefaultDist* %tmp)
  %tmp6 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp, align 8
  store %_distribution_DefaultDist %tmp6, %_distribution_DefaultDist* %arg1, align 8
  ret void
}

define internal void @dist2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %_distribution_DefaultDist* nonnull %arg1) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp2, align 8, !tbaa !41
  %tmp4 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp3, i64 0, i32 1
  %tmp5 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp4, align 8, !tbaa !54
  call void @_getDistribution(%chpl_DefaultDist_object* %tmp5, %_distribution_DefaultDist* %tmp)
  %tmp6 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp, align 8
  store %_distribution_DefaultDist %tmp6, %_distribution_DefaultDist* %arg1, align 8
  ret void
}

define internal void @this2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %range_int64_t_bounded_F %arg18, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg19, i64 %arg20, i32 %arg21) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp22 = alloca %range_int64_t_bounded_F, align 8
  %tmp23 = alloca %range_int64_t_bounded_F, align 8
  %tmp24 = alloca %range_int64_t_bounded_F, align 8
  %tmp25 = alloca %_distribution_DefaultDist, align 8
  %tmp26 = alloca %_distribution_DefaultDist, align 8
  %tmp27 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init22(%range_int64_t_bounded_F* %tmp22, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp28 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp29 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp28, align 8, !tbaa !41
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp29, %range_int64_t_bounded_F* %tmp23)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp23, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp30 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp23, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp31 = insertvalue %range_int64_t_bounded_F %tmp30, i64 %.unpack9, 1
  call void @this4(%range_int64_t_bounded_F %tmp31, %range_int64_t_bounded_F %arg18, %range_int64_t_bounded_F* %tmp24)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack14 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack11, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack13, i64* %.repack16, align 8
  call void @dist2(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, %_distribution_DefaultDist* %tmp26)
  %tmp32 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp26, align 8
  store %_distribution_DefaultDist %tmp32, %_distribution_DefaultDist* %tmp25, align 8
  %tmp33 = call %chpl_DefaultRectangularDom_1_int64_t_F_object* @newRectangularDom(%_distribution_DefaultDist* %tmp25, [1 x %range_int64_t_bounded_F]* %tmp, i64 %arg20, i32 %arg21)
  call void @_newDomain2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp33, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp27)
  %tmp34 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp27, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp34, %_domain_DefaultRectangularDom_1_int64_t_F* %arg19, align 8
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp25, i64 %arg20, i32 %arg21)
  ret void
}

define internal void @this3(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, %range_int64_t_bounded_F %arg38, %range_int64_t_bounded_F %arg39, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg40, i64 %arg41, i32 %arg42) {
bb:
  %tmp = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp43 = alloca %range_int64_t_bounded_F, align 8
  %tmp44 = alloca %range_int64_t_bounded_F, align 8
  %tmp45 = alloca %range_int64_t_bounded_F, align 8
  %tmp46 = alloca %range_int64_t_bounded_F, align 8
  %tmp47 = alloca %range_int64_t_bounded_F, align 8
  %tmp48 = alloca %range_int64_t_bounded_F, align 8
  %tmp49 = alloca %_distribution_DefaultDist, align 8
  %tmp50 = alloca %_distribution_DefaultDist, align 8
  %tmp51 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init22(%range_int64_t_bounded_F* %tmp43, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp43, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp43, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp44, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack8 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack8, align 8
  %tmp52 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1
  %.repack10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 0
  store i64 %.unpack4, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  store i64 %.unpack6, i64* %.repack12, align 8
  %tmp53 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp54 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp53, align 8, !tbaa !35
  call void @dsiDim2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp54, %range_int64_t_bounded_F* %tmp45)
  %.elt14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp45, i64 0, i32 0
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp55 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack15, 0
  %.elt16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp45, i64 0, i32 1
  %.unpack17 = load i64, i64* %.elt16, align 8
  %tmp56 = insertvalue %range_int64_t_bounded_F %tmp55, i64 %.unpack17, 1
  call void @this4(%range_int64_t_bounded_F %tmp56, %range_int64_t_bounded_F %arg38, %range_int64_t_bounded_F* %tmp46)
  %.elt18 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp46, i64 0, i32 0
  %.unpack19 = load i64, i64* %.elt18, align 8
  %.elt20 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp46, i64 0, i32 1
  %.unpack21 = load i64, i64* %.elt20, align 8
  %.repack22 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack24, align 8
  %tmp57 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp53, align 8, !tbaa !35
  call void @dsiDim4(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp57, %range_int64_t_bounded_F* %tmp47)
  %.elt26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp47, i64 0, i32 0
  %.unpack27 = load i64, i64* %.elt26, align 8
  %tmp58 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack27, 0
  %.elt28 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp47, i64 0, i32 1
  %.unpack29 = load i64, i64* %.elt28, align 8
  %tmp59 = insertvalue %range_int64_t_bounded_F %tmp58, i64 %.unpack29, 1
  call void @this4(%range_int64_t_bounded_F %tmp59, %range_int64_t_bounded_F %arg39, %range_int64_t_bounded_F* %tmp48)
  %.elt30 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp48, i64 0, i32 0
  %.unpack31 = load i64, i64* %.elt30, align 8
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp48, i64 0, i32 1
  %.unpack33 = load i64, i64* %.elt32, align 8
  %.repack34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 0
  store i64 %.unpack31, i64* %.repack34, align 8
  %.repack36 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  store i64 %.unpack33, i64* %.repack36, align 8
  call void @dist(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, %_distribution_DefaultDist* %tmp50)
  %tmp60 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp50, align 8
  store %_distribution_DefaultDist %tmp60, %_distribution_DefaultDist* %tmp49, align 8
  %tmp61 = call %chpl_DefaultRectangularDom_2_int64_t_F_object* @newRectangularDom2(%_distribution_DefaultDist* %tmp49, [2 x %range_int64_t_bounded_F]* %tmp, i64 %arg41, i32 %arg42)
  call void @_newDomain(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp61, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp51)
  %tmp62 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp51, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp62, %_domain_DefaultRectangularDom_2_int64_t_F* %arg40, align 8
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp49, i64 %arg41, i32 %arg42)
  ret void
}

define internal void @buildArray(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* null, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp, align 8
  %tmp4 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  %tmp5 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !41
  %tmp7 = tail call %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* @dsiBuildArray(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp6, i64 %arg2, i32 %arg3)
  store %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp7, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp, align 8, !tbaa !58
  call void @help2(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp, i64 %arg2, i32 %arg3)
  %tmp8 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp to %chpl_BaseArr_object**
  %tmp9 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp8, align 8, !tbaa !58
  call void @chpl_incRefCountsForDomainsInArrayEltTypes2(%chpl_BaseArr_object* %tmp9)
  %tmp10 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp, align 8, !tbaa !58
  call void @_newArray2(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp10, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp4)
  %tmp11 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp4, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp11, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg1, align 8
  ret void
}

define internal void @buildArray2(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, %ARRTY2* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %ARRTY*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %ARRTY* null, %ARRTY** %tmp, align 8
  %tmp4 = alloca %ARRTY2, align 8
  %tmp5 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp5, align 8, !tbaa !35
  %tmp7 = tail call %ARRTY* @dsiBuildArray2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp6, i64 %arg2, i32 %arg3)
  store %ARRTY* %tmp7, %ARRTY** %tmp, align 8, !tbaa !63
  call void @help(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, %ARRTY** %tmp, i64 %arg2, i32 %arg3)
  %tmp8 = bitcast %ARRTY** %tmp to %chpl_BaseArr_object**
  %tmp9 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp8, align 8, !tbaa !63
  call void @chpl_incRefCountsForDomainsInArrayEltTypes(%chpl_BaseArr_object* %tmp9)
  %tmp10 = load %ARRTY*, %ARRTY** %tmp, align 8, !tbaa !63
  call void @_newArray3(%ARRTY* %tmp10, %ARRTY2* %tmp4)
  %tmp11 = load %ARRTY2, %ARRTY2* %tmp4, align 8
  store %ARRTY2 %tmp11, %ARRTY2* %arg1, align 8
  ret void
}

define internal void @buildArray3(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* null, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp, align 8
  %tmp4 = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  %tmp5 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !41
  %tmp7 = tail call %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* @dsiBuildArray3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp6, i64 %arg2, i32 %arg3)
  store %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp7, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp, align 8, !tbaa !67
  call void @help3(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp, i64 %arg2, i32 %arg3)
  %tmp8 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp to %chpl_BaseArr_object**
  %tmp9 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp8, align 8, !tbaa !67
  call void @chpl_incRefCountsForDomainsInArrayEltTypes3(%chpl_BaseArr_object* %tmp9)
  %tmp10 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp, align 8, !tbaa !67
  call void @_newArray(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp10, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp4)
  %tmp11 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp4, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp11, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg1, align 8
  ret void
}

define internal void @help(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, %ARRTY** nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp4 = bitcast %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp to %chpl_BaseDom_object**
  %tmp5 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp4, align 8, !tbaa !35
  %tmp6 = bitcast %ARRTY** %arg1 to %chpl_BaseArr_object**
  %tmp7 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp6, align 8, !tbaa !63
  %tmp8 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp5, i64 0, i32 3, i32 0
  %tmp9 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp8, i1 true, i32 5)
  br i1 %tmp9, label %.lr.ph, label %bb12

.lr.ph:                                           ; preds = %.split
  br label %bb10

bb10:                                             ; preds = %.lr.ph, %bb10
  tail call void @chpl_task_yield()
  %tmp11 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp8, i1 true, i32 5)
  br i1 %tmp11, label %bb10, label %._crit_edge

._crit_edge:                                      ; preds = %bb10
  br label %bb12

bb12:                                             ; preds = %._crit_edge, %.split
  %tmp13 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp5, i64 0, i32 1
  tail call void @append_chpl(%list_BaseArr_chpl* %tmp13, %chpl_BaseArr_object* %tmp7, i64 %arg2, i32 %arg3)
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp8, i1 false, i32 5)
  ret void
}

define internal void @help2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp4 = bitcast %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp to %chpl_BaseDom_object**
  %tmp5 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp4, align 8, !tbaa !41
  %tmp6 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %arg1 to %chpl_BaseArr_object**
  %tmp7 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp6, align 8, !tbaa !58
  %tmp8 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp5, i64 0, i32 3, i32 0
  %tmp9 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp8, i1 true, i32 5)
  br i1 %tmp9, label %.lr.ph, label %bb12

.lr.ph:                                           ; preds = %.split
  br label %bb10

bb10:                                             ; preds = %.lr.ph, %bb10
  tail call void @chpl_task_yield()
  %tmp11 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp8, i1 true, i32 5)
  br i1 %tmp11, label %bb10, label %._crit_edge

._crit_edge:                                      ; preds = %bb10
  br label %bb12

bb12:                                             ; preds = %._crit_edge, %.split
  %tmp13 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp5, i64 0, i32 1
  tail call void @append_chpl(%list_BaseArr_chpl* %tmp13, %chpl_BaseArr_object* %tmp7, i64 %arg2, i32 %arg3)
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp8, i1 false, i32 5)
  ret void
}

define internal void @help3(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp4 = bitcast %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp to %chpl_BaseDom_object**
  %tmp5 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp4, align 8, !tbaa !41
  %tmp6 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %arg1 to %chpl_BaseArr_object**
  %tmp7 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp6, align 8, !tbaa !67
  %tmp8 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp5, i64 0, i32 3, i32 0
  %tmp9 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp8, i1 true, i32 5)
  br i1 %tmp9, label %.lr.ph, label %bb12

.lr.ph:                                           ; preds = %.split
  br label %bb10

bb10:                                             ; preds = %.lr.ph, %bb10
  tail call void @chpl_task_yield()
  %tmp11 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp8, i1 true, i32 5)
  br i1 %tmp11, label %bb10, label %._crit_edge

._crit_edge:                                      ; preds = %bb10
  br label %bb12

bb12:                                             ; preds = %._crit_edge, %.split
  %tmp13 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp5, i64 0, i32 1
  tail call void @append_chpl(%list_BaseArr_chpl* %tmp13, %chpl_BaseArr_object* %tmp7, i64 %arg2, i32 %arg3)
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp8, i1 false, i32 5)
  ret void
}

define internal i64 @numIndices(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp1 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp, align 8, !tbaa !35
  %tmp2 = tail call i64 @dsiNumIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp1)
  ret i64 %tmp2
}

define internal i64 @numIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp1 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !41
  %tmp2 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp1)
  ret i64 %tmp2
}

define internal void @setIndices(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp2 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp, align 8, !tbaa !35
  tail call void @dsiSetIndices(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp2, [2 x %range_int64_t_bounded_F]* %arg1)
  ret void
}

define internal void @setIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp2 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !41
  tail call void @dsiSetIndices2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp2, [1 x %range_int64_t_bounded_F]* %arg1)
  ret void
}

define internal void @getIndices(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg14) {
bb:
  %tmp = alloca [2 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp15 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 0, i32 1
  %tmp16 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp15, align 8, !tbaa !35
  call void @dsiGetIndices(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp16, [2 x %range_int64_t_bounded_F]* %tmp)
  %.elt = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack8 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack8, align 8
  %.repack10 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 1, i32 0
  store i64 %.unpack4, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 1, i32 1
  store i64 %.unpack6, i64* %.repack12, align 8
  ret void
}

define internal void @getIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg6) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp7 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp8 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp7, align 8, !tbaa !41
  call void @dsiGetIndices2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, [1 x %range_int64_t_bounded_F]* %tmp)
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg6, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg6, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @init7(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg, i64 %arg1, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg2, i8 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !70
  %tmp4 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg2, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp4, align 8, !tbaa !72
  %tmp5 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 0, i32 2
  store i8 %arg3, i8* %tmp5, align 1, !tbaa !73
  ret void
}

define internal void @init8(%ARRTY2* nonnull %arg, i64 %arg1, %ARRTY* %arg2, i8 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !74
  %tmp4 = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 1
  store %ARRTY* %arg2, %ARRTY** %tmp4, align 8, !tbaa !76
  %tmp5 = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 2
  store i8 %arg3, i8* %tmp5, align 1, !tbaa !77
  ret void
}

define internal void @init9(%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg, i64 %arg1, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg2, i8 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !78
  %tmp4 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg2, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp4, align 8, !tbaa !80
  %tmp5 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg, i64 0, i32 2
  store i8 %arg3, i8* %tmp5, align 1, !tbaa !81
  ret void
}

define internal void @deinit4(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %_tuple_2_BaseArr_BaseDom, align 8
  %tmp5 = alloca %_tuple_2_BaseDom_BaseDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 0, i32 2
  %tmp7 = load i8, i8* %tmp6, align 1, !tbaa !73
  %tmp8 = icmp eq i8 %tmp7, 0
  br i1 %tmp8, label %bb9, label %bb40

bb9:                                              ; preds = %.split
  %tmp10 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 0, i32 1
  %tmp11 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp10 to %chpl_BaseArr_object**
  %tmp12 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp11, align 8, !tbaa !72
  call void @remove4(%chpl_BaseArr_object* %tmp12, %_tuple_2_BaseArr_BaseDom* %tmp, i64 %arg3, i32 %arg4)
  %tmp13 = bitcast %_tuple_2_BaseArr_BaseDom* %tmp to %chpl_object_object**
  %tmp14 = load %chpl_object_object*, %chpl_object_object** %tmp13, align 8, !tbaa !82
  %tmp15 = getelementptr inbounds %_tuple_2_BaseArr_BaseDom, %_tuple_2_BaseArr_BaseDom* %tmp, i64 0, i32 1
  %tmp16 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp15, align 8, !tbaa !84
  %tmp17 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp10, align 8, !tbaa !72
  %tmp18 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp17, i64 0, i32 1
  %tmp19 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp18, align 8, !tbaa !85
  %tmp20 = icmp eq %chpl_BaseDom_object* %tmp16, null
  br i1 %tmp20, label %bb26, label %bb21

bb21:                                             ; preds = %bb9
  call void @remove3(%chpl_BaseDom_object* nonnull %tmp16, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 %arg3, i32 %arg4)
  %tmp22 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 0, i32 1
  %tmp23 = load %chpl_BaseDist_object*, %chpl_BaseDist_object** %tmp22, align 8, !tbaa !45
  %tmp24 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 0, i32 0
  %tmp25 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp24, align 8, !tbaa !43
  br label %bb26

bb26:                                             ; preds = %bb21, %bb9
  %.01 = phi %chpl_BaseDist_object* [ %tmp23, %bb21 ], [ null, %bb9 ]
  %.0 = phi %chpl_BaseDom_object* [ %tmp25, %bb21 ], [ null, %bb9 ]
  %tmp27 = icmp eq %chpl_BaseDist_object* %.01, null
  br i1 %tmp27, label %bb30, label %bb28

bb28:                                             ; preds = %bb26
  %tmp29 = call %chpl_BaseDist_object* @remove2(%chpl_BaseDist_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb30

bb30:                                             ; preds = %bb28, %bb26
  %.02 = phi %chpl_BaseDist_object* [ %tmp29, %bb28 ], [ null, %bb26 ]
  %tmp31 = icmp eq %chpl_object_object* %tmp14, null
  br i1 %tmp31, label %bb34, label %bb32

bb32:                                             ; preds = %bb30
  %tmp33 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp10, align 8, !tbaa !72
  call void @_delete_arr(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp33, i64 %arg3, i32 %arg4)
  br label %bb34

bb34:                                             ; preds = %bb32, %bb30
  %tmp35 = icmp eq %chpl_BaseDom_object* %.0, null
  br i1 %tmp35, label %bb37, label %bb36

bb36:                                             ; preds = %bb34
  call void @_delete_dom(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp19, i64 %arg3, i32 %arg4)
  br label %bb37

bb37:                                             ; preds = %bb36, %bb34
  %tmp38 = icmp eq %chpl_BaseDist_object* %.02, null
  br i1 %tmp38, label %bb40, label %bb39

bb39:                                             ; preds = %bb37
  call void @_delete_dist(%chpl_BaseDist_object* nonnull %.02, i64 %arg3, i32 %arg4)
  br label %bb40

bb40:                                             ; preds = %bb39, %bb37, %.split
  ret void
}

define internal void @deinit5(%ARRTY2* nonnull %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %_tuple_2_BaseArr_BaseDom, align 8
  %tmp5 = alloca %_tuple_2_BaseDom_BaseDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 2
  %tmp7 = load i8, i8* %tmp6, align 1, !tbaa !77
  %tmp8 = icmp eq i8 %tmp7, 0
  br i1 %tmp8, label %bb9, label %bb40

bb9:                                              ; preds = %.split
  %tmp10 = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 1
  %tmp11 = bitcast %ARRTY** %tmp10 to %chpl_BaseArr_object**
  %tmp12 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp11, align 8, !tbaa !76
  call void @remove4(%chpl_BaseArr_object* %tmp12, %_tuple_2_BaseArr_BaseDom* %tmp, i64 %arg3, i32 %arg4)
  %tmp13 = bitcast %_tuple_2_BaseArr_BaseDom* %tmp to %chpl_object_object**
  %tmp14 = load %chpl_object_object*, %chpl_object_object** %tmp13, align 8, !tbaa !82
  %tmp15 = getelementptr inbounds %_tuple_2_BaseArr_BaseDom, %_tuple_2_BaseArr_BaseDom* %tmp, i64 0, i32 1
  %tmp16 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp15, align 8, !tbaa !84
  %tmp17 = load %ARRTY*, %ARRTY** %tmp10, align 8, !tbaa !76
  %tmp18 = getelementptr inbounds %ARRTY, %ARRTY* %tmp17, i64 0, i32 1
  %tmp19 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp18, align 8, !tbaa !93
  %tmp20 = icmp eq %chpl_BaseDom_object* %tmp16, null
  br i1 %tmp20, label %bb26, label %bb21

bb21:                                             ; preds = %bb9
  call void @remove3(%chpl_BaseDom_object* nonnull %tmp16, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 %arg3, i32 %arg4)
  %tmp22 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 0, i32 1
  %tmp23 = load %chpl_BaseDist_object*, %chpl_BaseDist_object** %tmp22, align 8, !tbaa !45
  %tmp24 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 0, i32 0
  %tmp25 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp24, align 8, !tbaa !43
  br label %bb26

bb26:                                             ; preds = %bb21, %bb9
  %.01 = phi %chpl_BaseDist_object* [ %tmp23, %bb21 ], [ null, %bb9 ]
  %.0 = phi %chpl_BaseDom_object* [ %tmp25, %bb21 ], [ null, %bb9 ]
  %tmp27 = icmp eq %chpl_BaseDist_object* %.01, null
  br i1 %tmp27, label %bb30, label %bb28

bb28:                                             ; preds = %bb26
  %tmp29 = call %chpl_BaseDist_object* @remove2(%chpl_BaseDist_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb30

bb30:                                             ; preds = %bb28, %bb26
  %.02 = phi %chpl_BaseDist_object* [ %tmp29, %bb28 ], [ null, %bb26 ]
  %tmp31 = icmp eq %chpl_object_object* %tmp14, null
  br i1 %tmp31, label %bb34, label %bb32

bb32:                                             ; preds = %bb30
  %tmp33 = load %ARRTY*, %ARRTY** %tmp10, align 8, !tbaa !76
  call void @_delete_arr2(%ARRTY* %tmp33, i64 %arg3, i32 %arg4)
  br label %bb34

bb34:                                             ; preds = %bb32, %bb30
  %tmp35 = icmp eq %chpl_BaseDom_object* %.0, null
  br i1 %tmp35, label %bb37, label %bb36

bb36:                                             ; preds = %bb34
  call void @_delete_dom2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp19, i64 %arg3, i32 %arg4)
  br label %bb37

bb37:                                             ; preds = %bb36, %bb34
  %tmp38 = icmp eq %chpl_BaseDist_object* %.02, null
  br i1 %tmp38, label %bb40, label %bb39

bb39:                                             ; preds = %bb37
  call void @_delete_dist(%chpl_BaseDist_object* nonnull %.02, i64 %arg3, i32 %arg4)
  br label %bb40

bb40:                                             ; preds = %bb39, %bb37, %.split
  ret void
}

define internal void @deinit6(%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %_tuple_2_BaseArr_BaseDom, align 8
  %tmp5 = alloca %_tuple_2_BaseDom_BaseDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg, i64 0, i32 2
  %tmp7 = load i8, i8* %tmp6, align 1, !tbaa !81
  %tmp8 = icmp eq i8 %tmp7, 0
  br i1 %tmp8, label %bb9, label %bb40

bb9:                                              ; preds = %.split
  %tmp10 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg, i64 0, i32 1
  %tmp11 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp10 to %chpl_BaseArr_object**
  %tmp12 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp11, align 8, !tbaa !80
  call void @remove4(%chpl_BaseArr_object* %tmp12, %_tuple_2_BaseArr_BaseDom* %tmp, i64 %arg3, i32 %arg4)
  %tmp13 = bitcast %_tuple_2_BaseArr_BaseDom* %tmp to %chpl_object_object**
  %tmp14 = load %chpl_object_object*, %chpl_object_object** %tmp13, align 8, !tbaa !82
  %tmp15 = getelementptr inbounds %_tuple_2_BaseArr_BaseDom, %_tuple_2_BaseArr_BaseDom* %tmp, i64 0, i32 1
  %tmp16 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp15, align 8, !tbaa !84
  %tmp17 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp10, align 8, !tbaa !80
  %tmp18 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp17, i64 0, i32 1
  %tmp19 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp18, align 8, !tbaa !99
  %tmp20 = icmp eq %chpl_BaseDom_object* %tmp16, null
  br i1 %tmp20, label %bb26, label %bb21

bb21:                                             ; preds = %bb9
  call void @remove3(%chpl_BaseDom_object* nonnull %tmp16, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 %arg3, i32 %arg4)
  %tmp22 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 0, i32 1
  %tmp23 = load %chpl_BaseDist_object*, %chpl_BaseDist_object** %tmp22, align 8, !tbaa !45
  %tmp24 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %tmp5, i64 0, i32 0
  %tmp25 = load %chpl_BaseDom_object*, %chpl_BaseDom_object** %tmp24, align 8, !tbaa !43
  br label %bb26

bb26:                                             ; preds = %bb21, %bb9
  %.01 = phi %chpl_BaseDist_object* [ %tmp23, %bb21 ], [ null, %bb9 ]
  %.0 = phi %chpl_BaseDom_object* [ %tmp25, %bb21 ], [ null, %bb9 ]
  %tmp27 = icmp eq %chpl_BaseDist_object* %.01, null
  br i1 %tmp27, label %bb30, label %bb28

bb28:                                             ; preds = %bb26
  %tmp29 = call %chpl_BaseDist_object* @remove2(%chpl_BaseDist_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb30

bb30:                                             ; preds = %bb28, %bb26
  %.02 = phi %chpl_BaseDist_object* [ %tmp29, %bb28 ], [ null, %bb26 ]
  %tmp31 = icmp eq %chpl_object_object* %tmp14, null
  br i1 %tmp31, label %bb34, label %bb32

bb32:                                             ; preds = %bb30
  %tmp33 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp10, align 8, !tbaa !80
  call void @_delete_arr3(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp33, i64 %arg3, i32 %arg4)
  br label %bb34

bb34:                                             ; preds = %bb32, %bb30
  %tmp35 = icmp eq %chpl_BaseDom_object* %.0, null
  br i1 %tmp35, label %bb37, label %bb36

bb36:                                             ; preds = %bb34
  call void @_delete_dom(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp19, i64 %arg3, i32 %arg4)
  br label %bb37

bb37:                                             ; preds = %bb36, %bb34
  %tmp38 = icmp eq %chpl_BaseDist_object* %.02, null
  br i1 %tmp38, label %bb40, label %bb39

bb39:                                             ; preds = %bb37
  call void @_delete_dist(%chpl_BaseDist_object* nonnull %.02, i64 %arg3, i32 %arg4)
  br label %bb40

bb40:                                             ; preds = %bb39, %bb37, %.split
  ret void
}

define internal void @_dom(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp2, align 8, !tbaa !72
  %tmp4 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp3, i64 0, i32 1
  %tmp5 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp4, align 8, !tbaa !85
  call void @_getDomain(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp5, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp6 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp6, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, align 8
  ret void
}

define internal void @_dom2(%ARRTY2* nonnull %arg, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 1
  %tmp3 = load %ARRTY*, %ARRTY** %tmp2, align 8, !tbaa !76
  %tmp4 = getelementptr inbounds %ARRTY, %ARRTY* %tmp3, i64 0, i32 1
  %tmp5 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp4, align 8, !tbaa !93
  call void @_getDomain2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp5, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp)
  %tmp6 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp6, %_domain_DefaultRectangularDom_2_int64_t_F* %arg1, align 8
  ret void
}

define internal void @writeThis(%ARRTY2* nonnull %arg, %channel_T_dynamic_F_chpl* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 1
  %tmp4 = load %ARRTY*, %ARRTY** %tmp, align 8, !tbaa !76
  tail call void @dsiSerialWrite(%ARRTY* %tmp4, %channel_T_dynamic_F_chpl* %arg1, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @chpl___ASSIGN_(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 0, i32 1
  %tmp4 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !41
  tail call void @dsiAssignDomain(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp4, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, i8 0, i64 %arg2, i32 %arg3)
  ret void
}

define internal %_domain_DefaultRectangularDom_2_int64_t_F @chpl__initCopy(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp3 = alloca %_distribution_DefaultDist, align 8
  %tmp4 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = tail call %chpl___RuntimeTypeInfo @chpl__convertValueToRuntimeType2(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 %arg1, i32 %arg2)
  %tmp6 = extractvalue %chpl___RuntimeTypeInfo %tmp5, 0
  store %_distribution_DefaultDist %tmp6, %_distribution_DefaultDist* %tmp3, align 8
  call void @chpl__convertRuntimeTypeToValue2(%_distribution_DefaultDist* %tmp3, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp4, i64 %arg1, i32 %arg2)
  %tmp7 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp4, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp7, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  %tmp8 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 0, i32 1
  %tmp9 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp8, align 8, !tbaa !35
  call void @dsiAssignDomain2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp9, %_domain_DefaultRectangularDom_2_int64_t_F* %arg, i8 1, i64 %arg1, i32 %arg2)
  ret %_domain_DefaultRectangularDom_2_int64_t_F %tmp7
}

define internal %_domain_DefaultRectangularDom_1_int64_t_F @chpl__initCopy2(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp3 = alloca %_distribution_DefaultDist, align 8
  %tmp4 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = tail call %chpl___RuntimeTypeInfo2 @chpl__convertValueToRuntimeType(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 %arg1, i32 %arg2)
  %tmp6 = extractvalue %chpl___RuntimeTypeInfo2 %tmp5, 0
  store %_distribution_DefaultDist %tmp6, %_distribution_DefaultDist* %tmp3, align 8
  call void @chpl__convertRuntimeTypeToValue(%_distribution_DefaultDist* %tmp3, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, i64 %arg1, i32 %arg2)
  %tmp7 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp7, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp8 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 1
  %tmp9 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp8, align 8, !tbaa !41
  call void @dsiAssignDomain(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp9, %_domain_DefaultRectangularDom_1_int64_t_F* %arg, i8 1, i64 %arg1, i32 %arg2)
  ret %_domain_DefaultRectangularDom_1_int64_t_F %tmp7
}

define internal void @chpl__init_ChapelBase(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelBase_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb12

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @220, i64 0, i64 0), i64 10, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelBase_p, align 1, !tbaa !8
  store i64 0, i64* @chpl_arrayInitMethod, align 8, !tbaa !103
  %tmp6 = tail call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg, i32 %arg1)
  %tmp7 = bitcast i8* %tmp6 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  tail call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp7, i64 %arg, i32 %arg1)
  %tmp8 = tail call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg, i32 %arg1)
  %tmp9 = bitcast i8* %tmp8 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  tail call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp9, i64 %arg, i32 %arg1)
  store %chpl_chpl_ModuleDeinit_object* null, %chpl_chpl_ModuleDeinit_object** @chpl_moduleDeinitFuns, align 8, !tbaa !105
  %tmp10 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp11 = add i32 %tmp10, -1
  store i32 %tmp11, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb12

bb12:                                             ; preds = %.split, %bb3
  ret void
}

define internal i64 @_cast(i8 %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %string, %string* @_str_literal_2967, align 16
  store %string %tmp3, %string* %tmp, align 8
  %tmp4 = bitcast %string* %tmp to i8*
  %tmp5 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp4)
  switch i8 %arg, label %bb14 [
    i8 0, label %bb6
    i8 1, label %bb8
    i8 2, label %bb10
    i8 3, label %bb12
  ]

bb6:                                              ; preds = %.split
  %tmp7 = zext i8 %arg to i64
  br label %bb15

bb8:                                              ; preds = %.split
  %tmp9 = zext i8 %arg to i64
  br label %bb15

bb10:                                             ; preds = %.split
  %tmp11 = zext i8 %arg to i64
  br label %bb15

bb12:                                             ; preds = %.split
  %tmp13 = zext i8 %arg to i64
  br label %bb15

bb14:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  br label %bb15

bb15:                                             ; preds = %bb14, %bb12, %bb10, %bb8, %bb6
  %.0 = phi i64 [ %tmp7, %bb6 ], [ %tmp9, %bb8 ], [ %tmp11, %bb10 ], [ %tmp13, %bb12 ], [ undef, %bb14 ]
  ret i64 %.0
}

define internal void @init_elts(double* %arg, i64 %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %struct.chpl_localeID_t, align 8
  %tmp42 = alloca %range_int64_t_bounded_F, align 8
  %tmp43 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp44 = alloca %range_int64_t_bounded_F, align 8
  %tmp45 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8
  %tmp46 = alloca %chpl__class_localscoforall_fn3_object, align 8
  %tmp47 = load %string, %string* @_str_literal_180, align 16
  store %string %tmp47, %string* %tmp, align 8
  %tmp48 = icmp sgt i64 %arg38, 262144
  %.0 = select i1 %tmp48, i64 3, i64 2
  br i1 %tmp48, label %bb49, label %bb57

bb49:                                             ; preds = %.split
  %tmp50 = load %chpl_object_object*, %chpl_object_object** bitcast (%chpl_DummyLocale_object** @dummyLocale to %chpl_object_object**), align 8, !tbaa !107
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp51, i32 -2)
  %tmp53 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp41, i64 0, i32 0
  store i32 %tmp52, i32* %tmp53, align 8, !tbaa !110
  %tmp54 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp41, i64 %arg39, i32 %arg40)
  %tmp55 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp54, i64 0, i32 0
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp50
  %.2 = select i1 %tmp56, i64 2, i64 %.0
  br label %bb57

bb57:                                             ; preds = %bb49, %.split
  %.3 = phi i64 [ %.0, %.split ], [ %.2, %bb49 ]
  switch i64 %.3, label %bb115 [
    i64 2, label %bb58
    i64 3, label %bb63
  ]

bb58:                                             ; preds = %bb57
  %tmp59 = icmp sgt i64 %arg38, 0
  br i1 %tmp59, label %.preheader, label %bb116

.preheader:                                       ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %.preheader, %bb60
  %.03 = phi i64 [ %tmp62, %bb60 ], [ 0, %.preheader ]
  %tmp61 = getelementptr inbounds double, double* %arg, i64 %.03
  store double 0.000000e+00, double* %tmp61, align 8, !tbaa !111
  %tmp62 = add nuw nsw i64 %.03, 1
  %exitcond = icmp ne i64 %tmp62, %arg38
  br i1 %exitcond, label %bb60, label %.loopexit

bb63:                                             ; preds = %bb57
  %tmp64 = add nsw i64 %arg38, -1
  call void @chpl_build_bounded_range(i64 0, i64 %tmp64, %range_int64_t_bounded_F* %tmp42)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp65 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp66 = insertvalue %range_int64_t_bounded_F %tmp65, i64 %.unpack6, 1
  %tmp67 = call i64 @length(%range_int64_t_bounded_F %tmp66)
  %tmp68 = call i8 @chpl_task_getSerial()
  %tmp69 = icmp eq i8 %tmp68, 0
  br i1 %tmp69, label %bb70, label %bb72

bb70:                                             ; preds = %bb63
  %tmp71 = call i64 @_computeNumChunks_chpl3(i64 %tmp67, i64 %arg39, i32 %arg40)
  br label %bb72

bb72:                                             ; preds = %bb70, %bb63
  %.04 = phi i64 [ %tmp71, %bb70 ], [ 1, %bb63 ]
  %tmp73 = icmp slt i64 %.04, 2
  br i1 %tmp73, label %bb74, label %bb80

bb74:                                             ; preds = %bb72
  %tmp75 = icmp sgt i64 %.unpack, %.unpack6
  br i1 %tmp75, label %bb116, label %.preheader34

.preheader34:                                     ; preds = %bb74
  br label %bb76

bb76:                                             ; preds = %.preheader34, %bb76
  %.02 = phi i64 [ %tmp78, %bb76 ], [ %.unpack, %.preheader34 ]
  %tmp77 = getelementptr inbounds double, double* %arg, i64 %.02
  store double 0.000000e+00, double* %tmp77, align 8, !tbaa !111
  %tmp78 = add nsw i64 %.02, 1
  %tmp79 = icmp slt i64 %.02, %.unpack6
  br i1 %tmp79, label %bb76, label %.loopexit35

bb80:                                             ; preds = %bb72
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp43)
  %.elt7 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp81 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack8, 0
  %.elt9 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp82 = insertvalue %range_int64_t_boundedLow_F %tmp81, i64 %.unpack10, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp82, i64 %.04, %range_int64_t_bounded_F* %tmp44, i64 %arg39, i32 %arg40)
  %.elt11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 0
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp83 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack12, 0
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 1
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp84 = insertvalue %range_int64_t_bounded_F %tmp83, i64 %.unpack14, 1
  %tmp85 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg39, i32 %arg40)
  %tmp86 = bitcast i8* %tmp85 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %arg39, i32 %arg40)
  %tmp87 = call i64 @length(%range_int64_t_bounded_F %tmp84)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, i64 %arg39, i32 %arg40)
  %tmp88 = icmp sgt i64 %.unpack12, %.unpack14
  br i1 %tmp88, label %bb105, label %.preheader36

.preheader36:                                     ; preds = %bb80
  br label %bb89

bb89:                                             ; preds = %.preheader36, %bb89
  %.01 = phi i64 [ %tmp103, %bb89 ], [ %.unpack12, %.preheader36 ]
  %tmp90 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 1
  store i64 %tmp67, i64* %tmp90, align 8, !tbaa !113
  %tmp91 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 2
  store i64 %.04, i64* %tmp91, align 8, !tbaa !117
  %.repack22 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 3, i32 0
  store i64 %.unpack, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 3, i32 1
  store i64 %.unpack6, i64* %.repack24, align 8
  %tmp92 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 4
  store i64 %.01, i64* %tmp92, align 8, !tbaa !118
  %tmp93 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 5
  %tmp94 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp93 to i8**
  store i8* %tmp85, i8** %tmp94, align 8, !tbaa !119
  %tmp95 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 6
  store double* %arg, double** %tmp95, align 8, !tbaa !120
  %tmp96 = getelementptr inbounds i8, i8* %tmp85, i64 24
  %tmp97 = bitcast i8* %tmp96 to i8**
  %tmp98 = load i32, i32* @chpl_nodeID, align 4
  %tmp99 = sext i32 %tmp98 to i64
  %tmp100 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 7
  store i64 %arg39, i64* %tmp100, align 8, !tbaa !121
  %tmp101 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 8
  store i32 %arg40, i32* %tmp101, align 8, !tbaa !122
  %tmp102 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %tmp46, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 4, %struct.chpl_task_bundle_t* nonnull %tmp102, i64 144, i8** %tmp97, i64 %tmp99, i64 793, i32 2)
  %tmp103 = add nsw i64 %.01, 1
  %tmp104 = icmp slt i64 %.01, %.unpack14
  br i1 %tmp104, label %bb89, label %.loopexit37

.loopexit37:                                      ; preds = %bb89
  br label %bb105

bb105:                                            ; preds = %.loopexit37, %bb80
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, %chpl_Error_object** %tmp45, i64 %arg39, i32 %arg40)
  %tmp106 = load %chpl_Error_object*, %chpl_Error_object** %tmp45, align 8, !tbaa !125
  %tmp107 = icmp eq %chpl_Error_object* %tmp106, null
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb105
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp106, i64 %arg39, i32 %arg40)
  br label %bb109

bb109:                                            ; preds = %bb108, %bb105
  %tmp110 = icmp eq i8* %tmp85, null
  br i1 %tmp110, label %bb116, label %bb111

bb111:                                            ; preds = %bb109
  %tmp112 = getelementptr inbounds i8, i8* %tmp85, i64 32
  %tmp113 = bitcast i8* %tmp112 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp113)
  %tmp114 = getelementptr inbounds i8, i8* %tmp85, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp114)
  call void @chpl_here_free(i8* nonnull %tmp85, i64 %arg39, i32 %arg40)
  br label %bb116

bb115:                                            ; preds = %bb57
  call void @halt(%string* %tmp, i64 %arg39, i32 %arg40)
  br label %bb116

.loopexit:                                        ; preds = %bb60
  br label %bb116

.loopexit35:                                      ; preds = %bb76
  br label %bb116

bb116:                                            ; preds = %.loopexit35, %.loopexit, %bb115, %bb111, %bb109, %bb74, %bb58
  ret void
}

define internal void @init_elts2(i64* %arg, i64 %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %struct.chpl_localeID_t, align 8
  %tmp42 = alloca %range_int64_t_bounded_F, align 8
  %tmp43 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp44 = alloca %range_int64_t_bounded_F, align 8
  %tmp45 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8
  %tmp46 = alloca %chpl__class_localscoforall_fn5_object, align 8
  %tmp47 = load %string, %string* @_str_literal_180, align 16
  store %string %tmp47, %string* %tmp, align 8
  %tmp48 = icmp sgt i64 %arg38, 262144
  %.0 = select i1 %tmp48, i64 3, i64 2
  br i1 %tmp48, label %bb49, label %bb57

bb49:                                             ; preds = %.split
  %tmp50 = load %chpl_object_object*, %chpl_object_object** bitcast (%chpl_DummyLocale_object** @dummyLocale to %chpl_object_object**), align 8, !tbaa !107
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp51, i32 -2)
  %tmp53 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp41, i64 0, i32 0
  store i32 %tmp52, i32* %tmp53, align 8, !tbaa !110
  %tmp54 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp41, i64 %arg39, i32 %arg40)
  %tmp55 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp54, i64 0, i32 0
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp50
  %.2 = select i1 %tmp56, i64 2, i64 %.0
  br label %bb57

bb57:                                             ; preds = %bb49, %.split
  %.3 = phi i64 [ %.0, %.split ], [ %.2, %bb49 ]
  switch i64 %.3, label %bb115 [
    i64 2, label %bb58
    i64 3, label %bb63
  ]

bb58:                                             ; preds = %bb57
  %tmp59 = icmp sgt i64 %arg38, 0
  br i1 %tmp59, label %.preheader, label %bb116

.preheader:                                       ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %.preheader, %bb60
  %.03 = phi i64 [ %tmp62, %bb60 ], [ 0, %.preheader ]
  %tmp61 = getelementptr inbounds i64, i64* %arg, i64 %.03
  store i64 0, i64* %tmp61, align 8, !tbaa !127
  %tmp62 = add nuw nsw i64 %.03, 1
  %exitcond = icmp ne i64 %tmp62, %arg38
  br i1 %exitcond, label %bb60, label %.loopexit

bb63:                                             ; preds = %bb57
  %tmp64 = add nsw i64 %arg38, -1
  call void @chpl_build_bounded_range(i64 0, i64 %tmp64, %range_int64_t_bounded_F* %tmp42)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp65 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp66 = insertvalue %range_int64_t_bounded_F %tmp65, i64 %.unpack6, 1
  %tmp67 = call i64 @length(%range_int64_t_bounded_F %tmp66)
  %tmp68 = call i8 @chpl_task_getSerial()
  %tmp69 = icmp eq i8 %tmp68, 0
  br i1 %tmp69, label %bb70, label %bb72

bb70:                                             ; preds = %bb63
  %tmp71 = call i64 @_computeNumChunks_chpl3(i64 %tmp67, i64 %arg39, i32 %arg40)
  br label %bb72

bb72:                                             ; preds = %bb70, %bb63
  %.04 = phi i64 [ %tmp71, %bb70 ], [ 1, %bb63 ]
  %tmp73 = icmp slt i64 %.04, 2
  br i1 %tmp73, label %bb74, label %bb80

bb74:                                             ; preds = %bb72
  %tmp75 = icmp sgt i64 %.unpack, %.unpack6
  br i1 %tmp75, label %bb116, label %.preheader34

.preheader34:                                     ; preds = %bb74
  br label %bb76

bb76:                                             ; preds = %.preheader34, %bb76
  %.02 = phi i64 [ %tmp78, %bb76 ], [ %.unpack, %.preheader34 ]
  %tmp77 = getelementptr inbounds i64, i64* %arg, i64 %.02
  store i64 0, i64* %tmp77, align 8, !tbaa !127
  %tmp78 = add nsw i64 %.02, 1
  %tmp79 = icmp slt i64 %.02, %.unpack6
  br i1 %tmp79, label %bb76, label %.loopexit35

bb80:                                             ; preds = %bb72
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp43)
  %.elt7 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp81 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack8, 0
  %.elt9 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp82 = insertvalue %range_int64_t_boundedLow_F %tmp81, i64 %.unpack10, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp82, i64 %.04, %range_int64_t_bounded_F* %tmp44, i64 %arg39, i32 %arg40)
  %.elt11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 0
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp83 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack12, 0
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 1
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp84 = insertvalue %range_int64_t_bounded_F %tmp83, i64 %.unpack14, 1
  %tmp85 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg39, i32 %arg40)
  %tmp86 = bitcast i8* %tmp85 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %arg39, i32 %arg40)
  %tmp87 = call i64 @length(%range_int64_t_bounded_F %tmp84)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, i64 %arg39, i32 %arg40)
  %tmp88 = icmp sgt i64 %.unpack12, %.unpack14
  br i1 %tmp88, label %bb105, label %.preheader36

.preheader36:                                     ; preds = %bb80
  br label %bb89

bb89:                                             ; preds = %.preheader36, %bb89
  %.01 = phi i64 [ %tmp103, %bb89 ], [ %.unpack12, %.preheader36 ]
  %tmp90 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 1
  store i64 %tmp67, i64* %tmp90, align 8, !tbaa !129
  %tmp91 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 2
  store i64 %.04, i64* %tmp91, align 8, !tbaa !132
  %.repack22 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 3, i32 0
  store i64 %.unpack, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 3, i32 1
  store i64 %.unpack6, i64* %.repack24, align 8
  %tmp92 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 4
  store i64 %.01, i64* %tmp92, align 8, !tbaa !133
  %tmp93 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 5
  %tmp94 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp93 to i8**
  store i8* %tmp85, i8** %tmp94, align 8, !tbaa !134
  %tmp95 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 6
  store i64* %arg, i64** %tmp95, align 8, !tbaa !135
  %tmp96 = getelementptr inbounds i8, i8* %tmp85, i64 24
  %tmp97 = bitcast i8* %tmp96 to i8**
  %tmp98 = load i32, i32* @chpl_nodeID, align 4
  %tmp99 = sext i32 %tmp98 to i64
  %tmp100 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 7
  store i64 %arg39, i64* %tmp100, align 8, !tbaa !136
  %tmp101 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 8
  store i32 %arg40, i32* %tmp101, align 8, !tbaa !137
  %tmp102 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %tmp46, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 2, %struct.chpl_task_bundle_t* nonnull %tmp102, i64 144, i8** %tmp97, i64 %tmp99, i64 793, i32 2)
  %tmp103 = add nsw i64 %.01, 1
  %tmp104 = icmp slt i64 %.01, %.unpack14
  br i1 %tmp104, label %bb89, label %.loopexit37

.loopexit37:                                      ; preds = %bb89
  br label %bb105

bb105:                                            ; preds = %.loopexit37, %bb80
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, %chpl_Error_object** %tmp45, i64 %arg39, i32 %arg40)
  %tmp106 = load %chpl_Error_object*, %chpl_Error_object** %tmp45, align 8, !tbaa !125
  %tmp107 = icmp eq %chpl_Error_object* %tmp106, null
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb105
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp106, i64 %arg39, i32 %arg40)
  br label %bb109

bb109:                                            ; preds = %bb108, %bb105
  %tmp110 = icmp eq i8* %tmp85, null
  br i1 %tmp110, label %bb116, label %bb111

bb111:                                            ; preds = %bb109
  %tmp112 = getelementptr inbounds i8, i8* %tmp85, i64 32
  %tmp113 = bitcast i8* %tmp112 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp113)
  %tmp114 = getelementptr inbounds i8, i8* %tmp85, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp114)
  call void @chpl_here_free(i8* nonnull %tmp85, i64 %arg39, i32 %arg40)
  br label %bb116

bb115:                                            ; preds = %bb57
  call void @halt(%string* %tmp, i64 %arg39, i32 %arg40)
  br label %bb116

.loopexit:                                        ; preds = %bb60
  br label %bb116

.loopexit35:                                      ; preds = %bb76
  br label %bb116

bb116:                                            ; preds = %.loopexit35, %.loopexit, %bb115, %bb111, %bb109, %bb74, %bb58
  ret void
}

define internal void @init_elts3(i64* %arg, i64 %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %struct.chpl_localeID_t, align 8
  %tmp42 = alloca %range_int64_t_bounded_F, align 8
  %tmp43 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp44 = alloca %range_int64_t_bounded_F, align 8
  %tmp45 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8
  %tmp46 = alloca %chpl__class_localscoforall_fn4_object, align 8
  %tmp47 = load %string, %string* @_str_literal_180, align 16
  store %string %tmp47, %string* %tmp, align 8
  %tmp48 = icmp sgt i64 %arg38, 262144
  %.0 = select i1 %tmp48, i64 3, i64 2
  br i1 %tmp48, label %bb49, label %bb57

bb49:                                             ; preds = %.split
  %tmp50 = load %chpl_object_object*, %chpl_object_object** bitcast (%chpl_DummyLocale_object** @dummyLocale to %chpl_object_object**), align 8, !tbaa !107
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp51, i32 -2)
  %tmp53 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp41, i64 0, i32 0
  store i32 %tmp52, i32* %tmp53, align 8, !tbaa !110
  %tmp54 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp41, i64 %arg39, i32 %arg40)
  %tmp55 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp54, i64 0, i32 0
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp50
  %.2 = select i1 %tmp56, i64 2, i64 %.0
  br label %bb57

bb57:                                             ; preds = %bb49, %.split
  %.3 = phi i64 [ %.0, %.split ], [ %.2, %bb49 ]
  switch i64 %.3, label %bb115 [
    i64 2, label %bb58
    i64 3, label %bb63
  ]

bb58:                                             ; preds = %bb57
  %tmp59 = icmp sgt i64 %arg38, 0
  br i1 %tmp59, label %.preheader, label %bb116

.preheader:                                       ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %.preheader, %bb60
  %.03 = phi i64 [ %tmp62, %bb60 ], [ 0, %.preheader ]
  %tmp61 = getelementptr inbounds i64, i64* %arg, i64 %.03
  store i64 0, i64* %tmp61, align 8, !tbaa !138
  %tmp62 = add nuw nsw i64 %.03, 1
  %exitcond = icmp ne i64 %tmp62, %arg38
  br i1 %exitcond, label %bb60, label %.loopexit

bb63:                                             ; preds = %bb57
  %tmp64 = add nsw i64 %arg38, -1
  call void @chpl_build_bounded_range(i64 0, i64 %tmp64, %range_int64_t_bounded_F* %tmp42)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp65 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp66 = insertvalue %range_int64_t_bounded_F %tmp65, i64 %.unpack6, 1
  %tmp67 = call i64 @length(%range_int64_t_bounded_F %tmp66)
  %tmp68 = call i8 @chpl_task_getSerial()
  %tmp69 = icmp eq i8 %tmp68, 0
  br i1 %tmp69, label %bb70, label %bb72

bb70:                                             ; preds = %bb63
  %tmp71 = call i64 @_computeNumChunks_chpl3(i64 %tmp67, i64 %arg39, i32 %arg40)
  br label %bb72

bb72:                                             ; preds = %bb70, %bb63
  %.04 = phi i64 [ %tmp71, %bb70 ], [ 1, %bb63 ]
  %tmp73 = icmp slt i64 %.04, 2
  br i1 %tmp73, label %bb74, label %bb80

bb74:                                             ; preds = %bb72
  %tmp75 = icmp sgt i64 %.unpack, %.unpack6
  br i1 %tmp75, label %bb116, label %.preheader34

.preheader34:                                     ; preds = %bb74
  br label %bb76

bb76:                                             ; preds = %.preheader34, %bb76
  %.02 = phi i64 [ %tmp78, %bb76 ], [ %.unpack, %.preheader34 ]
  %tmp77 = getelementptr inbounds i64, i64* %arg, i64 %.02
  store i64 0, i64* %tmp77, align 8, !tbaa !138
  %tmp78 = add nsw i64 %.02, 1
  %tmp79 = icmp slt i64 %.02, %.unpack6
  br i1 %tmp79, label %bb76, label %.loopexit35

bb80:                                             ; preds = %bb72
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp43)
  %.elt7 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp81 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack8, 0
  %.elt9 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp82 = insertvalue %range_int64_t_boundedLow_F %tmp81, i64 %.unpack10, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp82, i64 %.04, %range_int64_t_bounded_F* %tmp44, i64 %arg39, i32 %arg40)
  %.elt11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 0
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp83 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack12, 0
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 1
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp84 = insertvalue %range_int64_t_bounded_F %tmp83, i64 %.unpack14, 1
  %tmp85 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg39, i32 %arg40)
  %tmp86 = bitcast i8* %tmp85 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %arg39, i32 %arg40)
  %tmp87 = call i64 @length(%range_int64_t_bounded_F %tmp84)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, i64 %arg39, i32 %arg40)
  %tmp88 = icmp sgt i64 %.unpack12, %.unpack14
  br i1 %tmp88, label %bb105, label %.preheader36

.preheader36:                                     ; preds = %bb80
  br label %bb89

bb89:                                             ; preds = %.preheader36, %bb89
  %.01 = phi i64 [ %tmp103, %bb89 ], [ %.unpack12, %.preheader36 ]
  %tmp90 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 1
  store i64 %tmp67, i64* %tmp90, align 8, !tbaa !139
  %tmp91 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 2
  store i64 %.04, i64* %tmp91, align 8, !tbaa !142
  %.repack22 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 3, i32 0
  store i64 %.unpack, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 3, i32 1
  store i64 %.unpack6, i64* %.repack24, align 8
  %tmp92 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 4
  store i64 %.01, i64* %tmp92, align 8, !tbaa !143
  %tmp93 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 5
  %tmp94 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp93 to i8**
  store i8* %tmp85, i8** %tmp94, align 8, !tbaa !144
  %tmp95 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 6
  store i64* %arg, i64** %tmp95, align 8, !tbaa !145
  %tmp96 = getelementptr inbounds i8, i8* %tmp85, i64 24
  %tmp97 = bitcast i8* %tmp96 to i8**
  %tmp98 = load i32, i32* @chpl_nodeID, align 4
  %tmp99 = sext i32 %tmp98 to i64
  %tmp100 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 7
  store i64 %arg39, i64* %tmp100, align 8, !tbaa !146
  %tmp101 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 8
  store i32 %arg40, i32* %tmp101, align 8, !tbaa !147
  %tmp102 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %tmp46, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 3, %struct.chpl_task_bundle_t* nonnull %tmp102, i64 144, i8** %tmp97, i64 %tmp99, i64 793, i32 2)
  %tmp103 = add nsw i64 %.01, 1
  %tmp104 = icmp slt i64 %.01, %.unpack14
  br i1 %tmp104, label %bb89, label %.loopexit37

.loopexit37:                                      ; preds = %bb89
  br label %bb105

bb105:                                            ; preds = %.loopexit37, %bb80
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, %chpl_Error_object** %tmp45, i64 %arg39, i32 %arg40)
  %tmp106 = load %chpl_Error_object*, %chpl_Error_object** %tmp45, align 8, !tbaa !125
  %tmp107 = icmp eq %chpl_Error_object* %tmp106, null
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb105
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp106, i64 %arg39, i32 %arg40)
  br label %bb109

bb109:                                            ; preds = %bb108, %bb105
  %tmp110 = icmp eq i8* %tmp85, null
  br i1 %tmp110, label %bb116, label %bb111

bb111:                                            ; preds = %bb109
  %tmp112 = getelementptr inbounds i8, i8* %tmp85, i64 32
  %tmp113 = bitcast i8* %tmp112 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp113)
  %tmp114 = getelementptr inbounds i8, i8* %tmp85, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp114)
  call void @chpl_here_free(i8* nonnull %tmp85, i64 %arg39, i32 %arg40)
  br label %bb116

bb115:                                            ; preds = %bb57
  call void @halt(%string* %tmp, i64 %arg39, i32 %arg40)
  br label %bb116

.loopexit:                                        ; preds = %bb60
  br label %bb116

.loopexit35:                                      ; preds = %bb76
  br label %bb116

bb116:                                            ; preds = %.loopexit35, %.loopexit, %bb115, %bb111, %bb109, %bb74, %bb58
  ret void
}

define internal void @init_elts4(%chpl_localesSignal_object** %arg, i64 %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %struct.chpl_localeID_t, align 8
  %tmp42 = alloca %range_int64_t_bounded_F, align 8
  %tmp43 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp44 = alloca %range_int64_t_bounded_F, align 8
  %tmp45 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8
  %tmp46 = alloca %chpl__class_localscoforall_fn2_object, align 8
  %tmp47 = load %string, %string* @_str_literal_180, align 16
  store %string %tmp47, %string* %tmp, align 8
  %tmp48 = icmp sgt i64 %arg38, 262144
  %.0 = select i1 %tmp48, i64 3, i64 2
  br i1 %tmp48, label %bb49, label %bb57

bb49:                                             ; preds = %.split
  %tmp50 = load %chpl_object_object*, %chpl_object_object** bitcast (%chpl_DummyLocale_object** @dummyLocale to %chpl_object_object**), align 8, !tbaa !107
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp51, i32 -2)
  %tmp53 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp41, i64 0, i32 0
  store i32 %tmp52, i32* %tmp53, align 8, !tbaa !110
  %tmp54 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp41, i64 %arg39, i32 %arg40)
  %tmp55 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp54, i64 0, i32 0
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp50
  %.2 = select i1 %tmp56, i64 2, i64 %.0
  br label %bb57

bb57:                                             ; preds = %bb49, %.split
  %.3 = phi i64 [ %.0, %.split ], [ %.2, %bb49 ]
  switch i64 %.3, label %bb115 [
    i64 2, label %bb58
    i64 3, label %bb63
  ]

bb58:                                             ; preds = %bb57
  %tmp59 = icmp sgt i64 %arg38, 0
  br i1 %tmp59, label %.preheader, label %bb116

.preheader:                                       ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %.preheader, %bb60
  %.04 = phi i64 [ %tmp62, %bb60 ], [ 0, %.preheader ]
  %tmp61 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %arg, i64 %.04
  store %chpl_localesSignal_object* null, %chpl_localesSignal_object** %tmp61, align 8, !tbaa !148
  %tmp62 = add nuw nsw i64 %.04, 1
  %exitcond = icmp ne i64 %tmp62, %arg38
  br i1 %exitcond, label %bb60, label %.loopexit

bb63:                                             ; preds = %bb57
  %tmp64 = add nsw i64 %arg38, -1
  call void @chpl_build_bounded_range(i64 0, i64 %tmp64, %range_int64_t_bounded_F* %tmp42)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp65 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp66 = insertvalue %range_int64_t_bounded_F %tmp65, i64 %.unpack6, 1
  %tmp67 = call i64 @length(%range_int64_t_bounded_F %tmp66)
  %tmp68 = call i8 @chpl_task_getSerial()
  %tmp69 = icmp eq i8 %tmp68, 0
  br i1 %tmp69, label %bb70, label %bb72

bb70:                                             ; preds = %bb63
  %tmp71 = call i64 @_computeNumChunks_chpl3(i64 %tmp67, i64 %arg39, i32 %arg40)
  br label %bb72

bb72:                                             ; preds = %bb70, %bb63
  %.03 = phi i64 [ %tmp71, %bb70 ], [ 1, %bb63 ]
  %tmp73 = icmp slt i64 %.03, 2
  br i1 %tmp73, label %bb74, label %bb80

bb74:                                             ; preds = %bb72
  %tmp75 = icmp sgt i64 %.unpack, %.unpack6
  br i1 %tmp75, label %bb116, label %.preheader34

.preheader34:                                     ; preds = %bb74
  br label %bb76

bb76:                                             ; preds = %.preheader34, %bb76
  %.02 = phi i64 [ %tmp78, %bb76 ], [ %.unpack, %.preheader34 ]
  %tmp77 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %arg, i64 %.02
  store %chpl_localesSignal_object* null, %chpl_localesSignal_object** %tmp77, align 8, !tbaa !148
  %tmp78 = add nsw i64 %.02, 1
  %tmp79 = icmp slt i64 %.02, %.unpack6
  br i1 %tmp79, label %bb76, label %.loopexit35

bb80:                                             ; preds = %bb72
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp43)
  %.elt7 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp81 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack8, 0
  %.elt9 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp82 = insertvalue %range_int64_t_boundedLow_F %tmp81, i64 %.unpack10, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp82, i64 %.03, %range_int64_t_bounded_F* %tmp44, i64 %arg39, i32 %arg40)
  %.elt11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 0
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp83 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack12, 0
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 1
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp84 = insertvalue %range_int64_t_bounded_F %tmp83, i64 %.unpack14, 1
  %tmp85 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg39, i32 %arg40)
  %tmp86 = bitcast i8* %tmp85 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %arg39, i32 %arg40)
  %tmp87 = call i64 @length(%range_int64_t_bounded_F %tmp84)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, i64 %arg39, i32 %arg40)
  %tmp88 = icmp sgt i64 %.unpack12, %.unpack14
  br i1 %tmp88, label %bb105, label %.preheader36

.preheader36:                                     ; preds = %bb80
  br label %bb89

bb89:                                             ; preds = %.preheader36, %bb89
  %.01 = phi i64 [ %tmp103, %bb89 ], [ %.unpack12, %.preheader36 ]
  %tmp90 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 1
  store i64 %tmp67, i64* %tmp90, align 8, !tbaa !150
  %tmp91 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 2
  store i64 %.03, i64* %tmp91, align 8, !tbaa !152
  %.repack22 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 3, i32 0
  store i64 %.unpack, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 3, i32 1
  store i64 %.unpack6, i64* %.repack24, align 8
  %tmp92 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 4
  store i64 %.01, i64* %tmp92, align 8, !tbaa !153
  %tmp93 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 5
  %tmp94 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp93 to i8**
  store i8* %tmp85, i8** %tmp94, align 8, !tbaa !154
  %tmp95 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 6
  store %chpl_localesSignal_object** %arg, %chpl_localesSignal_object*** %tmp95, align 8, !tbaa !155
  %tmp96 = getelementptr inbounds i8, i8* %tmp85, i64 24
  %tmp97 = bitcast i8* %tmp96 to i8**
  %tmp98 = load i32, i32* @chpl_nodeID, align 4
  %tmp99 = sext i32 %tmp98 to i64
  %tmp100 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 7
  store i64 %arg39, i64* %tmp100, align 8, !tbaa !156
  %tmp101 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 8
  store i32 %arg40, i32* %tmp101, align 8, !tbaa !157
  %tmp102 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %tmp46, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 0, %struct.chpl_task_bundle_t* nonnull %tmp102, i64 144, i8** %tmp97, i64 %tmp99, i64 793, i32 2)
  %tmp103 = add nsw i64 %.01, 1
  %tmp104 = icmp slt i64 %.01, %.unpack14
  br i1 %tmp104, label %bb89, label %.loopexit37

.loopexit37:                                      ; preds = %bb89
  br label %bb105

bb105:                                            ; preds = %.loopexit37, %bb80
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, %chpl_Error_object** %tmp45, i64 %arg39, i32 %arg40)
  %tmp106 = load %chpl_Error_object*, %chpl_Error_object** %tmp45, align 8, !tbaa !125
  %tmp107 = icmp eq %chpl_Error_object* %tmp106, null
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb105
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp106, i64 %arg39, i32 %arg40)
  br label %bb109

bb109:                                            ; preds = %bb108, %bb105
  %tmp110 = icmp eq i8* %tmp85, null
  br i1 %tmp110, label %bb116, label %bb111

bb111:                                            ; preds = %bb109
  %tmp112 = getelementptr inbounds i8, i8* %tmp85, i64 32
  %tmp113 = bitcast i8* %tmp112 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp113)
  %tmp114 = getelementptr inbounds i8, i8* %tmp85, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp114)
  call void @chpl_here_free(i8* nonnull %tmp85, i64 %arg39, i32 %arg40)
  br label %bb116

bb115:                                            ; preds = %bb57
  call void @halt(%string* %tmp, i64 %arg39, i32 %arg40)
  br label %bb116

.loopexit:                                        ; preds = %bb60
  br label %bb116

.loopexit35:                                      ; preds = %bb76
  br label %bb116

bb116:                                            ; preds = %.loopexit35, %.loopexit, %bb115, %bb111, %bb109, %bb74, %bb58
  ret void
}

define internal void @init_elts5(%chpl_locale_object** %arg, i64 %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %struct.chpl_localeID_t, align 8
  %tmp42 = alloca %range_int64_t_bounded_F, align 8
  %tmp43 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp44 = alloca %range_int64_t_bounded_F, align 8
  %tmp45 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8
  %tmp46 = alloca %chpl__class_localscoforall_fn_object, align 8
  %tmp47 = load %string, %string* @_str_literal_180, align 16
  store %string %tmp47, %string* %tmp, align 8
  %tmp48 = icmp sgt i64 %arg38, 262144
  %.0 = select i1 %tmp48, i64 3, i64 2
  br i1 %tmp48, label %bb49, label %bb57

bb49:                                             ; preds = %.split
  %tmp50 = load %chpl_object_object*, %chpl_object_object** bitcast (%chpl_DummyLocale_object** @dummyLocale to %chpl_object_object**), align 8, !tbaa !107
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp51, i32 -2)
  %tmp53 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp41, i64 0, i32 0
  store i32 %tmp52, i32* %tmp53, align 8, !tbaa !110
  %tmp54 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp41, i64 %arg39, i32 %arg40)
  %tmp55 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp54, i64 0, i32 0
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp50
  %.2 = select i1 %tmp56, i64 2, i64 %.0
  br label %bb57

bb57:                                             ; preds = %bb49, %.split
  %.3 = phi i64 [ %.0, %.split ], [ %.2, %bb49 ]
  switch i64 %.3, label %bb115 [
    i64 2, label %bb58
    i64 3, label %bb63
  ]

bb58:                                             ; preds = %bb57
  %tmp59 = icmp sgt i64 %arg38, 0
  br i1 %tmp59, label %.preheader, label %bb116

.preheader:                                       ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %.preheader, %bb60
  %.04 = phi i64 [ %tmp62, %bb60 ], [ 0, %.preheader ]
  %tmp61 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %arg, i64 %.04
  store %chpl_locale_object* null, %chpl_locale_object** %tmp61, align 8, !tbaa !158
  %tmp62 = add nuw nsw i64 %.04, 1
  %exitcond = icmp ne i64 %tmp62, %arg38
  br i1 %exitcond, label %bb60, label %.loopexit

bb63:                                             ; preds = %bb57
  %tmp64 = add nsw i64 %arg38, -1
  call void @chpl_build_bounded_range(i64 0, i64 %tmp64, %range_int64_t_bounded_F* %tmp42)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp65 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp66 = insertvalue %range_int64_t_bounded_F %tmp65, i64 %.unpack6, 1
  %tmp67 = call i64 @length(%range_int64_t_bounded_F %tmp66)
  %tmp68 = call i8 @chpl_task_getSerial()
  %tmp69 = icmp eq i8 %tmp68, 0
  br i1 %tmp69, label %bb70, label %bb72

bb70:                                             ; preds = %bb63
  %tmp71 = call i64 @_computeNumChunks_chpl3(i64 %tmp67, i64 %arg39, i32 %arg40)
  br label %bb72

bb72:                                             ; preds = %bb70, %bb63
  %.03 = phi i64 [ %tmp71, %bb70 ], [ 1, %bb63 ]
  %tmp73 = icmp slt i64 %.03, 2
  br i1 %tmp73, label %bb74, label %bb80

bb74:                                             ; preds = %bb72
  %tmp75 = icmp sgt i64 %.unpack, %.unpack6
  br i1 %tmp75, label %bb116, label %.preheader34

.preheader34:                                     ; preds = %bb74
  br label %bb76

bb76:                                             ; preds = %.preheader34, %bb76
  %.02 = phi i64 [ %tmp78, %bb76 ], [ %.unpack, %.preheader34 ]
  %tmp77 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %arg, i64 %.02
  store %chpl_locale_object* null, %chpl_locale_object** %tmp77, align 8, !tbaa !158
  %tmp78 = add nsw i64 %.02, 1
  %tmp79 = icmp slt i64 %.02, %.unpack6
  br i1 %tmp79, label %bb76, label %.loopexit35

bb80:                                             ; preds = %bb72
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp43)
  %.elt7 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp81 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack8, 0
  %.elt9 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp43, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp82 = insertvalue %range_int64_t_boundedLow_F %tmp81, i64 %.unpack10, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp82, i64 %.03, %range_int64_t_bounded_F* %tmp44, i64 %arg39, i32 %arg40)
  %.elt11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 0
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp83 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack12, 0
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp44, i64 0, i32 1
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp84 = insertvalue %range_int64_t_bounded_F %tmp83, i64 %.unpack14, 1
  %tmp85 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg39, i32 %arg40)
  %tmp86 = bitcast i8* %tmp85 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %arg39, i32 %arg40)
  %tmp87 = call i64 @length(%range_int64_t_bounded_F %tmp84)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, i64 %arg39, i32 %arg40)
  %tmp88 = icmp sgt i64 %.unpack12, %.unpack14
  br i1 %tmp88, label %bb105, label %.preheader36

.preheader36:                                     ; preds = %bb80
  br label %bb89

bb89:                                             ; preds = %.preheader36, %bb89
  %.01 = phi i64 [ %tmp103, %bb89 ], [ %.unpack12, %.preheader36 ]
  %tmp90 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 1
  store i64 %tmp67, i64* %tmp90, align 8, !tbaa !159
  %tmp91 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 2
  store i64 %.03, i64* %tmp91, align 8, !tbaa !161
  %.repack22 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 3, i32 0
  store i64 %.unpack, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 3, i32 1
  store i64 %.unpack6, i64* %.repack24, align 8
  %tmp92 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 4
  store i64 %.01, i64* %tmp92, align 8, !tbaa !162
  %tmp93 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 5
  %tmp94 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp93 to i8**
  store i8* %tmp85, i8** %tmp94, align 8, !tbaa !163
  %tmp95 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 6
  store %chpl_locale_object** %arg, %chpl_locale_object*** %tmp95, align 8, !tbaa !164
  %tmp96 = getelementptr inbounds i8, i8* %tmp85, i64 24
  %tmp97 = bitcast i8* %tmp96 to i8**
  %tmp98 = load i32, i32* @chpl_nodeID, align 4
  %tmp99 = sext i32 %tmp98 to i64
  %tmp100 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 7
  store i64 %arg39, i64* %tmp100, align 8, !tbaa !165
  %tmp101 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 8
  store i32 %arg40, i32* %tmp101, align 8, !tbaa !166
  %tmp102 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %tmp46, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 1, %struct.chpl_task_bundle_t* nonnull %tmp102, i64 144, i8** %tmp97, i64 %tmp99, i64 793, i32 2)
  %tmp103 = add nsw i64 %.01, 1
  %tmp104 = icmp slt i64 %.01, %.unpack14
  br i1 %tmp104, label %bb89, label %.loopexit37

.loopexit37:                                      ; preds = %bb89
  br label %bb105

bb105:                                            ; preds = %.loopexit37, %bb80
  store %chpl_Error_object* null, %chpl_Error_object** %tmp45, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, %chpl_Error_object** %tmp45, i64 %arg39, i32 %arg40)
  %tmp106 = load %chpl_Error_object*, %chpl_Error_object** %tmp45, align 8, !tbaa !125
  %tmp107 = icmp eq %chpl_Error_object* %tmp106, null
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb105
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp106, i64 %arg39, i32 %arg40)
  br label %bb109

bb109:                                            ; preds = %bb108, %bb105
  %tmp110 = icmp eq i8* %tmp85, null
  br i1 %tmp110, label %bb116, label %bb111

bb111:                                            ; preds = %bb109
  %tmp112 = getelementptr inbounds i8, i8* %tmp85, i64 32
  %tmp113 = bitcast i8* %tmp112 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp113)
  %tmp114 = getelementptr inbounds i8, i8* %tmp85, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp114)
  call void @chpl_here_free(i8* nonnull %tmp85, i64 %arg39, i32 %arg40)
  br label %bb116

bb115:                                            ; preds = %bb57
  call void @halt(%string* %tmp, i64 %arg39, i32 %arg40)
  br label %bb116

.loopexit:                                        ; preds = %bb60
  br label %bb116

.loopexit35:                                      ; preds = %bb76
  br label %bb116

bb116:                                            ; preds = %.loopexit35, %.loopexit, %bb115, %bb111, %bb109, %bb74, %bb58
  ret void
}

define internal void @coforall_fn(i64 %arg, i64 %arg3, %range_int64_t_bounded_F %arg4, i64 %arg5, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg6, %chpl_locale_object** %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = extractvalue %range_int64_t_bounded_F %arg4, 0
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg4, 1
  %tmp = alloca [2 x i64], align 8
  call void @_computeBlock_chpl(i64 %arg, i64 %arg3, i64 %arg5, i64 %.elt2, i64 %.elt, i64 %.elt, [2 x i64]* %tmp, i64 %arg8, i32 %arg9)
  %tmp10 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp11 = load i64, i64* %tmp10, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !138
  %tmp14 = icmp sgt i64 %tmp13, %tmp11
  br i1 %tmp14, label %bb19, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb15

bb15:                                             ; preds = %.preheader, %bb15
  %.0 = phi i64 [ %tmp17, %bb15 ], [ %tmp13, %.preheader ]
  %tmp16 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %arg7, i64 %.0
  store %chpl_locale_object* null, %chpl_locale_object** %tmp16, align 8, !tbaa !158
  %tmp17 = add nsw i64 %.0, 1
  %tmp18 = icmp slt i64 %.0, %tmp11
  br i1 %tmp18, label %bb15, label %.loopexit

.loopexit:                                        ; preds = %bb15
  br label %bb19

bb19:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn2(i64 %arg, i64 %arg3, %range_int64_t_bounded_F %arg4, i64 %arg5, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg6, %chpl_localesSignal_object** %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = extractvalue %range_int64_t_bounded_F %arg4, 0
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg4, 1
  %tmp = alloca [2 x i64], align 8
  call void @_computeBlock_chpl(i64 %arg, i64 %arg3, i64 %arg5, i64 %.elt2, i64 %.elt, i64 %.elt, [2 x i64]* %tmp, i64 %arg8, i32 %arg9)
  %tmp10 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp11 = load i64, i64* %tmp10, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !138
  %tmp14 = icmp sgt i64 %tmp13, %tmp11
  br i1 %tmp14, label %bb19, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb15

bb15:                                             ; preds = %.preheader, %bb15
  %.0 = phi i64 [ %tmp17, %bb15 ], [ %tmp13, %.preheader ]
  %tmp16 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %arg7, i64 %.0
  store %chpl_localesSignal_object* null, %chpl_localesSignal_object** %tmp16, align 8, !tbaa !148
  %tmp17 = add nsw i64 %.0, 1
  %tmp18 = icmp slt i64 %.0, %tmp11
  br i1 %tmp18, label %bb15, label %.loopexit

.loopexit:                                        ; preds = %bb15
  br label %bb19

bb19:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn3(i64 %arg, i64 %arg3, %range_int64_t_bounded_F %arg4, i64 %arg5, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg6, double* %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = extractvalue %range_int64_t_bounded_F %arg4, 0
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg4, 1
  %tmp = alloca [2 x i64], align 8
  call void @_computeBlock_chpl(i64 %arg, i64 %arg3, i64 %arg5, i64 %.elt2, i64 %.elt, i64 %.elt, [2 x i64]* %tmp, i64 %arg8, i32 %arg9)
  %tmp10 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp11 = load i64, i64* %tmp10, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !138
  %tmp14 = icmp sgt i64 %tmp13, %tmp11
  br i1 %tmp14, label %bb19, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb15

bb15:                                             ; preds = %.preheader, %bb15
  %.0 = phi i64 [ %tmp17, %bb15 ], [ %tmp13, %.preheader ]
  %tmp16 = getelementptr inbounds double, double* %arg7, i64 %.0
  store double 0.000000e+00, double* %tmp16, align 8, !tbaa !111
  %tmp17 = add nsw i64 %.0, 1
  %tmp18 = icmp slt i64 %.0, %tmp11
  br i1 %tmp18, label %bb15, label %.loopexit

.loopexit:                                        ; preds = %bb15
  br label %bb19

bb19:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn4(i64 %arg, i64 %arg3, %range_int64_t_bounded_F %arg4, i64 %arg5, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg6, i64* %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = extractvalue %range_int64_t_bounded_F %arg4, 0
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg4, 1
  %tmp = alloca [2 x i64], align 8
  call void @_computeBlock_chpl(i64 %arg, i64 %arg3, i64 %arg5, i64 %.elt2, i64 %.elt, i64 %.elt, [2 x i64]* %tmp, i64 %arg8, i32 %arg9)
  %tmp10 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp11 = load i64, i64* %tmp10, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !138
  %tmp14 = icmp sgt i64 %tmp13, %tmp11
  br i1 %tmp14, label %bb19, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb15

bb15:                                             ; preds = %.preheader, %bb15
  %.0 = phi i64 [ %tmp17, %bb15 ], [ %tmp13, %.preheader ]
  %tmp16 = getelementptr inbounds i64, i64* %arg7, i64 %.0
  store i64 0, i64* %tmp16, align 8, !tbaa !138
  %tmp17 = add nsw i64 %.0, 1
  %tmp18 = icmp slt i64 %.0, %tmp11
  br i1 %tmp18, label %bb15, label %.loopexit

.loopexit:                                        ; preds = %bb15
  br label %bb19

bb19:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn5(i64 %arg, i64 %arg3, %range_int64_t_bounded_F %arg4, i64 %arg5, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg6, i64* %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = extractvalue %range_int64_t_bounded_F %arg4, 0
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg4, 1
  %tmp = alloca [2 x i64], align 8
  call void @_computeBlock_chpl(i64 %arg, i64 %arg3, i64 %arg5, i64 %.elt2, i64 %.elt, i64 %.elt, [2 x i64]* %tmp, i64 %arg8, i32 %arg9)
  %tmp10 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp11 = load i64, i64* %tmp10, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !138
  %tmp14 = icmp sgt i64 %tmp13, %tmp11
  br i1 %tmp14, label %bb19, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb15

bb15:                                             ; preds = %.preheader, %bb15
  %.0 = phi i64 [ %tmp17, %bb15 ], [ %tmp13, %.preheader ]
  %tmp16 = getelementptr inbounds i64, i64* %arg7, i64 %.0
  store i64 0, i64* %tmp16, align 8, !tbaa !127
  %tmp17 = add nsw i64 %.0, 1
  %tmp18 = icmp slt i64 %.0, %tmp11
  br i1 %tmp18, label %bb15, label %.loopexit

.loopexit:                                        ; preds = %bb15
  br label %bb19

bb19:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @wrapcoforall_fn(%chpl__class_localscoforall_fn2_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 8
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !157
  %tmp4 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 7
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !156
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 3, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp6 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 3, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp7 = insertvalue %range_int64_t_bounded_F %tmp6, i64 %.unpack2, 1
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 1
  %tmp9 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 2
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 4
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 5
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn2_object, %chpl__class_localscoforall_fn2_object* %arg, i64 0, i32 6
  %tmp13 = load i64, i64* %tmp8, align 8, !tbaa !150
  %tmp14 = load i64, i64* %tmp9, align 8, !tbaa !152
  %tmp15 = load i64, i64* %tmp10, align 8, !tbaa !153
  %tmp16 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !154
  %tmp17 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp12, align 8, !tbaa !155
  tail call void @coforall_fn2(i64 %tmp13, i64 %tmp14, %range_int64_t_bounded_F %tmp7, i64 %tmp15, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp16, %chpl_localesSignal_object** %tmp17, i64 %tmp5, i32 %tmp3)
  %tmp18 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !154
  tail call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp18, %chpl_Error_object* null, i64 %tmp5, i32 %tmp3)
  ret void
}

define internal void @wrapcoforall_fn2(%chpl__class_localscoforall_fn_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 8
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !166
  %tmp4 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 7
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !165
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 3, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp6 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 3, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp7 = insertvalue %range_int64_t_bounded_F %tmp6, i64 %.unpack2, 1
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 1
  %tmp9 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 2
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 4
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 5
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn_object, %chpl__class_localscoforall_fn_object* %arg, i64 0, i32 6
  %tmp13 = load i64, i64* %tmp8, align 8, !tbaa !159
  %tmp14 = load i64, i64* %tmp9, align 8, !tbaa !161
  %tmp15 = load i64, i64* %tmp10, align 8, !tbaa !162
  %tmp16 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !163
  %tmp17 = load %chpl_locale_object**, %chpl_locale_object*** %tmp12, align 8, !tbaa !164
  tail call void @coforall_fn(i64 %tmp13, i64 %tmp14, %range_int64_t_bounded_F %tmp7, i64 %tmp15, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp16, %chpl_locale_object** %tmp17, i64 %tmp5, i32 %tmp3)
  %tmp18 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !163
  tail call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp18, %chpl_Error_object* null, i64 %tmp5, i32 %tmp3)
  ret void
}

define internal void @wrapcoforall_fn3(%chpl__class_localscoforall_fn5_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 8
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !137
  %tmp4 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 7
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !136
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 3, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp6 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 3, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp7 = insertvalue %range_int64_t_bounded_F %tmp6, i64 %.unpack2, 1
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 1
  %tmp9 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 2
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 4
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 5
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn5_object, %chpl__class_localscoforall_fn5_object* %arg, i64 0, i32 6
  %tmp13 = load i64, i64* %tmp8, align 8, !tbaa !129
  %tmp14 = load i64, i64* %tmp9, align 8, !tbaa !132
  %tmp15 = load i64, i64* %tmp10, align 8, !tbaa !133
  %tmp16 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !134
  %tmp17 = load i64*, i64** %tmp12, align 8, !tbaa !135
  tail call void @coforall_fn5(i64 %tmp13, i64 %tmp14, %range_int64_t_bounded_F %tmp7, i64 %tmp15, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp16, i64* %tmp17, i64 %tmp5, i32 %tmp3)
  %tmp18 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !134
  tail call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp18, %chpl_Error_object* null, i64 %tmp5, i32 %tmp3)
  ret void
}

define internal void @wrapcoforall_fn4(%chpl__class_localscoforall_fn4_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 8
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !147
  %tmp4 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 7
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !146
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 3, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp6 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 3, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp7 = insertvalue %range_int64_t_bounded_F %tmp6, i64 %.unpack2, 1
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 1
  %tmp9 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 2
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 4
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 5
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn4_object, %chpl__class_localscoforall_fn4_object* %arg, i64 0, i32 6
  %tmp13 = load i64, i64* %tmp8, align 8, !tbaa !139
  %tmp14 = load i64, i64* %tmp9, align 8, !tbaa !142
  %tmp15 = load i64, i64* %tmp10, align 8, !tbaa !143
  %tmp16 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !144
  %tmp17 = load i64*, i64** %tmp12, align 8, !tbaa !145
  tail call void @coforall_fn4(i64 %tmp13, i64 %tmp14, %range_int64_t_bounded_F %tmp7, i64 %tmp15, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp16, i64* %tmp17, i64 %tmp5, i32 %tmp3)
  %tmp18 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !144
  tail call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp18, %chpl_Error_object* null, i64 %tmp5, i32 %tmp3)
  ret void
}

define internal void @wrapcoforall_fn5(%chpl__class_localscoforall_fn3_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 8
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !122
  %tmp4 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 7
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !121
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 3, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp6 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 3, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp7 = insertvalue %range_int64_t_bounded_F %tmp6, i64 %.unpack2, 1
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 1
  %tmp9 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 2
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 4
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 5
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn3_object, %chpl__class_localscoforall_fn3_object* %arg, i64 0, i32 6
  %tmp13 = load i64, i64* %tmp8, align 8, !tbaa !113
  %tmp14 = load i64, i64* %tmp9, align 8, !tbaa !117
  %tmp15 = load i64, i64* %tmp10, align 8, !tbaa !118
  %tmp16 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !119
  %tmp17 = load double*, double** %tmp12, align 8, !tbaa !120
  tail call void @coforall_fn3(i64 %tmp13, i64 %tmp14, %range_int64_t_bounded_F %tmp7, i64 %tmp15, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp16, double* %tmp17, i64 %tmp5, i32 %tmp3)
  %tmp18 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp11, align 8, !tbaa !119
  tail call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp18, %chpl_Error_object* null, i64 %tmp5, i32 %tmp3)
  ret void
}

define internal void @chpl__auto_destroy__EndCountBase(%chpl_chpl___EndCountBase_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_chpl___EndCountBase_object, %chpl_chpl___EndCountBase_object* %arg, i64 0, i32 1, i32 1, i32 0
  tail call void @atomic_destroy_bool(i8* nonnull %tmp)
  ret void
}

define internal void @chpl__auto_destroy__EndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 1, i32 0
  tail call void @atomic_destroy_int_least64_t(i64* nonnull %tmp)
  %tmp3 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 1, i32 1, i32 0
  tail call void @atomic_destroy_bool(i8* nonnull %tmp3)
  ret void
}

define internal void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_TaskErrors, align 8
  %tmp3 = alloca %atomicbool, align 8
  %tmp4 = alloca i8, align 1
  %tmp5 = alloca %chpl_TaskErrors, align 8
  %tmp6 = alloca %atomic_int64, align 8
  %tmp7 = alloca i64, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %tmp, i64 0, i32 0
  store %chpl_Error_object* null, %chpl_Error_object** %tmp8, align 8, !tbaa !167
  call void @atomic_init_bool(i8* nonnull %tmp4, i1 false)
  %tmp9 = load i8, i8* %tmp4, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp3, i8 %tmp9)
  %tmp10 = getelementptr inbounds %atomicbool, %atomicbool* %tmp3, i64 0, i32 0
  %tmp11 = load i8, i8* %tmp10, align 8
  %tmp12 = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %tmp, i64 0, i32 1, i32 0
  store i8 %tmp11, i8* %tmp12, align 8
  call void @_construct_chpl_TaskErrors(%chpl_Error_object* null, %atomicbool* %tmp3, %chpl_TaskErrors* %tmp, %chpl_TaskErrors* %tmp5)
  %tmp13 = load %chpl_TaskErrors, %chpl_TaskErrors* %tmp5, align 8
  %tmp14 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 0
  %tmp15 = call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp14)
  %tmp16 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 1, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 1
  store %chpl_TaskErrors %tmp13, %chpl_TaskErrors* %tmp17, align 8
  %tmp18 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 2
  store i8* null, i8** %tmp18, align 8, !tbaa !171
  %tmp19 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 2, i32* %tmp19, align 4, !tbaa !170
  call void @atomic_init_int_least64_t(i64* nonnull %tmp7, i64 0)
  %tmp20 = load i64, i64* %tmp7, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp6, i64 %tmp20)
  %tmp21 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp6, i64 0, i32 0
  %tmp22 = load i64, i64* %tmp21, align 8
  %tmp23 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 1, i32 0
  store i64 %tmp22, i64* %tmp23, align 8
  %tmp24 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 2
  store i64 0, i64* %tmp24, align 8, !tbaa !173
  %tmp25 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 3, i32* %tmp25, align 4, !tbaa !170
  ret void
}

define internal void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 1, i32 0
  %tmp5 = tail call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp4, i64 %arg1, i32 3)
  %tmp6 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp7 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp6, i32 -2)
  %tmp8 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp7, i32* %tmp8, align 8, !tbaa !110
  %tmp9 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg2, i32 %arg3)
  %tmp10 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp9, i64 0, i32 8, i32 0
  %tmp11 = add nsw i64 %arg1, -1
  %tmp12 = call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp10, i64 %tmp11, i32 0)
  ret void
}

define internal void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, %chpl_Error_object* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0
  tail call void @chpl_save_task_error(%chpl_chpl___EndCountBase_object* %tmp, %chpl_Error_object* %arg1, i64 %arg2, i32 %arg3)
  %tmp4 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 1, i32 0
  %tmp5 = tail call i64 @atomic_fetch_sub_explicit_int_least64_t(i64* nonnull %tmp4, i64 1, i32 3)
  ret void
}

define internal void @_waitEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, %chpl_Error_object** nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  %tmp5 = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp7 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp6, i32 -2)
  %tmp8 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp7, i32* %tmp8, align 8, !tbaa !110
  %tmp9 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg3, i32 %arg4)
  %tmp10 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp9, i64 0, i32 8, i32 0
  %tmp11 = call i64 @atomic_fetch_sub_explicit_int_least64_t(i64* nonnull %tmp10, i64 1, i32 0)
  %tmp12 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 2
  call void @chpl_taskListExecute(i8** %tmp12, i64 %arg3, i32 %arg4)
  %tmp13 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 1, i32 0
  %tmp14 = call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp13, i32 0)
  %.0.in1 = icmp eq i64 %tmp14, 0
  br i1 %.0.in1, label %bb17, label %.lr.ph

.lr.ph:                                           ; preds = %.split
  br label %bb15

bb15:                                             ; preds = %.lr.ph, %bb15
  call void @chpl_task_yield()
  %tmp16 = call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp13, i32 0)
  %.0.in = icmp eq i64 %tmp16, 0
  br i1 %.0.in, label %._crit_edge, label %bb15

._crit_edge:                                      ; preds = %bb15
  br label %bb17

bb17:                                             ; preds = %._crit_edge, %.split
  call void @atomic_thread_fence(i32 2)
  %tmp18 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 2
  %tmp19 = load i64, i64* %tmp18, align 8, !tbaa !173
  %tmp20 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp21 = call i32 @chpl_rt_buildLocaleID(i32 %tmp20, i32 -2)
  %tmp22 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp5, i64 0, i32 0
  store i32 %tmp21, i32* %tmp22, align 8, !tbaa !110
  %tmp23 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp5, i64 %arg3, i32 %arg4)
  %tmp24 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp23, i64 0, i32 8, i32 0
  %tmp25 = add nsw i64 %tmp19, -1
  %tmp26 = call i64 @atomic_fetch_sub_explicit_int_least64_t(i64* nonnull %tmp24, i64 %tmp25, i32 0)
  %tmp27 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 1
  %tmp28 = call i8 @empty(%chpl_TaskErrors* %tmp27, i64 %arg3, i32 %arg4)
  %tmp29 = icmp eq i8 %tmp28, 0
  br i1 %tmp29, label %bb30, label %bb34

bb30:                                             ; preds = %bb17
  %tmp31 = call %chpl_TaskErrors_object* @_new4(%chpl_TaskErrors* %tmp27, i64 %arg3, i32 %arg4)
  %tmp32 = getelementptr inbounds %chpl_TaskErrors_object, %chpl_TaskErrors_object* %tmp31, i64 0, i32 0
  %tmp33 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp32, i64 %arg3, i32 %arg4)
  store %chpl_Error_object* %tmp33, %chpl_Error_object** %arg2, align 8, !tbaa !125
  br label %bb34

bb34:                                             ; preds = %bb17, %bb30
  ret void
}

define internal void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 %arg2, %chpl_Error_object** nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 2
  tail call void @chpl_taskListExecute(i8** %tmp6, i64 %arg4, i32 %arg5)
  %tmp7 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 1, i32 0
  %tmp8 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp7, i32 0)
  %.0.in1 = icmp eq i64 %tmp8, 0
  br i1 %.0.in1, label %bb11, label %.lr.ph

.lr.ph:                                           ; preds = %.split
  br label %bb9

bb9:                                              ; preds = %.lr.ph, %bb9
  tail call void @chpl_task_yield()
  %tmp10 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp7, i32 0)
  %.0.in = icmp eq i64 %tmp10, 0
  br i1 %.0.in, label %._crit_edge, label %bb9

._crit_edge:                                      ; preds = %bb9
  br label %bb11

bb11:                                             ; preds = %._crit_edge, %.split
  tail call void @atomic_thread_fence(i32 2)
  %tmp12 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp13 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp12, i32 -2)
  %tmp14 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp13, i32* %tmp14, align 8, !tbaa !110
  %tmp15 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg4, i32 %arg5)
  %tmp16 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp15, i64 0, i32 8, i32 0
  %tmp17 = add nsw i64 %arg2, -1
  %tmp18 = call i64 @atomic_fetch_sub_explicit_int_least64_t(i64* nonnull %tmp16, i64 %tmp17, i32 0)
  %tmp19 = getelementptr inbounds %chpl_chpl___EndCount_atomic_int64_int64_t_object, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 0, i32 0, i32 1
  %tmp20 = call i8 @empty(%chpl_TaskErrors* %tmp19, i64 %arg4, i32 %arg5)
  %tmp21 = icmp eq i8 %tmp20, 0
  br i1 %tmp21, label %bb22, label %bb26

bb22:                                             ; preds = %bb11
  %tmp23 = call %chpl_TaskErrors_object* @_new4(%chpl_TaskErrors* %tmp19, i64 %arg4, i32 %arg5)
  %tmp24 = getelementptr inbounds %chpl_TaskErrors_object, %chpl_TaskErrors_object* %tmp23, i64 0, i32 0
  %tmp25 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp24, i64 %arg4, i32 %arg5)
  store %chpl_Error_object* %tmp25, %chpl_Error_object** %arg3, align 8, !tbaa !125
  br label %bb26

bb26:                                             ; preds = %bb11, %bb22
  ret void
}

define internal i64 @_command_line_cast(i8* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca i8, align 1
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp24 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp24, %string* %tmp, align 8
  %tmp25 = bitcast %string* %tmp to i8*
  %tmp26 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp25)
  %tmp27 = load %string, %string* @_str_literal_1976, align 16
  store %string %tmp27, %string* %tmp5, align 8
  %tmp28 = bitcast %string* %tmp5 to i8*
  %tmp29 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp28)
  %tmp30 = load %string, %string* @_str_literal_1952, align 16
  store %string %tmp30, %string* %tmp6, align 8
  %tmp31 = bitcast %string* %tmp6 to i8*
  %tmp32 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp31)
  %tmp33 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp33, %string* %tmp7, align 8
  %tmp34 = load %string, %string* @_str_literal_3171, align 16
  store %string %tmp34, %string* %tmp8, align 8
  %tmp35 = bitcast %string* %tmp8 to i8*
  %tmp36 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp35)
  call void @_cast2(i8* %arg, %string* %tmp10, i64 %arg3, i32 %arg4)
  %tmp37 = load %string, %string* %tmp10, align 8
  store %string %tmp37, %string* %tmp9, align 8
  store i8 0, i8* %tmp11, align 1, !tbaa !8
  call void @init35(%string* %tmp13, %string* %tmp9, i8 0, i64 %arg3, i32 %arg4)
  %tmp38 = load %string, %string* %tmp13, align 8
  store %string %tmp38, %string* %tmp12, align 8
  %tmp39 = bitcast %string* %tmp12 to i8*
  %tmp40 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp39)
  %tmp41 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 0
  %tmp42 = load i64, i64* %tmp41, align 8, !tbaa !175
  %tmp43 = icmp eq i64 %tmp42, 0
  br i1 %tmp43, label %bb44, label %bb48

bb44:                                             ; preds = %.split
  %tmp45 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp8, i64 %arg3, i32 %arg4)
  %tmp46 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp45, i64 0, i32 0
  %tmp47 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp46, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb48:                                             ; preds = %.split
  %tmp49 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 4
  %tmp50 = load i32, i32* %tmp49, align 4, !tbaa !178
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = icmp eq i32 %tmp50, %tmp51
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb48
  call void @halt(%string* %tmp7, i64 %arg3, i32 %arg4)
  br label %bb54

bb54:                                             ; preds = %bb48, %bb53
  %tmp55 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 2
  %tmp56 = load i8*, i8** %tmp55, align 8, !tbaa !179
  %tmp57 = trunc i64 %arg3 to i32
  %tmp58 = call i64 @c_string_to_int64_t(i8* %tmp56, i8* nonnull %tmp11, i32 %tmp57, i32 %arg4)
  %tmp59 = load i8, i8* %tmp11, align 1, !tbaa !2
  %tmp60 = icmp eq i8 %tmp59, 0
  br i1 %tmp60, label %bb70, label %bb61

bb61:                                             ; preds = %bb54
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp9, %string* %tmp15, i64 %arg3, i32 %arg4)
  %tmp62 = load %string, %string* %tmp15, align 8
  store %string %tmp62, %string* %tmp14, align 8
  call void @chpl___PLUS_(%string* %tmp14, %string* %tmp5, %string* %tmp17, i64 %arg3, i32 %arg4)
  %tmp63 = load %string, %string* %tmp17, align 8
  store %string %tmp63, %string* %tmp16, align 8
  call void @_cast4(i64 64, %string* %tmp20, i64 %arg3, i32 %arg4)
  %tmp64 = load %string, %string* %tmp20, align 8
  store %string %tmp64, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp16, %string* %tmp19, %string* %tmp21, i64 %arg3, i32 %arg4)
  %tmp65 = load %string, %string* %tmp21, align 8
  call void @deinit23(%string* %tmp19, i64 %arg3, i32 %arg4)
  store %string %tmp65, %string* %tmp18, align 8
  call void @chpl___PLUS_(%string* %tmp18, %string* %tmp, %string* %tmp23, i64 %arg3, i32 %arg4)
  %tmp66 = load %string, %string* %tmp23, align 8
  store %string %tmp66, %string* %tmp22, align 8
  %tmp67 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp22, i64 %arg3, i32 %arg4)
  %tmp68 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp67, i64 0, i32 0
  %tmp69 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp68, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp22, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp18, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp16, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp14, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb70:                                             ; preds = %bb54
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb71:                                             ; preds = %bb44, %bb61, %bb70
  %.02 = phi i64 [ undef, %bb44 ], [ undef, %bb61 ], [ %tmp58, %bb70 ]
  %.01 = phi %chpl_Error_object* [ %tmp47, %bb44 ], [ %tmp69, %bb61 ], [ null, %bb70 ]
  %tmp72 = icmp eq %chpl_Error_object* %.01, null
  call void @deinit23(%string* %tmp9, i64 %arg3, i32 %arg4)
  br i1 %tmp72, label %bb74, label %bb73

bb73:                                             ; preds = %bb71
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  ret i64 %.02
}

define internal i64 @_command_line_cast2(i8* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca i8, align 1
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp24 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp24, %string* %tmp, align 8
  %tmp25 = bitcast %string* %tmp to i8*
  %tmp26 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp25)
  %tmp27 = load %string, %string* @_str_literal_1976, align 16
  store %string %tmp27, %string* %tmp5, align 8
  %tmp28 = bitcast %string* %tmp5 to i8*
  %tmp29 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp28)
  %tmp30 = load %string, %string* @_str_literal_1952, align 16
  store %string %tmp30, %string* %tmp6, align 8
  %tmp31 = bitcast %string* %tmp6 to i8*
  %tmp32 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp31)
  %tmp33 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp33, %string* %tmp7, align 8
  %tmp34 = load %string, %string* @_str_literal_3171, align 16
  store %string %tmp34, %string* %tmp8, align 8
  %tmp35 = bitcast %string* %tmp8 to i8*
  %tmp36 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp35)
  call void @_cast2(i8* %arg, %string* %tmp10, i64 %arg3, i32 %arg4)
  %tmp37 = load %string, %string* %tmp10, align 8
  store %string %tmp37, %string* %tmp9, align 8
  store i8 0, i8* %tmp11, align 1, !tbaa !8
  call void @init35(%string* %tmp13, %string* %tmp9, i8 0, i64 %arg3, i32 %arg4)
  %tmp38 = load %string, %string* %tmp13, align 8
  store %string %tmp38, %string* %tmp12, align 8
  %tmp39 = bitcast %string* %tmp12 to i8*
  %tmp40 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp39)
  %tmp41 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 0
  %tmp42 = load i64, i64* %tmp41, align 8, !tbaa !175
  %tmp43 = icmp eq i64 %tmp42, 0
  br i1 %tmp43, label %bb44, label %bb48

bb44:                                             ; preds = %.split
  %tmp45 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp8, i64 %arg3, i32 %arg4)
  %tmp46 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp45, i64 0, i32 0
  %tmp47 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp46, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb48:                                             ; preds = %.split
  %tmp49 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 4
  %tmp50 = load i32, i32* %tmp49, align 4, !tbaa !178
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = icmp eq i32 %tmp50, %tmp51
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb48
  call void @halt(%string* %tmp7, i64 %arg3, i32 %arg4)
  br label %bb54

bb54:                                             ; preds = %bb48, %bb53
  %tmp55 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 2
  %tmp56 = load i8*, i8** %tmp55, align 8, !tbaa !179
  %tmp57 = trunc i64 %arg3 to i32
  %tmp58 = call i64 @c_string_to_int64_t(i8* %tmp56, i8* nonnull %tmp11, i32 %tmp57, i32 %arg4)
  %tmp59 = load i8, i8* %tmp11, align 1, !tbaa !2
  %tmp60 = icmp eq i8 %tmp59, 0
  br i1 %tmp60, label %bb70, label %bb61

bb61:                                             ; preds = %bb54
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp9, %string* %tmp15, i64 %arg3, i32 %arg4)
  %tmp62 = load %string, %string* %tmp15, align 8
  store %string %tmp62, %string* %tmp14, align 8
  call void @chpl___PLUS_(%string* %tmp14, %string* %tmp5, %string* %tmp17, i64 %arg3, i32 %arg4)
  %tmp63 = load %string, %string* %tmp17, align 8
  store %string %tmp63, %string* %tmp16, align 8
  call void @_cast4(i64 64, %string* %tmp20, i64 %arg3, i32 %arg4)
  %tmp64 = load %string, %string* %tmp20, align 8
  store %string %tmp64, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp16, %string* %tmp19, %string* %tmp21, i64 %arg3, i32 %arg4)
  %tmp65 = load %string, %string* %tmp21, align 8
  call void @deinit23(%string* %tmp19, i64 %arg3, i32 %arg4)
  store %string %tmp65, %string* %tmp18, align 8
  call void @chpl___PLUS_(%string* %tmp18, %string* %tmp, %string* %tmp23, i64 %arg3, i32 %arg4)
  %tmp66 = load %string, %string* %tmp23, align 8
  store %string %tmp66, %string* %tmp22, align 8
  %tmp67 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp22, i64 %arg3, i32 %arg4)
  %tmp68 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp67, i64 0, i32 0
  %tmp69 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp68, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp22, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp18, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp16, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp14, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb70:                                             ; preds = %bb54
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb71:                                             ; preds = %bb44, %bb61, %bb70
  %.02 = phi i64 [ undef, %bb44 ], [ undef, %bb61 ], [ %tmp58, %bb70 ]
  %.01 = phi %chpl_Error_object* [ %tmp47, %bb44 ], [ %tmp69, %bb61 ], [ null, %bb70 ]
  %tmp72 = icmp eq %chpl_Error_object* %.01, null
  call void @deinit23(%string* %tmp9, i64 %arg3, i32 %arg4)
  br i1 %tmp72, label %bb74, label %bb73

bb73:                                             ; preds = %bb71
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  ret i64 %.02
}

define internal i8 @_command_line_cast3(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = load %string, %string* %tmp4, align 8
  store %string %tmp5, %string* %tmp3, align 8
  %tmp6 = call i8 @_cast3(%string* %tmp3, %chpl_Error_object** %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp8 = icmp eq %chpl_Error_object* %tmp7, null
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  br i1 %tmp8, label %bb13, label %bb9

bb9:                                              ; preds = %.split
  %tmp10 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp11 = icmp eq %chpl_Error_object* %tmp10, null
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb9
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  br label %bb13

bb13:                                             ; preds = %.split, %bb12, %bb9
  ret i8 %tmp6
}

define internal i8 @_command_line_cast4(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = load %string, %string* %tmp4, align 8
  store %string %tmp5, %string* %tmp3, align 8
  %tmp6 = call i8 @_cast3(%string* %tmp3, %chpl_Error_object** %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp8 = icmp eq %chpl_Error_object* %tmp7, null
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  br i1 %tmp8, label %bb13, label %bb9

bb9:                                              ; preds = %.split
  %tmp10 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp11 = icmp eq %chpl_Error_object* %tmp10, null
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb9
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  br label %bb13

bb13:                                             ; preds = %.split, %bb12, %bb9
  ret i8 %tmp6
}

define internal i8 @_command_line_cast5(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = load %string, %string* %tmp4, align 8
  store %string %tmp5, %string* %tmp3, align 8
  %tmp6 = call i8 @_cast3(%string* %tmp3, %chpl_Error_object** %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp8 = icmp eq %chpl_Error_object* %tmp7, null
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  br i1 %tmp8, label %bb13, label %bb9

bb9:                                              ; preds = %.split
  %tmp10 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp11 = icmp eq %chpl_Error_object* %tmp10, null
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb9
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  br label %bb13

bb13:                                             ; preds = %.split, %bb12, %bb9
  ret i8 %tmp6
}

define internal i64 @_command_line_cast6(i8* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca i8, align 1
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp24 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp24, %string* %tmp, align 8
  %tmp25 = bitcast %string* %tmp to i8*
  %tmp26 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp25)
  %tmp27 = load %string, %string* @_str_literal_1980, align 16
  store %string %tmp27, %string* %tmp5, align 8
  %tmp28 = bitcast %string* %tmp5 to i8*
  %tmp29 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp28)
  %tmp30 = load %string, %string* @_str_literal_1952, align 16
  store %string %tmp30, %string* %tmp6, align 8
  %tmp31 = bitcast %string* %tmp6 to i8*
  %tmp32 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp31)
  %tmp33 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp33, %string* %tmp7, align 8
  %tmp34 = load %string, %string* @_str_literal_3218, align 16
  store %string %tmp34, %string* %tmp8, align 8
  %tmp35 = bitcast %string* %tmp8 to i8*
  %tmp36 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp35)
  call void @_cast2(i8* %arg, %string* %tmp10, i64 %arg3, i32 %arg4)
  %tmp37 = load %string, %string* %tmp10, align 8
  store %string %tmp37, %string* %tmp9, align 8
  store i8 0, i8* %tmp11, align 1, !tbaa !8
  call void @init35(%string* %tmp13, %string* %tmp9, i8 0, i64 %arg3, i32 %arg4)
  %tmp38 = load %string, %string* %tmp13, align 8
  store %string %tmp38, %string* %tmp12, align 8
  %tmp39 = bitcast %string* %tmp12 to i8*
  %tmp40 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp39)
  %tmp41 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 0
  %tmp42 = load i64, i64* %tmp41, align 8, !tbaa !175
  %tmp43 = icmp eq i64 %tmp42, 0
  br i1 %tmp43, label %bb44, label %bb48

bb44:                                             ; preds = %.split
  %tmp45 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp8, i64 %arg3, i32 %arg4)
  %tmp46 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp45, i64 0, i32 0
  %tmp47 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp46, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb48:                                             ; preds = %.split
  %tmp49 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 4
  %tmp50 = load i32, i32* %tmp49, align 4, !tbaa !178
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = icmp eq i32 %tmp50, %tmp51
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb48
  call void @halt(%string* %tmp7, i64 %arg3, i32 %arg4)
  br label %bb54

bb54:                                             ; preds = %bb48, %bb53
  %tmp55 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 2
  %tmp56 = load i8*, i8** %tmp55, align 8, !tbaa !179
  %tmp57 = trunc i64 %arg3 to i32
  %tmp58 = call i64 @c_string_to_uint64_t(i8* %tmp56, i8* nonnull %tmp11, i32 %tmp57, i32 %arg4)
  %tmp59 = load i8, i8* %tmp11, align 1, !tbaa !2
  %tmp60 = icmp eq i8 %tmp59, 0
  br i1 %tmp60, label %bb70, label %bb61

bb61:                                             ; preds = %bb54
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp9, %string* %tmp15, i64 %arg3, i32 %arg4)
  %tmp62 = load %string, %string* %tmp15, align 8
  store %string %tmp62, %string* %tmp14, align 8
  call void @chpl___PLUS_(%string* %tmp14, %string* %tmp5, %string* %tmp17, i64 %arg3, i32 %arg4)
  %tmp63 = load %string, %string* %tmp17, align 8
  store %string %tmp63, %string* %tmp16, align 8
  call void @_cast4(i64 64, %string* %tmp20, i64 %arg3, i32 %arg4)
  %tmp64 = load %string, %string* %tmp20, align 8
  store %string %tmp64, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp16, %string* %tmp19, %string* %tmp21, i64 %arg3, i32 %arg4)
  %tmp65 = load %string, %string* %tmp21, align 8
  call void @deinit23(%string* %tmp19, i64 %arg3, i32 %arg4)
  store %string %tmp65, %string* %tmp18, align 8
  call void @chpl___PLUS_(%string* %tmp18, %string* %tmp, %string* %tmp23, i64 %arg3, i32 %arg4)
  %tmp66 = load %string, %string* %tmp23, align 8
  store %string %tmp66, %string* %tmp22, align 8
  %tmp67 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp22, i64 %arg3, i32 %arg4)
  %tmp68 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp67, i64 0, i32 0
  %tmp69 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp68, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp22, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp18, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp16, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp14, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb70:                                             ; preds = %bb54
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb71:                                             ; preds = %bb44, %bb61, %bb70
  %.02 = phi i64 [ undef, %bb44 ], [ undef, %bb61 ], [ %tmp58, %bb70 ]
  %.01 = phi %chpl_Error_object* [ %tmp47, %bb44 ], [ %tmp69, %bb61 ], [ null, %bb70 ]
  %tmp72 = icmp eq %chpl_Error_object* %.01, null
  call void @deinit23(%string* %tmp9, i64 %arg3, i32 %arg4)
  br i1 %tmp72, label %bb74, label %bb73

bb73:                                             ; preds = %bb71
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  ret i64 %.02
}

define internal i64 @_command_line_cast7(i8* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca i8, align 1
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp24 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp24, %string* %tmp, align 8
  %tmp25 = bitcast %string* %tmp to i8*
  %tmp26 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp25)
  %tmp27 = load %string, %string* @_str_literal_1980, align 16
  store %string %tmp27, %string* %tmp5, align 8
  %tmp28 = bitcast %string* %tmp5 to i8*
  %tmp29 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp28)
  %tmp30 = load %string, %string* @_str_literal_1952, align 16
  store %string %tmp30, %string* %tmp6, align 8
  %tmp31 = bitcast %string* %tmp6 to i8*
  %tmp32 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp31)
  %tmp33 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp33, %string* %tmp7, align 8
  %tmp34 = load %string, %string* @_str_literal_3218, align 16
  store %string %tmp34, %string* %tmp8, align 8
  %tmp35 = bitcast %string* %tmp8 to i8*
  %tmp36 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp35)
  call void @_cast2(i8* %arg, %string* %tmp10, i64 %arg3, i32 %arg4)
  %tmp37 = load %string, %string* %tmp10, align 8
  store %string %tmp37, %string* %tmp9, align 8
  store i8 0, i8* %tmp11, align 1, !tbaa !8
  call void @init35(%string* %tmp13, %string* %tmp9, i8 0, i64 %arg3, i32 %arg4)
  %tmp38 = load %string, %string* %tmp13, align 8
  store %string %tmp38, %string* %tmp12, align 8
  %tmp39 = bitcast %string* %tmp12 to i8*
  %tmp40 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp39)
  %tmp41 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 0
  %tmp42 = load i64, i64* %tmp41, align 8, !tbaa !175
  %tmp43 = icmp eq i64 %tmp42, 0
  br i1 %tmp43, label %bb44, label %bb48

bb44:                                             ; preds = %.split
  %tmp45 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp8, i64 %arg3, i32 %arg4)
  %tmp46 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp45, i64 0, i32 0
  %tmp47 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp46, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb48:                                             ; preds = %.split
  %tmp49 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 4
  %tmp50 = load i32, i32* %tmp49, align 4, !tbaa !178
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = icmp eq i32 %tmp50, %tmp51
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb48
  call void @halt(%string* %tmp7, i64 %arg3, i32 %arg4)
  br label %bb54

bb54:                                             ; preds = %bb48, %bb53
  %tmp55 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 2
  %tmp56 = load i8*, i8** %tmp55, align 8, !tbaa !179
  %tmp57 = trunc i64 %arg3 to i32
  %tmp58 = call i64 @c_string_to_uint64_t(i8* %tmp56, i8* nonnull %tmp11, i32 %tmp57, i32 %arg4)
  %tmp59 = load i8, i8* %tmp11, align 1, !tbaa !2
  %tmp60 = icmp eq i8 %tmp59, 0
  br i1 %tmp60, label %bb70, label %bb61

bb61:                                             ; preds = %bb54
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp9, %string* %tmp15, i64 %arg3, i32 %arg4)
  %tmp62 = load %string, %string* %tmp15, align 8
  store %string %tmp62, %string* %tmp14, align 8
  call void @chpl___PLUS_(%string* %tmp14, %string* %tmp5, %string* %tmp17, i64 %arg3, i32 %arg4)
  %tmp63 = load %string, %string* %tmp17, align 8
  store %string %tmp63, %string* %tmp16, align 8
  call void @_cast4(i64 64, %string* %tmp20, i64 %arg3, i32 %arg4)
  %tmp64 = load %string, %string* %tmp20, align 8
  store %string %tmp64, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp16, %string* %tmp19, %string* %tmp21, i64 %arg3, i32 %arg4)
  %tmp65 = load %string, %string* %tmp21, align 8
  call void @deinit23(%string* %tmp19, i64 %arg3, i32 %arg4)
  store %string %tmp65, %string* %tmp18, align 8
  call void @chpl___PLUS_(%string* %tmp18, %string* %tmp, %string* %tmp23, i64 %arg3, i32 %arg4)
  %tmp66 = load %string, %string* %tmp23, align 8
  store %string %tmp66, %string* %tmp22, align 8
  %tmp67 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp22, i64 %arg3, i32 %arg4)
  %tmp68 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp67, i64 0, i32 0
  %tmp69 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp68, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp22, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp18, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp16, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp14, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb70:                                             ; preds = %bb54
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb71:                                             ; preds = %bb44, %bb61, %bb70
  %.02 = phi i64 [ undef, %bb44 ], [ undef, %bb61 ], [ %tmp58, %bb70 ]
  %.01 = phi %chpl_Error_object* [ %tmp47, %bb44 ], [ %tmp69, %bb61 ], [ null, %bb70 ]
  %tmp72 = icmp eq %chpl_Error_object* %.01, null
  call void @deinit23(%string* %tmp9, i64 %arg3, i32 %arg4)
  br i1 %tmp72, label %bb74, label %bb73

bb73:                                             ; preds = %bb71
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  ret i64 %.02
}

define internal void @_command_line_cast8(i8* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg2, i32 %arg3)
  %tmp6 = load %string, %string* %tmp4, align 8
  store %string %tmp6, %string* %tmp, align 8
  call void @init35(%string* %tmp5, %string* %tmp, i8 1, i64 %arg2, i32 %arg3)
  %tmp7 = load %string, %string* %tmp5, align 8
  call void @deinit23(%string* %tmp, i64 %arg2, i32 %arg3)
  store %string %tmp7, %string* %arg1, align 8
  ret void
}

define internal void @_command_line_cast9(i8* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg2, i32 %arg3)
  %tmp6 = load %string, %string* %tmp4, align 8
  store %string %tmp6, %string* %tmp, align 8
  call void @init35(%string* %tmp5, %string* %tmp, i8 1, i64 %arg2, i32 %arg3)
  %tmp7 = load %string, %string* %tmp5, align 8
  call void @deinit23(%string* %tmp, i64 %arg2, i32 %arg3)
  store %string %tmp7, %string* %arg1, align 8
  ret void
}

define internal i64 @_command_line_cast10(i8* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca i8, align 1
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp24 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp24, %string* %tmp, align 8
  %tmp25 = bitcast %string* %tmp to i8*
  %tmp26 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp25)
  %tmp27 = load %string, %string* @_str_literal_1976, align 16
  store %string %tmp27, %string* %tmp5, align 8
  %tmp28 = bitcast %string* %tmp5 to i8*
  %tmp29 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp28)
  %tmp30 = load %string, %string* @_str_literal_1952, align 16
  store %string %tmp30, %string* %tmp6, align 8
  %tmp31 = bitcast %string* %tmp6 to i8*
  %tmp32 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp31)
  %tmp33 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp33, %string* %tmp7, align 8
  %tmp34 = load %string, %string* @_str_literal_3171, align 16
  store %string %tmp34, %string* %tmp8, align 8
  %tmp35 = bitcast %string* %tmp8 to i8*
  %tmp36 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp35)
  call void @_cast2(i8* %arg, %string* %tmp10, i64 %arg3, i32 %arg4)
  %tmp37 = load %string, %string* %tmp10, align 8
  store %string %tmp37, %string* %tmp9, align 8
  store i8 0, i8* %tmp11, align 1, !tbaa !8
  call void @init35(%string* %tmp13, %string* %tmp9, i8 0, i64 %arg3, i32 %arg4)
  %tmp38 = load %string, %string* %tmp13, align 8
  store %string %tmp38, %string* %tmp12, align 8
  %tmp39 = bitcast %string* %tmp12 to i8*
  %tmp40 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp39)
  %tmp41 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 0
  %tmp42 = load i64, i64* %tmp41, align 8, !tbaa !175
  %tmp43 = icmp eq i64 %tmp42, 0
  br i1 %tmp43, label %bb44, label %bb48

bb44:                                             ; preds = %.split
  %tmp45 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp8, i64 %arg3, i32 %arg4)
  %tmp46 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp45, i64 0, i32 0
  %tmp47 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp46, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb48:                                             ; preds = %.split
  %tmp49 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 4
  %tmp50 = load i32, i32* %tmp49, align 4, !tbaa !178
  %tmp51 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp52 = icmp eq i32 %tmp50, %tmp51
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb48
  call void @halt(%string* %tmp7, i64 %arg3, i32 %arg4)
  br label %bb54

bb54:                                             ; preds = %bb48, %bb53
  %tmp55 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 2
  %tmp56 = load i8*, i8** %tmp55, align 8, !tbaa !179
  %tmp57 = trunc i64 %arg3 to i32
  %tmp58 = call i64 @c_string_to_int64_t(i8* %tmp56, i8* nonnull %tmp11, i32 %tmp57, i32 %arg4)
  %tmp59 = load i8, i8* %tmp11, align 1, !tbaa !2
  %tmp60 = icmp eq i8 %tmp59, 0
  br i1 %tmp60, label %bb70, label %bb61

bb61:                                             ; preds = %bb54
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp9, %string* %tmp15, i64 %arg3, i32 %arg4)
  %tmp62 = load %string, %string* %tmp15, align 8
  store %string %tmp62, %string* %tmp14, align 8
  call void @chpl___PLUS_(%string* %tmp14, %string* %tmp5, %string* %tmp17, i64 %arg3, i32 %arg4)
  %tmp63 = load %string, %string* %tmp17, align 8
  store %string %tmp63, %string* %tmp16, align 8
  call void @_cast4(i64 64, %string* %tmp20, i64 %arg3, i32 %arg4)
  %tmp64 = load %string, %string* %tmp20, align 8
  store %string %tmp64, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp16, %string* %tmp19, %string* %tmp21, i64 %arg3, i32 %arg4)
  %tmp65 = load %string, %string* %tmp21, align 8
  call void @deinit23(%string* %tmp19, i64 %arg3, i32 %arg4)
  store %string %tmp65, %string* %tmp18, align 8
  call void @chpl___PLUS_(%string* %tmp18, %string* %tmp, %string* %tmp23, i64 %arg3, i32 %arg4)
  %tmp66 = load %string, %string* %tmp23, align 8
  store %string %tmp66, %string* %tmp22, align 8
  %tmp67 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp22, i64 %arg3, i32 %arg4)
  %tmp68 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp67, i64 0, i32 0
  %tmp69 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp68, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp22, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp18, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp16, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp14, i64 %arg3, i32 %arg4)
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb70:                                             ; preds = %bb54
  call void @deinit23(%string* %tmp12, i64 %arg3, i32 %arg4)
  br label %bb71

bb71:                                             ; preds = %bb44, %bb61, %bb70
  %.02 = phi i64 [ undef, %bb44 ], [ undef, %bb61 ], [ %tmp58, %bb70 ]
  %.01 = phi %chpl_Error_object* [ %tmp47, %bb44 ], [ %tmp69, %bb61 ], [ null, %bb70 ]
  %tmp72 = icmp eq %chpl_Error_object* %.01, null
  call void @deinit23(%string* %tmp9, i64 %arg3, i32 %arg4)
  br i1 %tmp72, label %bb74, label %bb73

bb73:                                             ; preds = %bb71
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  ret i64 %.02
}

define internal void @_command_line_cast11(i8* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg2, i32 %arg3)
  %tmp6 = load %string, %string* %tmp4, align 8
  store %string %tmp6, %string* %tmp, align 8
  call void @init35(%string* %tmp5, %string* %tmp, i8 1, i64 %arg2, i32 %arg3)
  %tmp7 = load %string, %string* %tmp5, align 8
  call void @deinit23(%string* %tmp, i64 %arg2, i32 %arg3)
  store %string %tmp7, %string* %arg1, align 8
  ret void
}

define internal i8 @_command_line_cast12(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = load %string, %string* %tmp4, align 8
  store %string %tmp5, %string* %tmp3, align 8
  %tmp6 = call i8 @_cast3(%string* %tmp3, %chpl_Error_object** %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp8 = icmp eq %chpl_Error_object* %tmp7, null
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  br i1 %tmp8, label %bb13, label %bb9

bb9:                                              ; preds = %.split
  %tmp10 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp11 = icmp eq %chpl_Error_object* %tmp10, null
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb9
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  br label %bb13

bb13:                                             ; preds = %.split, %bb12, %bb9
  ret i8 %tmp6
}

define internal i8 @_command_line_cast13(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = load %string, %string* %tmp4, align 8
  store %string %tmp5, %string* %tmp3, align 8
  %tmp6 = call i8 @_cast3(%string* %tmp3, %chpl_Error_object** %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp8 = icmp eq %chpl_Error_object* %tmp7, null
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  br i1 %tmp8, label %bb13, label %bb9

bb9:                                              ; preds = %.split
  %tmp10 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp11 = icmp eq %chpl_Error_object* %tmp10, null
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb9
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  br label %bb13

bb13:                                             ; preds = %.split, %bb12, %bb9
  ret i8 %tmp6
}

define internal i8 @_command_line_cast14(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_cast2(i8* %arg, %string* %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = load %string, %string* %tmp4, align 8
  store %string %tmp5, %string* %tmp3, align 8
  %tmp6 = call i8 @_cast3(%string* %tmp3, %chpl_Error_object** %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp8 = icmp eq %chpl_Error_object* %tmp7, null
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  br i1 %tmp8, label %bb13, label %bb9

bb9:                                              ; preds = %.split
  %tmp10 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp11 = icmp eq %chpl_Error_object* %tmp10, null
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb9
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  br label %bb13

bb13:                                             ; preds = %.split, %bb12, %bb9
  ret i8 %tmp6
}

define internal void @chpl__autoDestroy(%_distribution_DefaultDist* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit(%_distribution_DefaultDist* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit3(%_domain_DefaultRectangularDom_2_int64_t_F* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit2(%_domain_DefaultRectangularDom_1_int64_t_F* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__autoDestroy4(%ARRTY2* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit5(%ARRTY2* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__autoDestroy5(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit4(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__autoDestroy6(%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit6(%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_chpl_ModuleDeinit_object* @_new(i8* %arg, i8* %arg1, %chpl_chpl_ModuleDeinit_object* %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i8* @chpl_here_alloc(i64 32, i16 34, i64 %arg3, i32 %arg4)
  %tmp5 = bitcast i8* %tmp to %chpl_chpl_ModuleDeinit_object*
  %tmp6 = bitcast i8* %tmp to i32*
  store i32 4, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  store i32 1, i32* %tmp6, align 4, !tbaa !170
  %tmp9 = getelementptr inbounds i8, i8* %tmp, i64 8
  %tmp10 = bitcast i8* %tmp9 to i8**
  store i8* %arg, i8** %tmp10, align 8, !tbaa !180
  %tmp11 = getelementptr inbounds i8, i8* %tmp, i64 16
  %tmp12 = bitcast i8* %tmp11 to i8**
  store i8* %arg1, i8** %tmp12, align 8, !tbaa !183
  %tmp13 = getelementptr inbounds i8, i8* %tmp, i64 24
  %tmp14 = bitcast i8* %tmp13 to %chpl_chpl_ModuleDeinit_object**
  store %chpl_chpl_ModuleDeinit_object* %arg2, %chpl_chpl_ModuleDeinit_object** %tmp14, align 8, !tbaa !184
  store i32 4, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_chpl_ModuleDeinit_object* %tmp5
}

define internal void @chpl__auto_destroy_chpl_ModuleDeinit(%chpl_chpl_ModuleDeinit_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__init_ChapelDebugPrint(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelDebugPrint_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @228, i64 0, i64 0), i64 16, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelDebugPrint_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__testParOn, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_ChapelDistribution(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp2 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace, align 16
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp3, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp4 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @chpl_emptyLocales, align 16
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp4, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp2, align 8
  call void @chpl__autoDestroy5(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp2, i64 %arg, i32 %arg1)
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg, i32 %arg1)
  ret void
}

define internal void @chpl__init_ChapelDistribution(i64 %arg, i32 %arg3) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp4 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp5 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp6 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp7 = alloca %_distribution_DefaultDist, align 8
  %tmp8 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp9 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp10 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp11 = load i8, i8* @chpl__init_ChapelDistribution_p, align 1, !tbaa !2
  %tmp12 = icmp eq i8 %tmp11, 0
  br i1 %tmp12, label %bb13, label %bb31

bb13:                                             ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @240, i64 0, i64 0), i64 18, i64 %arg, i32 %arg3)
  %tmp14 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp15 = add i32 %tmp14, 1
  store i32 %tmp15, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelDistribution_p, align 1, !tbaa !8
  tail call void @chpl__init_List(i64 %arg, i32 %arg3)
  tail call void @chpl__init_Sort(i64 %arg, i32 %arg3)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @240, i64 0, i64 0), i8* bitcast (void (i64, i32)* @chpl__deinit_ChapelDistribution to i8*), i64 %arg, i32 %arg3)
  call void @chpl_build_bounded_range(i64 1, i64 0, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp16 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp17 = insertvalue %range_int64_t_bounded_F %tmp16, i64 %.unpack2, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp17, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp5, i64 %arg, i32 %arg3)
  %tmp18 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp5, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp18, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, align 8
  %tmp19 = call %chpl___RuntimeTypeInfo2 @chpl__buildDomainRuntimeType2(%_distribution_DefaultDist* @defaultDist)
  %tmp20 = extractvalue %chpl___RuntimeTypeInfo2 %tmp19, 0
  store %_distribution_DefaultDist %tmp20, %_distribution_DefaultDist* %tmp7, align 8
  call void @chpl__convertRuntimeTypeToValue(%_distribution_DefaultDist* %tmp7, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, i64 %arg, i32 %arg3)
  %tmp21 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp21, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  call void @chpl___ASSIGN_(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, i64 %arg, i32 %arg3)
  %tmp22 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp22, %_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace, align 16
  %tmp23 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace to i8*))
  %tmp24 = call %_domain_DefaultRectangularDom_1_int64_t_F* @chpl__ensureDomainExpr(%_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace)
  %tmp25 = call %chpl___RuntimeTypeInfo5 @chpl__buildArrayRuntimeType3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp24)
  %tmp26 = extractvalue %chpl___RuntimeTypeInfo5 %tmp25, 0
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp26, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp9, align 8
  call void @chpl__convertRuntimeTypeToValue5(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp9, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp10, i64 %arg, i32 %arg3)
  %tmp27 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp10, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp27, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @chpl_emptyLocales, align 16
  %tmp28 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @chpl_emptyLocales to i8*))
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, i64 %arg, i32 %arg3)
  %tmp29 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp30 = add i32 %tmp29, -1
  store i32 %tmp30, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb31

bb31:                                             ; preds = %.split, %bb13
  ret void
}

define internal void @deinit7(%chpl_BaseDist_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 2, i32 0
  tail call void @atomic_destroy_bool(i8* nonnull %tmp)
  %tmp3 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 1
  tail call void @deinit_chpl6(%list_BaseDom_chpl* %tmp3, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_BaseDist_object* @remove2(%chpl_BaseDist_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 0, i32 0
  %tmp5 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp6 = sext i32 %tmp5 to i64
  %tmp7 = mul nsw i64 %tmp6, 5
  %tmp8 = add nsw i64 %tmp7, 1
  %tmp9 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp8
  %tmp10 = bitcast void (i8*)** %tmp9 to i8 (%chpl_BaseDist_object*)**
  %tmp11 = load i8 (%chpl_BaseDist_object*)*, i8 (%chpl_BaseDist_object*)** %tmp10, align 8
  %tmp12 = tail call i8 %tmp11(%chpl_BaseDist_object* %arg)
  %tmp13 = icmp eq i8 %tmp12, 0
  br i1 %tmp13, label %bb24, label %bb14

bb14:                                             ; preds = %.split
  %tmp15 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 2, i32 0
  %tmp16 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp15, i1 true, i32 5)
  br i1 %tmp16, label %.lr.ph, label %bb19

.lr.ph:                                           ; preds = %bb14
  br label %bb17

bb17:                                             ; preds = %.lr.ph, %bb17
  tail call void @chpl_task_yield()
  %tmp18 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp15, i1 true, i32 5)
  br i1 %tmp18, label %bb17, label %._crit_edge

._crit_edge:                                      ; preds = %bb17
  br label %bb19

bb19:                                             ; preds = %._crit_edge, %bb14
  %tmp20 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 3
  store i8 1, i8* %tmp20, align 1, !tbaa !185
  %tmp21 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 1
  %tmp22 = tail call i64 @size_chpl(%list_BaseDom_chpl* %tmp21)
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp15, i1 false, i32 5)
  %tmp23 = icmp eq i64 %tmp22, 0
  %phitmp = select i1 %tmp23, %chpl_BaseDist_object* %arg, %chpl_BaseDist_object* null
  br label %bb24

bb24:                                             ; preds = %bb19, %.split
  %.1 = phi %chpl_BaseDist_object* [ %phitmp, %bb19 ], [ %arg, %.split ]
  ret %chpl_BaseDist_object* %.1
}

define internal void @dsiDestroyDist(%chpl_BaseDist_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal i8 @dsiTrackDomains(%chpl_BaseDist_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i8 1
}

define internal void @deinit8(%chpl_BaseDom_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 3, i32 0
  tail call void @atomic_destroy_bool(i8* nonnull %tmp)
  %tmp3 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 1
  tail call void @deinit_chpl5(%list_BaseArr_chpl* %tmp3, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_BaseDist_object* @dsiMyDist(%chpl_BaseDom_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %string, %string* @_str_literal_1599, align 16
  store %string %tmp3, %string* %tmp, align 8
  %tmp4 = bitcast %string* %tmp to i8*
  %tmp5 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp4)
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  ret %chpl_BaseDist_object* null
}

define internal void @remove3(%chpl_BaseDom_object* %arg, %_tuple_2_BaseDom_BaseDist* nonnull %arg15, i64 %arg16, i32 %arg17) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 0, i32 0
  %tmp18 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp19 = sext i32 %tmp18 to i64
  %tmp20 = mul nsw i64 %tmp19, 5
  %tmp21 = add nsw i64 %tmp20, 2
  %tmp22 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp21
  %tmp23 = bitcast void (i8*)** %tmp22 to %chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)**
  %tmp24 = load %chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)*, %chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)** %tmp23, align 8
  %tmp25 = tail call %chpl_BaseDist_object* %tmp24(%chpl_BaseDom_object* %arg, i64 %arg16, i32 %arg17)
  %tmp26 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %tmp25, i64 0, i32 0, i32 0
  %tmp27 = load i32, i32* %tmp26, align 4, !tbaa !170
  %tmp28 = sext i32 %tmp27 to i64
  %tmp29 = mul nsw i64 %tmp28, 5
  %tmp30 = add nsw i64 %tmp29, 1
  %tmp31 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp30
  %tmp32 = bitcast void (i8*)** %tmp31 to i8 (%chpl_BaseDist_object*)**
  %tmp33 = load i8 (%chpl_BaseDist_object*)*, i8 (%chpl_BaseDist_object*)** %tmp32, align 8
  %tmp34 = tail call i8 %tmp33(%chpl_BaseDist_object* %tmp25)
  %tmp35 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp36 = sext i32 %tmp35 to i64
  %tmp37 = mul nsw i64 %tmp36, 5
  %tmp38 = add nsw i64 %tmp37, 1
  %tmp39 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp38
  %tmp40 = bitcast void (i8*)** %tmp39 to i8 (%chpl_BaseDom_object*)**
  %tmp41 = load i8 (%chpl_BaseDom_object*)*, i8 (%chpl_BaseDom_object*)** %tmp40, align 8
  %tmp42 = tail call i8 %tmp41(%chpl_BaseDom_object* %arg)
  %tmp43 = icmp eq i8 %tmp34, %tmp42
  %tmp44 = zext i1 %tmp43 to i8
  tail call void @assert_chpl(i8 %tmp44, i64 %arg16, i32 %arg17)
  %tmp45 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp46 = sext i32 %tmp45 to i64
  %tmp47 = mul nsw i64 %tmp46, 5
  %tmp48 = add nsw i64 %tmp47, 2
  %tmp49 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp48
  %tmp50 = bitcast void (i8*)** %tmp49 to %chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)**
  %tmp51 = load %chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)*, %chpl_BaseDist_object* (%chpl_BaseDom_object*, i64, i32)** %tmp50, align 8
  %tmp52 = tail call %chpl_BaseDist_object* %tmp51(%chpl_BaseDom_object* %arg, i64 %arg16, i32 %arg17)
  %tmp53 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 3, i32 0
  %tmp54 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp53, i1 true, i32 5)
  br i1 %tmp54, label %.lr.ph12, label %bb57

.lr.ph12:                                         ; preds = %.split
  br label %bb55

bb55:                                             ; preds = %.lr.ph12, %bb55
  tail call void @chpl_task_yield()
  %tmp56 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp53, i1 true, i32 5)
  br i1 %tmp56, label %bb55, label %._crit_edge13

._crit_edge13:                                    ; preds = %bb55
  br label %bb57

bb57:                                             ; preds = %._crit_edge13, %.split
  %tmp58 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 1
  %tmp59 = tail call i64 @size_chpl2(%list_BaseArr_chpl* %tmp58)
  %tmp60 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 2
  %tmp61 = load i64, i64* %tmp60, align 8, !tbaa !189
  %tmp62 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg, i64 0, i32 4
  store i8 1, i8* %tmp62, align 1, !tbaa !190
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp53, i1 false, i32 5)
  %tmp63 = sub i64 0, %tmp61
  %tmp64 = icmp eq i64 %tmp59, %tmp63
  br i1 %tmp64, label %bb65, label %bb87

bb65:                                             ; preds = %bb57
  %tmp66 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp67 = sext i32 %tmp66 to i64
  %tmp68 = mul nsw i64 %tmp67, 5
  %tmp69 = add nsw i64 %tmp68, 1
  %tmp70 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp69
  %tmp71 = bitcast void (i8*)** %tmp70 to i8 (%chpl_BaseDom_object*)**
  %tmp72 = load i8 (%chpl_BaseDom_object*)*, i8 (%chpl_BaseDom_object*)** %tmp71, align 8
  %tmp73 = tail call i8 %tmp72(%chpl_BaseDom_object* %arg)
  %tmp74 = icmp eq i8 %tmp73, 0
  br i1 %tmp74, label %bb87, label %bb75

bb75:                                             ; preds = %bb65
  %tmp76 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %tmp52, i64 0, i32 2, i32 0
  %tmp77 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp76, i1 true, i32 5)
  br i1 %tmp77, label %.lr.ph, label %bb80

.lr.ph:                                           ; preds = %bb75
  br label %bb78

bb78:                                             ; preds = %.lr.ph, %bb78
  tail call void @chpl_task_yield()
  %tmp79 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp76, i1 true, i32 5)
  br i1 %tmp79, label %bb78, label %._crit_edge

._crit_edge:                                      ; preds = %bb78
  br label %bb80

bb80:                                             ; preds = %._crit_edge, %bb75
  %tmp81 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %tmp52, i64 0, i32 1
  tail call void @remove_chpl(%list_BaseDom_chpl* %tmp81, %chpl_BaseDom_object* %arg, i64 %arg16, i32 %arg17)
  %tmp82 = tail call i64 @size_chpl(%list_BaseDom_chpl* %tmp81)
  %tmp83 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %tmp52, i64 0, i32 3
  %tmp84 = load i8, i8* %tmp83, align 1, !tbaa !185
  %tmp85 = icmp eq i8 %tmp84, 0
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp76, i1 false, i32 5)
  %.06 = sext i1 %tmp85 to i64
  %tmp86 = icmp eq i64 %tmp82, %.06
  %phitmp14 = select i1 %tmp86, %chpl_BaseDist_object* %tmp52, %chpl_BaseDist_object* null
  br label %bb87

bb87:                                             ; preds = %bb57, %bb65, %bb80
  %.1 = phi %chpl_BaseDist_object* [ null, %bb57 ], [ %phitmp14, %bb80 ], [ null, %bb65 ]
  %.02 = phi %chpl_BaseDom_object* [ null, %bb57 ], [ %arg, %bb80 ], [ %arg, %bb65 ]
  %.repack = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %arg15, i64 0, i32 0
  store %chpl_BaseDom_object* %.02, %chpl_BaseDom_object** %.repack, align 8
  %.repack9 = getelementptr inbounds %_tuple_2_BaseDom_BaseDist, %_tuple_2_BaseDom_BaseDist* %arg15, i64 0, i32 1
  store %chpl_BaseDist_object* %.1, %chpl_BaseDist_object** %.repack9, align 8
  ret void
}

define internal i8 @dsiLinksDistribution(%chpl_BaseDom_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i8 1
}

define internal void @init11(%chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 %arg12, i32 %arg13) {
bb:
  %tmp = alloca %list_BaseArr_chpl, align 8
  %tmp14 = alloca %atomicbool, align 8
  %tmp15 = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp16 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0
  %tmp17 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp16)
  %tmp18 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 1, i32* %tmp18, align 4, !tbaa !170
  call void @init_chpl10(%list_BaseArr_chpl* %tmp, %chpl_listNode_BaseArr_chpl_object* null, %chpl_listNode_BaseArr_chpl_object* null)
  %tmp19 = bitcast %list_BaseArr_chpl* %tmp to i64*
  %.unpack11 = load i64, i64* %tmp19, align 8
  %.elt1 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %tmp, i64 0, i32 1
  %tmp20 = bitcast %chpl_listNode_BaseArr_chpl_object** %.elt1 to i64*
  %.unpack210 = load i64, i64* %tmp20, align 8
  %.elt3 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %tmp, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp21 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 1
  %tmp22 = bitcast %list_BaseArr_chpl* %tmp21 to i64*
  store i64 %.unpack11, i64* %tmp22, align 8
  %.repack6 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 1, i32 1
  %tmp23 = bitcast %chpl_listNode_BaseArr_chpl_object** %.repack6 to i64*
  store i64 %.unpack210, i64* %tmp23, align 8
  %.repack8 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 1, i32 2
  store i64 %.unpack4, i64* %.repack8, align 8
  %tmp24 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 2
  store i64 0, i64* %tmp24, align 8, !tbaa !189
  call void @atomic_init_bool(i8* nonnull %tmp15, i1 false)
  %tmp25 = load i8, i8* %tmp15, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp14, i8 %tmp25)
  %tmp26 = getelementptr inbounds %atomicbool, %atomicbool* %tmp14, i64 0, i32 0
  %tmp27 = load i8, i8* %tmp26, align 8
  %tmp28 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 3, i32 0
  store i8 %tmp27, i8* %tmp28, align 1
  %tmp29 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 4
  store i8 0, i8* %tmp29, align 1, !tbaa !190
  %tmp30 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 5
  store i64 -1, i64* %tmp30, align 8, !tbaa !191
  %tmp31 = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 9, i32* %tmp31, align 4, !tbaa !170
  ret void
}

define internal void @init12(%chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 %arg12, i32 %arg13) {
bb:
  %tmp = alloca %list_BaseArr_chpl, align 8
  %tmp14 = alloca %atomicbool, align 8
  %tmp15 = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp16 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0
  %tmp17 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp16)
  %tmp18 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 1, i32* %tmp18, align 4, !tbaa !170
  call void @init_chpl10(%list_BaseArr_chpl* %tmp, %chpl_listNode_BaseArr_chpl_object* null, %chpl_listNode_BaseArr_chpl_object* null)
  %tmp19 = bitcast %list_BaseArr_chpl* %tmp to i64*
  %.unpack11 = load i64, i64* %tmp19, align 8
  %.elt1 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %tmp, i64 0, i32 1
  %tmp20 = bitcast %chpl_listNode_BaseArr_chpl_object** %.elt1 to i64*
  %.unpack210 = load i64, i64* %tmp20, align 8
  %.elt3 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %tmp, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp21 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 1
  %tmp22 = bitcast %list_BaseArr_chpl* %tmp21 to i64*
  store i64 %.unpack11, i64* %tmp22, align 8
  %.repack6 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 1, i32 1
  %tmp23 = bitcast %chpl_listNode_BaseArr_chpl_object** %.repack6 to i64*
  store i64 %.unpack210, i64* %tmp23, align 8
  %.repack8 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 1, i32 2
  store i64 %.unpack4, i64* %.repack8, align 8
  %tmp24 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 2
  store i64 0, i64* %tmp24, align 8, !tbaa !189
  call void @atomic_init_bool(i8* nonnull %tmp15, i1 false)
  %tmp25 = load i8, i8* %tmp15, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp14, i8 %tmp25)
  %tmp26 = getelementptr inbounds %atomicbool, %atomicbool* %tmp14, i64 0, i32 0
  %tmp27 = load i8, i8* %tmp26, align 8
  %tmp28 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 3, i32 0
  store i8 %tmp27, i8* %tmp28, align 1
  %tmp29 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 4
  store i8 0, i8* %tmp29, align 1, !tbaa !190
  %tmp30 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 5
  store i64 -1, i64* %tmp30, align 8, !tbaa !191
  %tmp31 = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 11, i32* %tmp31, align 4, !tbaa !170
  ret void
}

define internal void @deinit9(%chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularDom_1_int64_t_F_object, %chpl_BaseRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit8(%chpl_BaseDom_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit10(%chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularDom_2_int64_t_F_object, %chpl_BaseRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit8(%chpl_BaseDom_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit11(%chpl_BaseArr_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal %chpl_BaseDom_object* @dsiGetBaseDom(%chpl_BaseArr_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %string, %string* @_str_literal_1633, align 16
  store %string %tmp3, %string* %tmp, align 8
  %tmp4 = bitcast %string* %tmp to i8*
  %tmp5 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp4)
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  ret %chpl_BaseDom_object* null
}

define internal void @remove4(%chpl_BaseArr_object* %arg, %_tuple_2_BaseArr_BaseDom* nonnull %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %arg, i64 0, i32 0, i32 0
  %tmp10 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp11 = sext i32 %tmp10 to i64
  %tmp12 = mul nsw i64 %tmp11, 5
  %tmp13 = add nsw i64 %tmp12, 1
  %tmp14 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp13
  %tmp15 = bitcast void (i8*)** %tmp14 to %chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)**
  %tmp16 = load %chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)*, %chpl_BaseDom_object* (%chpl_BaseArr_object*, i64, i32)** %tmp15, align 8
  %tmp17 = tail call %chpl_BaseDom_object* %tmp16(%chpl_BaseArr_object* %arg, i64 %arg8, i32 %arg9)
  %tmp18 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp17, i64 0, i32 3, i32 0
  %tmp19 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp18, i1 true, i32 5)
  br i1 %tmp19, label %.lr.ph, label %bb22

.lr.ph:                                           ; preds = %.split
  br label %bb20

bb20:                                             ; preds = %.lr.ph, %bb20
  tail call void @chpl_task_yield()
  %tmp21 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp18, i1 true, i32 5)
  br i1 %tmp21, label %bb20, label %._crit_edge

._crit_edge:                                      ; preds = %bb20
  br label %bb22

bb22:                                             ; preds = %._crit_edge, %.split
  %tmp23 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp17, i64 0, i32 1
  tail call void @remove_chpl2(%list_BaseArr_chpl* %tmp23, %chpl_BaseArr_object* %arg, i64 %arg8, i32 %arg9)
  %tmp24 = tail call i64 @size_chpl2(%list_BaseArr_chpl* %tmp23)
  %tmp25 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp17, i64 0, i32 2
  %tmp26 = load i64, i64* %tmp25, align 8, !tbaa !189
  %tmp27 = add nsw i64 %tmp26, %tmp24
  %tmp28 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %tmp17, i64 0, i32 4
  %tmp29 = load i8, i8* %tmp28, align 1, !tbaa !190
  %tmp30 = icmp eq i8 %tmp29, 0
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp18, i1 false, i32 5)
  %.02 = sext i1 %tmp30 to i64
  %tmp31 = icmp eq i64 %tmp27, %.02
  %.0 = select i1 %tmp31, %chpl_BaseDom_object* %tmp17, %chpl_BaseDom_object* null
  %.repack = getelementptr inbounds %_tuple_2_BaseArr_BaseDom, %_tuple_2_BaseArr_BaseDom* %arg7, i64 0, i32 0
  store %chpl_BaseArr_object* %arg, %chpl_BaseArr_object** %.repack, align 8
  %.repack5 = getelementptr inbounds %_tuple_2_BaseArr_BaseDom, %_tuple_2_BaseArr_BaseDom* %arg7, i64 0, i32 1
  store %chpl_BaseDom_object* %.0, %chpl_BaseDom_object** %.repack5, align 8
  ret void
}

define internal void @init13(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0
  %tmp5 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp)
  %tmp6 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 1, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 1
  store i64 %arg1, i64* %tmp7, align 8, !tbaa !192
  %tmp8 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 2
  store i8 %arg2, i8* %tmp8, align 1, !tbaa !193
  %tmp9 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 23, i32* %tmp9, align 4, !tbaa !170
  ret void
}

define internal void @init14(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0
  %tmp5 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp)
  %tmp6 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 1, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 1
  store i64 %arg1, i64* %tmp7, align 8, !tbaa !192
  %tmp8 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 2
  store i8 %arg2, i8* %tmp8, align 1, !tbaa !193
  %tmp9 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0
  store i32 14, i32* %tmp9, align 4, !tbaa !170
  ret void
}

define internal void @dsiReallocate(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load %string, %string* @_str_literal_1636, align 16
  store %string %tmp4, %string* %tmp, align 8
  %tmp5 = bitcast %string* %tmp to i8*
  %tmp6 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp5)
  call void @halt(%string* %tmp, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @dsiReallocate2(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load %string, %string* @_str_literal_1636, align 16
  store %string %tmp4, %string* %tmp, align 8
  %tmp5 = bitcast %string* %tmp to i8*
  %tmp6 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp5)
  call void @halt(%string* %tmp, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @dsiPostReallocate(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @dsiPostReallocate2(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @deinit12(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit11(%chpl_BaseArr_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit13(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit11(%chpl_BaseArr_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @init15(%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object, %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %arg, i64 0, i32 0
  tail call void @init14(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4)
  %tmp5 = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object, %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 15, i32* %tmp5, align 4, !tbaa !170
  ret void
}

define internal void @init16(%chpl_BaseRectangularArr_2_int64_t_F__real64_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_2_int64_t_F__real64_object, %chpl_BaseRectangularArr_2_int64_t_F__real64_object* %arg, i64 0, i32 0
  tail call void @init13(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %tmp, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4)
  %tmp5 = getelementptr inbounds %chpl_BaseRectangularArr_2_int64_t_F__real64_object, %chpl_BaseRectangularArr_2_int64_t_F__real64_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 24, i32* %tmp5, align 4, !tbaa !170
  ret void
}

define internal void @init17(%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object, %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %arg, i64 0, i32 0
  tail call void @init14(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4)
  %tmp5 = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object, %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 21, i32* %tmp5, align 4, !tbaa !170
  ret void
}

define internal void @init18(%chpl_BaseRectangularArr_1_int64_t_F_locale_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_locale_object, %chpl_BaseRectangularArr_1_int64_t_F_locale_object* %arg, i64 0, i32 0
  tail call void @init14(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4)
  %tmp5 = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_locale_object, %chpl_BaseRectangularArr_1_int64_t_F_locale_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 17, i32* %tmp5, align 4, !tbaa !170
  ret void
}

define internal void @init19(%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %arg, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object, %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %arg, i64 0, i32 0
  tail call void @init14(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i8 %arg2, i64 %arg3, i32 %arg4)
  %tmp5 = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object, %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 19, i32* %tmp5, align 4, !tbaa !170
  ret void
}

define internal void @deinit14(%chpl_BaseRectangularArr_1_int64_t_F_locale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_locale_object, %chpl_BaseRectangularArr_1_int64_t_F_locale_object* %arg, i64 0, i32 0
  tail call void @deinit13(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit15(%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object, %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %arg, i64 0, i32 0
  tail call void @deinit13(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit16(%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object, %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit13(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit17(%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object, %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %arg, i64 0, i32 0
  tail call void @deinit13(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit18(%chpl_BaseRectangularArr_2_int64_t_F__real64_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BaseRectangularArr_2_int64_t_F__real64_object, %chpl_BaseRectangularArr_2_int64_t_F__real64_object* %arg, i64 0, i32 0
  tail call void @deinit12(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @_delete_dist(%chpl_BaseDist_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @dsiDestroyDist(%chpl_BaseDist_object* %arg)
  %tmp = icmp eq %chpl_BaseDist_object* %arg, null
  br i1 %tmp, label %bb12, label %bb3

bb3:                                              ; preds = %.split
  %tmp4 = getelementptr inbounds %chpl_BaseDist_object, %chpl_BaseDist_object* %arg, i64 0, i32 0, i32 0
  %tmp5 = load i32, i32* %tmp4, align 4, !tbaa !170
  %tmp6 = sext i32 %tmp5 to i64
  %tmp7 = mul nsw i64 %tmp6, 5
  %tmp8 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp7
  %tmp9 = bitcast void (i8*)** %tmp8 to void (%chpl_BaseDist_object*, i64, i32)**
  %tmp10 = load void (%chpl_BaseDist_object*, i64, i32)*, void (%chpl_BaseDist_object*, i64, i32)** %tmp9, align 8
  tail call void %tmp10(%chpl_BaseDist_object* nonnull %arg, i64 %arg1, i32 %arg2)
  %tmp11 = bitcast %chpl_BaseDist_object* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp11, i64 %arg1, i32 %arg2)
  br label %bb12

bb12:                                             ; preds = %.split, %bb3
  ret void
}

define internal void @_delete_dom(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, null
  br i1 %tmp, label %bb6, label %bb3

bb3:                                              ; preds = %.split
  %tmp4 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit9(%chpl_BaseRectangularDom_1_int64_t_F_object* nonnull %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = bitcast %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp5, i64 %arg1, i32 %arg2)
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @_delete_dom2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, null
  br i1 %tmp, label %bb6, label %bb3

bb3:                                              ; preds = %.split
  %tmp4 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit10(%chpl_BaseRectangularDom_2_int64_t_F_object* nonnull %tmp4, i64 %arg1, i32 %arg2)
  %tmp5 = bitcast %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp5, i64 %arg1, i32 %arg2)
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @_delete_arr(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @dsiDestroyArr(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg1, i32 %arg2)
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 2
  %tmp3 = load i8, i8* %tmp, align 1, !tbaa !193
  %tmp4 = icmp eq i8 %tmp3, 0
  br i1 %tmp4, label %bb7, label %bb5

bb5:                                              ; preds = %.split
  %tmp6 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0
  tail call void @chpl_decRefCountsForDomainsInArrayEltTypes3(%chpl_BaseArr_object* %tmp6)
  br label %bb7

bb7:                                              ; preds = %bb5, %.split
  %tmp8 = icmp eq %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, null
  br i1 %tmp8, label %bb12, label %bb9

bb9:                                              ; preds = %bb7
  %tmp10 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit14(%chpl_BaseRectangularArr_1_int64_t_F_locale_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  %tmp11 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp11, i64 %arg1, i32 %arg2)
  br label %bb12

bb12:                                             ; preds = %bb7, %bb9
  ret void
}

define internal void @_delete_arr2(%ARRTY* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @dsiDestroyArr2(%ARRTY* %arg, i64 %arg1, i32 %arg2)
  %tmp = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0, i32 0, i32 0, i32 2
  %tmp3 = load i8, i8* %tmp, align 1, !tbaa !193
  %tmp4 = icmp eq i8 %tmp3, 0
  br i1 %tmp4, label %bb7, label %bb5

bb5:                                              ; preds = %.split
  %tmp6 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0, i32 0, i32 0
  tail call void @chpl_decRefCountsForDomainsInArrayEltTypes(%chpl_BaseArr_object* %tmp6)
  br label %bb7

bb7:                                              ; preds = %bb5, %.split
  %tmp8 = icmp eq %ARRTY* %arg, null
  br i1 %tmp8, label %bb12, label %bb9

bb9:                                              ; preds = %bb7
  %tmp10 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0
  tail call void @deinit18(%chpl_BaseRectangularArr_2_int64_t_F__real64_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  %tmp11 = bitcast %ARRTY* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp11, i64 %arg1, i32 %arg2)
  br label %bb12

bb12:                                             ; preds = %bb7, %bb9
  ret void
}

define internal void @_delete_arr3(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @dsiDestroyArr5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg1, i32 %arg2)
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 2
  %tmp3 = load i8, i8* %tmp, align 1, !tbaa !193
  %tmp4 = icmp eq i8 %tmp3, 0
  br i1 %tmp4, label %bb7, label %bb5

bb5:                                              ; preds = %.split
  %tmp6 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0
  tail call void @chpl_decRefCountsForDomainsInArrayEltTypes2(%chpl_BaseArr_object* %tmp6)
  br label %bb7

bb7:                                              ; preds = %bb5, %.split
  %tmp8 = icmp eq %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, null
  br i1 %tmp8, label %bb12, label %bb9

bb9:                                              ; preds = %bb7
  %tmp10 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit15(%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* nonnull %tmp10, i64 %arg1, i32 %arg2)
  %tmp11 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp11, i64 %arg1, i32 %arg2)
  br label %bb12

bb12:                                             ; preds = %bb7, %bb9
  ret void
}

define internal void @chpl_assignDomainWithGetSetIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg40, i64 %arg41, i32 %arg42) {
bb:
  %tmp = alloca %string, align 8
  %tmp43 = alloca %string, align 8
  %tmp44 = alloca %string, align 8
  %tmp45 = alloca %string, align 8
  %tmp46 = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp47 = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp48 = alloca %range_int64_t_bounded_F, align 8
  %tmp49 = alloca %range_int64_t_bounded_F, align 8
  %tmp50 = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp51 = alloca [1 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp52 = load %string, %string* @_str_literal_3197, align 16
  store %string %tmp52, %string* %tmp, align 8
  %tmp53 = bitcast %string* %tmp to i8*
  %tmp54 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp53)
  %tmp55 = load %string, %string* @_str_literal_1664, align 16
  store %string %tmp55, %string* %tmp43, align 8
  %tmp56 = bitcast %string* %tmp43 to i8*
  %tmp57 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp56)
  %tmp58 = load %string, %string* @_str_literal_3195, align 16
  store %string %tmp58, %string* %tmp44, align 8
  %tmp59 = bitcast %string* %tmp44 to i8*
  %tmp60 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp59)
  %tmp61 = load %string, %string* @_str_literal_1662, align 16
  store %string %tmp61, %string* %tmp45, align 8
  %tmp62 = bitcast %string* %tmp45 to i8*
  %tmp63 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp62)
  %tmp64 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 1, i32 0
  %tmp65 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp64, align 8, !tbaa !194
  %.03.in35 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp65, null
  br i1 %.03.in35, label %bb93, label %.lr.ph38

.lr.ph38:                                         ; preds = %.split
  br label %bb66

bb66:                                             ; preds = %.lr.ph38, %bb80
  %.03.in.in36 = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp65, %.lr.ph38 ], [ %tmp92, %bb80 ]
  %tmp67 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.03.in.in36, i64 0, i32 1
  %tmp68 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp67, align 8, !tbaa !195
  %tmp69 = icmp eq %chpl_BaseArr_object* %tmp68, null
  br i1 %tmp69, label %bb77, label %bb70

bb70:                                             ; preds = %bb66
  %tmp71 = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %tmp68, i64 0, i32 0, i32 0
  %tmp72 = load i32, i32* %tmp71, align 4, !tbaa !170
  %tmp73 = icmp sgt i32 %tmp72, 13
  %tmp74 = icmp ult i32 %tmp72, 23
  %tmp75 = and i1 %tmp73, %tmp74
  %tmp76 = bitcast %chpl_BaseArr_object* %tmp68 to %chpl_BaseArrOverRectangularDom_1_int64_t_F_object*
  %.01 = select i1 %tmp75, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp76, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* null
  br label %bb77

bb77:                                             ; preds = %bb70, %bb66
  %.05 = phi %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* [ %.01, %bb70 ], [ null, %bb66 ]
  %tmp78 = icmp eq %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %.05, null
  br i1 %tmp78, label %bb79, label %bb80

bb79:                                             ; preds = %bb77
  call void @halt3(%string* %tmp45, %string* %tmp44, %string* %tmp43, %string* %tmp, i64 %arg41, i32 %arg42)
  br label %bb80

bb80:                                             ; preds = %bb79, %bb77
  call void @getIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %arg40, [1 x %range_int64_t_bounded_F]* %tmp46)
  %.elt13 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp46, i64 0, i64 0, i32 0
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp81 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack14, 0
  %.elt15 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp46, i64 0, i64 0, i32 1
  %.unpack16 = load i64, i64* %.elt15, align 8
  %tmp82 = insertvalue %range_int64_t_bounded_F %tmp81, i64 %.unpack16, 1
  call void @init22(%range_int64_t_bounded_F* %tmp48, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt17 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp48, i64 0, i32 0
  %.unpack18 = load i64, i64* %.elt17, align 8
  %.elt19 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp48, i64 0, i32 1
  %.unpack20 = load i64, i64* %.elt19, align 8
  %.repack21 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp47, i64 0, i64 0, i32 0
  store i64 %.unpack18, i64* %.repack21, align 8
  %.repack23 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp47, i64 0, i64 0, i32 1
  store i64 %.unpack20, i64* %.repack23, align 8
  call void @safeCast(%range_int64_t_bounded_F %tmp82, %range_int64_t_bounded_F* %tmp49)
  %.elt25 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp49, i64 0, i32 0
  %.unpack26 = load i64, i64* %.elt25, align 8
  %.elt27 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp49, i64 0, i32 1
  %.unpack28 = load i64, i64* %.elt27, align 8
  %.repack29 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp47, i64 0, i64 0, i32 0
  store i64 %.unpack26, i64* %.repack29, align 8
  %.repack31 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp47, i64 0, i64 0, i32 1
  store i64 %.unpack28, i64* %.repack31, align 8
  %tmp83 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %.05, i64 0, i32 0, i32 0, i32 0
  %tmp84 = load i32, i32* %tmp83, align 4, !tbaa !170
  %tmp85 = sext i32 %tmp84 to i64
  %tmp86 = mul nsw i64 %tmp85, 5
  %tmp87 = add nsw i64 %tmp86, 2
  %tmp88 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp87
  %tmp89 = bitcast void (i8*)** %tmp88 to void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)**
  %tmp90 = load void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)*, void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*, [1 x %range_int64_t_bounded_F]*, i64, i32)** %tmp89, align 8
  call void %tmp90(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %.05, [1 x %range_int64_t_bounded_F]* nonnull %tmp47, i64 %arg41, i32 %arg42)
  %tmp91 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.03.in.in36, i64 0, i32 2
  %tmp92 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp91, align 8, !tbaa !197
  %.03.in = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp92, null
  br i1 %.03.in, label %._crit_edge39, label %bb66

._crit_edge39:                                    ; preds = %bb80
  br label %bb93

bb93:                                             ; preds = %._crit_edge39, %.split
  call void @getIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %arg40, [1 x %range_int64_t_bounded_F]* %tmp51)
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp51, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt8 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp51, i64 0, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp50, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack11 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp50, i64 0, i64 0, i32 1
  store i64 %.unpack9, i64* %.repack11, align 8
  call void @dsiSetIndices2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, [1 x %range_int64_t_bounded_F]* %tmp50)
  %tmp94 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp64, align 8, !tbaa !194
  %.06.in33 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp94, null
  br i1 %.06.in33, label %bb114, label %.lr.ph

.lr.ph:                                           ; preds = %bb93
  br label %bb95

bb95:                                             ; preds = %.lr.ph, %bb95
  %.0734 = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp94, %.lr.ph ], [ %tmp113, %bb95 ]
  %tmp96 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0734, i64 0, i32 1
  %tmp97 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp96, align 8, !tbaa !195
  %tmp98 = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %tmp97, i64 0, i32 0, i32 0
  %tmp99 = load i32, i32* %tmp98, align 4, !tbaa !170
  %tmp100 = icmp sgt i32 %tmp99, 13
  %tmp101 = icmp ult i32 %tmp99, 23
  %tmp102 = and i1 %tmp100, %tmp101
  %tmp103 = bitcast %chpl_BaseArr_object* %tmp97 to %chpl_BaseArrOverRectangularDom_1_int64_t_F_object*
  %.0 = select i1 %tmp102, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %tmp103, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* null
  %tmp104 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_1_int64_t_F_object, %chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %.0, i64 0, i32 0, i32 0, i32 0
  %tmp105 = load i32, i32* %tmp104, align 4, !tbaa !170
  %tmp106 = sext i32 %tmp105 to i64
  %tmp107 = mul nsw i64 %tmp106, 5
  %tmp108 = add nsw i64 %tmp107, 3
  %tmp109 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp108
  %tmp110 = bitcast void (i8*)** %tmp109 to void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)**
  %tmp111 = load void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)*, void (%chpl_BaseArrOverRectangularDom_1_int64_t_F_object*)** %tmp110, align 8
  call void %tmp111(%chpl_BaseArrOverRectangularDom_1_int64_t_F_object* %.0)
  %tmp112 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0734, i64 0, i32 2
  %tmp113 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp112, align 8, !tbaa !197
  %.06.in = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp113, null
  br i1 %.06.in, label %._crit_edge, label %bb95

._crit_edge:                                      ; preds = %bb95
  br label %bb114

bb114:                                            ; preds = %._crit_edge, %bb93
  ret void
}

define internal void @chpl_assignDomainWithGetSetIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg68, i64 %arg69, i32 %arg70) {
bb:
  %tmp = alloca %string, align 8
  %tmp71 = alloca %string, align 8
  %tmp72 = alloca %string, align 8
  %tmp73 = alloca %string, align 8
  %tmp74 = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp75 = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp76 = alloca %range_int64_t_bounded_F, align 8
  %tmp77 = alloca %range_int64_t_bounded_F, align 8
  %tmp78 = alloca %range_int64_t_bounded_F, align 8
  %tmp79 = alloca %range_int64_t_bounded_F, align 8
  %tmp80 = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp81 = alloca [2 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp82 = load %string, %string* @_str_literal_3256, align 16
  store %string %tmp82, %string* %tmp, align 8
  %tmp83 = bitcast %string* %tmp to i8*
  %tmp84 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp83)
  %tmp85 = load %string, %string* @_str_literal_1664, align 16
  store %string %tmp85, %string* %tmp71, align 8
  %tmp86 = bitcast %string* %tmp71 to i8*
  %tmp87 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp86)
  %tmp88 = load %string, %string* @_str_literal_3254, align 16
  store %string %tmp88, %string* %tmp72, align 8
  %tmp89 = bitcast %string* %tmp72 to i8*
  %tmp90 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp89)
  %tmp91 = load %string, %string* @_str_literal_1662, align 16
  store %string %tmp91, %string* %tmp73, align 8
  %tmp92 = bitcast %string* %tmp73 to i8*
  %tmp93 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp92)
  %tmp94 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 1, i32 0
  %tmp95 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp94, align 8, !tbaa !194
  %.03.in63 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp95, null
  br i1 %.03.in63, label %bb126, label %.lr.ph66

.lr.ph66:                                         ; preds = %.split
  br label %bb96

bb96:                                             ; preds = %.lr.ph66, %bb110
  %.03.in.in64 = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp95, %.lr.ph66 ], [ %tmp125, %bb110 ]
  %tmp97 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.03.in.in64, i64 0, i32 1
  %tmp98 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp97, align 8, !tbaa !195
  %tmp99 = icmp eq %chpl_BaseArr_object* %tmp98, null
  br i1 %tmp99, label %bb107, label %bb100

bb100:                                            ; preds = %bb96
  %tmp101 = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %tmp98, i64 0, i32 0, i32 0
  %tmp102 = load i32, i32* %tmp101, align 4, !tbaa !170
  %tmp103 = icmp sgt i32 %tmp102, 22
  %tmp104 = icmp ult i32 %tmp102, 26
  %tmp105 = and i1 %tmp103, %tmp104
  %tmp106 = bitcast %chpl_BaseArr_object* %tmp98 to %chpl_BaseArrOverRectangularDom_2_int64_t_F_object*
  %.01 = select i1 %tmp105, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %tmp106, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* null
  br label %bb107

bb107:                                            ; preds = %bb100, %bb96
  %.05 = phi %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* [ %.01, %bb100 ], [ null, %bb96 ]
  %tmp108 = icmp eq %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %.05, null
  br i1 %tmp108, label %bb109, label %bb110

bb109:                                            ; preds = %bb107
  call void @halt3(%string* %tmp73, %string* %tmp72, %string* %tmp71, %string* %tmp, i64 %arg69, i32 %arg70)
  br label %bb110

bb110:                                            ; preds = %bb109, %bb107
  call void @getIndices(%_domain_DefaultRectangularDom_2_int64_t_F* %arg68, [2 x %range_int64_t_bounded_F]* %tmp74)
  %.elt21 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp74, i64 0, i64 0, i32 0
  %.unpack22 = load i64, i64* %.elt21, align 8
  %tmp111 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack22, 0
  %.elt23 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp74, i64 0, i64 0, i32 1
  %.unpack24 = load i64, i64* %.elt23, align 8
  %tmp112 = insertvalue %range_int64_t_bounded_F %tmp111, i64 %.unpack24, 1
  %.elt25 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp74, i64 0, i64 1, i32 0
  %.unpack26 = load i64, i64* %.elt25, align 8
  %tmp113 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack26, 0
  %.elt27 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp74, i64 0, i64 1, i32 1
  %.unpack28 = load i64, i64* %.elt27, align 8
  %tmp114 = insertvalue %range_int64_t_bounded_F %tmp113, i64 %.unpack28, 1
  call void @init22(%range_int64_t_bounded_F* %tmp76, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt29 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 0
  %.unpack30 = load i64, i64* %.elt29, align 8
  %.elt31 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 1
  %.unpack32 = load i64, i64* %.elt31, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp77, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt33 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp77, i64 0, i32 0
  %.unpack34 = load i64, i64* %.elt33, align 8
  %.elt35 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp77, i64 0, i32 1
  %.unpack36 = load i64, i64* %.elt35, align 8
  %.repack37 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 0, i32 0
  store i64 %.unpack30, i64* %.repack37, align 8
  %.repack39 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 0, i32 1
  store i64 %.unpack32, i64* %.repack39, align 8
  %tmp115 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 1
  %.repack41 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp115, i64 0, i32 0
  store i64 %.unpack34, i64* %.repack41, align 8
  %.repack43 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 1, i32 1
  store i64 %.unpack36, i64* %.repack43, align 8
  call void @safeCast(%range_int64_t_bounded_F %tmp112, %range_int64_t_bounded_F* %tmp78)
  %.elt45 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp78, i64 0, i32 0
  %.unpack46 = load i64, i64* %.elt45, align 8
  %.elt47 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp78, i64 0, i32 1
  %.unpack48 = load i64, i64* %.elt47, align 8
  %.repack49 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 0, i32 0
  store i64 %.unpack46, i64* %.repack49, align 8
  %.repack51 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 0, i32 1
  store i64 %.unpack48, i64* %.repack51, align 8
  call void @safeCast(%range_int64_t_bounded_F %tmp114, %range_int64_t_bounded_F* %tmp79)
  %.elt53 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp79, i64 0, i32 0
  %.unpack54 = load i64, i64* %.elt53, align 8
  %.elt55 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp79, i64 0, i32 1
  %.unpack56 = load i64, i64* %.elt55, align 8
  %.repack57 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp115, i64 0, i32 0
  store i64 %.unpack54, i64* %.repack57, align 8
  %.repack59 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp75, i64 0, i64 1, i32 1
  store i64 %.unpack56, i64* %.repack59, align 8
  %tmp116 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %.05, i64 0, i32 0, i32 0, i32 0
  %tmp117 = load i32, i32* %tmp116, align 4, !tbaa !170
  %tmp118 = sext i32 %tmp117 to i64
  %tmp119 = mul nsw i64 %tmp118, 5
  %tmp120 = add nsw i64 %tmp119, 2
  %tmp121 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp120
  %tmp122 = bitcast void (i8*)** %tmp121 to void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*, [2 x %range_int64_t_bounded_F]*, i64, i32)**
  %tmp123 = load void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*, [2 x %range_int64_t_bounded_F]*, i64, i32)*, void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*, [2 x %range_int64_t_bounded_F]*, i64, i32)** %tmp122, align 8
  call void %tmp123(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %.05, [2 x %range_int64_t_bounded_F]* nonnull %tmp75, i64 %arg69, i32 %arg70)
  %tmp124 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.03.in.in64, i64 0, i32 2
  %tmp125 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp124, align 8, !tbaa !197
  %.03.in = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp125, null
  br i1 %.03.in, label %._crit_edge67, label %bb96

._crit_edge67:                                    ; preds = %bb110
  br label %bb126

bb126:                                            ; preds = %._crit_edge67, %.split
  call void @getIndices(%_domain_DefaultRectangularDom_2_int64_t_F* %arg68, [2 x %range_int64_t_bounded_F]* %tmp81)
  %.elt = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp81, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt8 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp81, i64 0, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp80, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack11 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp80, i64 0, i64 0, i32 1
  store i64 %.unpack9, i64* %.repack11, align 8
  %.elt13 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp81, i64 0, i64 1, i32 0
  %.unpack14 = load i64, i64* %.elt13, align 8
  %.elt15 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp81, i64 0, i64 1, i32 1
  %.unpack16 = load i64, i64* %.elt15, align 8
  %.repack17 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp80, i64 0, i64 1, i32 0
  store i64 %.unpack14, i64* %.repack17, align 8
  %.repack19 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp80, i64 0, i64 1, i32 1
  store i64 %.unpack16, i64* %.repack19, align 8
  call void @dsiSetIndices(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, [2 x %range_int64_t_bounded_F]* %tmp80)
  %tmp127 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp94, align 8, !tbaa !194
  %.06.in61 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp127, null
  br i1 %.06.in61, label %bb147, label %.lr.ph

.lr.ph:                                           ; preds = %bb126
  br label %bb128

bb128:                                            ; preds = %.lr.ph, %bb128
  %.0762 = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp127, %.lr.ph ], [ %tmp146, %bb128 ]
  %tmp129 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0762, i64 0, i32 1
  %tmp130 = load %chpl_BaseArr_object*, %chpl_BaseArr_object** %tmp129, align 8, !tbaa !195
  %tmp131 = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %tmp130, i64 0, i32 0, i32 0
  %tmp132 = load i32, i32* %tmp131, align 4, !tbaa !170
  %tmp133 = icmp sgt i32 %tmp132, 22
  %tmp134 = icmp ult i32 %tmp132, 26
  %tmp135 = and i1 %tmp133, %tmp134
  %tmp136 = bitcast %chpl_BaseArr_object* %tmp130 to %chpl_BaseArrOverRectangularDom_2_int64_t_F_object*
  %.0 = select i1 %tmp135, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %tmp136, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* null
  %tmp137 = getelementptr inbounds %chpl_BaseArrOverRectangularDom_2_int64_t_F_object, %chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %.0, i64 0, i32 0, i32 0, i32 0
  %tmp138 = load i32, i32* %tmp137, align 4, !tbaa !170
  %tmp139 = sext i32 %tmp138 to i64
  %tmp140 = mul nsw i64 %tmp139, 5
  %tmp141 = add nsw i64 %tmp140, 3
  %tmp142 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp141
  %tmp143 = bitcast void (i8*)** %tmp142 to void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*)**
  %tmp144 = load void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*)*, void (%chpl_BaseArrOverRectangularDom_2_int64_t_F_object*)** %tmp143, align 8
  call void %tmp144(%chpl_BaseArrOverRectangularDom_2_int64_t_F_object* %.0)
  %tmp145 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0762, i64 0, i32 2
  %tmp146 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp145, align 8, !tbaa !197
  %.06.in = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp146, null
  br i1 %.06.in, label %._crit_edge, label %bb128

._crit_edge:                                      ; preds = %bb128
  br label %bb147

bb147:                                            ; preds = %._crit_edge, %bb126
  ret void
}

define internal void @chpl__init_ChapelDynDispHack(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = load i8, i8* @chpl__init_ChapelDynDispHack_p, align 1, !tbaa !2
  %tmp3 = icmp eq i8 %tmp2, 0
  br i1 %tmp3, label %bb4, label %bb15

bb4:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @249, i64 0, i64 0), i64 17, i64 %arg, i32 %arg1)
  %tmp5 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp6 = add i32 %tmp5, 1
  store i32 %tmp6, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelDynDispHack_p, align 1, !tbaa !8
  %tmp7 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp8 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp7, i32 -2)
  %tmp9 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp8, i32* %tmp9, align 8, !tbaa !110
  %tmp10 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg, i32 %arg1)
  %tmp11 = call i64 @id(%chpl_locale_object* %tmp10, i64 %arg, i32 %arg1)
  %.lobit = lshr i64 %tmp11, 63
  %tmp12 = trunc i64 %.lobit to i8
  %.not = xor i8 %tmp12, 1
  call void @assert_chpl(i8 %.not, i64 %arg, i32 %arg1)
  %tmp13 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp14 = add i32 %tmp13, -1
  store i32 %tmp14, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb15

bb15:                                             ; preds = %.split, %bb4
  ret void
}

define internal void @chpl__init_ChapelError(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelError_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @248, i64 0, i64 0), i64 11, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelError_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__auto_destroy_Error(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @message(%chpl_Error_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = load %string, %string* @_str_literal_1909, align 16
  store %string %tmp5, %string* %tmp, align 8
  call void @init35(%string* %tmp4, %string* %tmp, i8 1, i64 %arg2, i32 %arg3)
  %tmp6 = load %string, %string* %tmp4, align 8
  store %string %tmp6, %string* %arg1, align 8
  ret void
}

define internal %chpl_NilThrownError_object* @_new2(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i8* @chpl_here_alloc(i64 32, i16 43, i64 %arg, i32 %arg1)
  %tmp2 = bitcast i8* %tmp to %chpl_NilThrownError_object*
  %tmp3 = bitcast i8* %tmp to i32*
  store i32 27, i32* %tmp3, align 4, !tbaa !170
  %tmp4 = bitcast i8* %tmp to %chpl_object_object*
  %tmp5 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp4)
  %tmp6 = bitcast i8* %tmp to i32*
  store i32 1, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = getelementptr inbounds i8, i8* %tmp, i64 8
  %tmp8 = bitcast i8* %tmp7 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp8, align 8, !tbaa !198
  %tmp9 = getelementptr inbounds i8, i8* %tmp, i64 16
  %tmp10 = bitcast i8* %tmp9 to i64*
  store i64 0, i64* %tmp10, align 8, !tbaa !200
  %tmp11 = getelementptr inbounds i8, i8* %tmp, i64 24
  %tmp12 = bitcast i8* %tmp11 to i32*
  store i32 0, i32* %tmp12, align 4, !tbaa !201
  store i32 27, i32* %tmp3, align 4, !tbaa !170
  ret %chpl_NilThrownError_object* %tmp2
}

define internal void @chpl__auto_destroy_NilThrownError(%chpl_NilThrownError_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @message2(%chpl_NilThrownError_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = load %string, %string* @_str_literal_1911, align 16
  store %string %tmp5, %string* %tmp, align 8
  call void @init35(%string* %tmp4, %string* %tmp, i8 1, i64 %arg2, i32 %arg3)
  %tmp6 = load %string, %string* %tmp4, align 8
  store %string %tmp6, %string* %arg1, align 8
  ret void
}

define internal %chpl_IllegalArgumentError_object* @_new3(%string* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  %tmp3 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 96, i16 10, i64 %arg1, i32 %arg2)
  %tmp5 = bitcast i8* %tmp4 to %chpl_IllegalArgumentError_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 28, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  call void @init34(%string* %tmp, i64 %arg1, i32 %arg2)
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %string*
  %tmp19 = load %string, %string* %tmp, align 8
  store %string %tmp19, %string* %tmp18, align 8
  call void @init35(%string* %tmp3, %string* %arg, i8 1, i64 %arg1, i32 %arg2)
  %tmp20 = getelementptr inbounds i8, i8* %tmp4, i64 64
  %tmp21 = bitcast i8* %tmp20 to %string*
  %tmp22 = load %string, %string* %tmp3, align 8
  store %string %tmp22, %string* %tmp21, align 8
  store i32 28, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_IllegalArgumentError_object* %tmp5
}

define internal void @chpl__auto_destroy_IllegalArgumentError(%chpl_IllegalArgumentError_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %arg, i64 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  %tmp3 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %arg, i64 0, i32 1
  tail call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @message3(%chpl_IllegalArgumentError_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp11 = load %string, %string* @_str_literal_1917, align 16
  store %string %tmp11, %string* %tmp, align 8
  %tmp12 = bitcast %string* %tmp to i8*
  %tmp13 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp12)
  %tmp14 = load %string, %string* @_str_literal_1915, align 16
  store %string %tmp14, %string* %tmp4, align 8
  %tmp15 = bitcast %string* %tmp4 to i8*
  %tmp16 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp15)
  %tmp17 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %arg, i64 0, i32 1
  %tmp18 = getelementptr inbounds %string, %string* %tmp17, i64 0, i32 0
  %tmp19 = load i64, i64* %tmp18, align 8, !tbaa !175
  %tmp20 = icmp eq i64 %tmp19, 0
  br i1 %tmp20, label %bb21, label %bb24

bb21:                                             ; preds = %.split
  %tmp22 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %arg, i64 0, i32 2
  call void @init35(%string* %tmp5, %string* %tmp22, i8 1, i64 %arg2, i32 %arg3)
  %tmp23 = load %string, %string* %tmp5, align 8
  br label %bb29

bb24:                                             ; preds = %.split
  call void @chpl___PLUS_(%string* %tmp4, %string* %tmp17, %string* %tmp7, i64 %arg2, i32 %arg3)
  %tmp25 = load %string, %string* %tmp7, align 8
  store %string %tmp25, %string* %tmp6, align 8
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp, %string* %tmp9, i64 %arg2, i32 %arg3)
  %tmp26 = load %string, %string* %tmp9, align 8
  store %string %tmp26, %string* %tmp8, align 8
  %tmp27 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %arg, i64 0, i32 2
  call void @chpl___PLUS_(%string* %tmp8, %string* %tmp27, %string* %tmp10, i64 %arg2, i32 %arg3)
  %tmp28 = load %string, %string* %tmp10, align 8
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp6, i64 %arg2, i32 %arg3)
  br label %bb29

bb29:                                             ; preds = %bb24, %bb21
  %.0 = phi %string [ %tmp23, %bb21 ], [ %tmp28, %bb24 ]
  store %string %.0, %string* %arg1, align 8
  ret void
}

define internal void @_construct_chpl_TaskErrors(%chpl_Error_object* %arg, %atomicbool* nonnull %arg1, %chpl_TaskErrors* nonnull %arg2, %chpl_TaskErrors* nonnull %arg3) {
bb:
  %tmp = alloca %chpl_TaskErrors, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load %chpl_TaskErrors, %chpl_TaskErrors* %arg2, align 8
  store %chpl_TaskErrors %tmp4, %chpl_TaskErrors* %tmp, align 8
  %tmp5 = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %tmp, i64 0, i32 0
  store %chpl_Error_object* %arg, %chpl_Error_object** %tmp5, align 8, !tbaa !167
  %tmp6 = getelementptr inbounds %atomicbool, %atomicbool* %arg1, i64 0, i32 0
  %tmp7 = load i8, i8* %tmp6, align 1
  %tmp8 = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %tmp, i64 0, i32 1, i32 0
  store i8 %tmp7, i8* %tmp8, align 8
  %tmp9 = load %chpl_TaskErrors, %chpl_TaskErrors* %tmp, align 8
  store %chpl_TaskErrors %tmp9, %chpl_TaskErrors* %arg3, align 8
  ret void
}

define internal void @append(%chpl_TaskErrors* nonnull %arg, %chpl_Error_object* %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %arg, i64 0, i32 1, i32 0
  %tmp2 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp, i1 true, i32 5)
  br i1 %tmp2, label %.lr.ph, label %bb5

.lr.ph:                                           ; preds = %.split
  br label %bb3

bb3:                                              ; preds = %.lr.ph, %bb3
  tail call void @chpl_task_yield()
  %tmp4 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp, i1 true, i32 5)
  br i1 %tmp4, label %bb3, label %._crit_edge

._crit_edge:                                      ; preds = %bb3
  br label %bb5

bb5:                                              ; preds = %._crit_edge, %.split
  %tmp6 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg1, i64 0, i32 1
  %tmp7 = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %arg, i64 0, i32 0
  %tmp8 = bitcast %chpl_TaskErrors* %arg to i64*
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !167
  %tmp10 = bitcast %chpl_Error_object** %tmp6 to i64*
  store i64 %tmp9, i64* %tmp10, align 8, !tbaa !198
  store %chpl_Error_object* %arg1, %chpl_Error_object** %tmp7, align 8, !tbaa !167
  tail call void @atomic_store_explicit_bool(i8* nonnull %tmp, i1 false, i32 5)
  ret void
}

define internal i8 @empty(%chpl_TaskErrors* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = bitcast %chpl_TaskErrors* %arg to %chpl_object_object**
  %tmp3 = load %chpl_object_object*, %chpl_object_object** %tmp, align 8, !tbaa !167
  %tmp4 = icmp eq %chpl_object_object* %tmp3, null
  %tmp5 = zext i1 %tmp4 to i8
  ret i8 %tmp5
}

define internal %chpl_TaskErrors_object* @_new4(%chpl_TaskErrors* nonnull %arg, i64 %arg13, i32 %arg14) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i8* @chpl_here_alloc(i64 40, i16 11, i64 %arg13, i32 %arg14)
  %tmp15 = bitcast i8* %tmp to %chpl_TaskErrors_object*
  %tmp16 = bitcast i8* %tmp to i32*
  store i32 29, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = bitcast i8* %tmp to %chpl_object_object*
  %tmp18 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp17)
  %tmp19 = bitcast i8* %tmp to i32*
  store i32 1, i32* %tmp19, align 4, !tbaa !170
  %tmp20 = getelementptr inbounds i8, i8* %tmp, i64 8
  %tmp21 = bitcast i8* %tmp20 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp21, align 8, !tbaa !198
  %tmp22 = getelementptr inbounds i8, i8* %tmp, i64 16
  %tmp23 = bitcast i8* %tmp22 to i64*
  store i64 0, i64* %tmp23, align 8, !tbaa !200
  %tmp24 = getelementptr inbounds i8, i8* %tmp, i64 24
  %tmp25 = bitcast i8* %tmp24 to i32*
  store i32 0, i32* %tmp25, align 4, !tbaa !201
  %tmp26 = bitcast i8* %tmp to i32*
  store i32 26, i32* %tmp26, align 4, !tbaa !170
  %tmp27 = getelementptr inbounds %chpl_TaskErrors, %chpl_TaskErrors* %arg, i64 0, i32 0
  %tmp28 = load %chpl_Error_object*, %chpl_Error_object** %tmp27, align 8, !tbaa !167
  store %chpl_Error_object* null, %chpl_Error_object** %tmp27, align 8, !tbaa !167
  %tmp29 = getelementptr inbounds i8, i8* %tmp, i64 32
  %tmp30 = bitcast i8* %tmp29 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp30, align 8, !tbaa !202
  store i32 29, i32* %tmp16, align 4, !tbaa !170
  %.03.in8 = icmp eq %chpl_Error_object* %tmp28, null
  br i1 %.03.in8, label %bb52, label %.lr.ph11

.lr.ph11:                                         ; preds = %.split
  br label %bb31

bb31:                                             ; preds = %.lr.ph11, %bb51
  %.03.in.in9 = phi %chpl_Error_object* [ %tmp28, %.lr.ph11 ], [ %tmp33, %bb51 ]
  %tmp32 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.03.in.in9, i64 0, i32 1
  %tmp33 = load %chpl_Error_object*, %chpl_Error_object** %tmp32, align 8, !tbaa !198
  store %chpl_Error_object* null, %chpl_Error_object** %tmp32, align 8, !tbaa !198
  %tmp34 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.03.in.in9, i64 0, i32 0, i32 0
  %tmp35 = load i32, i32* %tmp34, align 4, !tbaa !170
  %tmp36 = icmp slt i32 %tmp35, 29
  %tmp37 = icmp ugt i32 %tmp35, 29
  %tmp38 = bitcast %chpl_Error_object* %.03.in.in9 to %chpl_TaskErrors_object*
  %tmp39 = icmp eq %chpl_Error_object* %.03.in.in9, null
  %not. = or i1 %tmp37, %tmp36
  %tmp40 = or i1 %tmp39, %not.
  br i1 %tmp40, label %bb41, label %bb42

bb41:                                             ; preds = %bb31
  tail call void @append2(%chpl_TaskErrors_object* %tmp15, %chpl_Error_object* %.03.in.in9)
  br label %bb51

bb42:                                             ; preds = %bb31
  %tmp43 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.03.in.in9, i64 1
  %tmp44 = bitcast %chpl_Error_object* %tmp43 to %chpl_Error_object**
  %tmp45 = load %chpl_Error_object*, %chpl_Error_object** %tmp44, align 8, !tbaa !202
  store %chpl_Error_object* null, %chpl_Error_object** %tmp44, align 8, !tbaa !202
  %.01.in6 = icmp eq %chpl_Error_object* %tmp45, null
  br i1 %.01.in6, label %bb49, label %.lr.ph

.lr.ph:                                           ; preds = %bb42
  br label %bb46

bb46:                                             ; preds = %.lr.ph, %bb46
  %.057 = phi %chpl_Error_object* [ %tmp45, %.lr.ph ], [ %tmp48, %bb46 ]
  %tmp47 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.057, i64 0, i32 1
  %tmp48 = load %chpl_Error_object*, %chpl_Error_object** %tmp47, align 8, !tbaa !198
  store %chpl_Error_object* null, %chpl_Error_object** %tmp47, align 8, !tbaa !198
  tail call void @append2(%chpl_TaskErrors_object* %tmp15, %chpl_Error_object* %.057)
  %.01.in = icmp eq %chpl_Error_object* %tmp48, null
  br i1 %.01.in, label %._crit_edge, label %bb46

._crit_edge:                                      ; preds = %bb46
  br label %bb49

bb49:                                             ; preds = %._crit_edge, %bb42
  tail call void @deinit19(%chpl_TaskErrors_object* nonnull %tmp38, i64 %arg13, i32 %arg14)
  %tmp50 = bitcast %chpl_Error_object* %.03.in.in9 to i8*
  tail call void @chpl_here_free(i8* %tmp50, i64 %arg13, i32 %arg14)
  br label %bb51

bb51:                                             ; preds = %bb49, %bb41
  %.03.in = icmp eq %chpl_Error_object* %tmp33, null
  br i1 %.03.in, label %._crit_edge12, label %bb31

._crit_edge12:                                    ; preds = %bb51
  br label %bb52

bb52:                                             ; preds = %._crit_edge12, %.split
  ret %chpl_TaskErrors_object* %tmp15
}

define internal %chpl_TaskErrors_object* @_new5(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i8* @chpl_here_alloc(i64 40, i16 11, i64 %arg1, i32 %arg2)
  %tmp3 = bitcast i8* %tmp to %chpl_TaskErrors_object*
  %tmp4 = bitcast i8* %tmp to i32*
  store i32 29, i32* %tmp4, align 4, !tbaa !170
  %tmp5 = bitcast i8* %tmp to %chpl_object_object*
  %tmp6 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp5)
  %tmp7 = bitcast i8* %tmp to i32*
  store i32 1, i32* %tmp7, align 4, !tbaa !170
  %tmp8 = getelementptr inbounds i8, i8* %tmp, i64 8
  %tmp9 = bitcast i8* %tmp8 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp9, align 8, !tbaa !198
  %tmp10 = getelementptr inbounds i8, i8* %tmp, i64 16
  %tmp11 = bitcast i8* %tmp10 to i64*
  store i64 0, i64* %tmp11, align 8, !tbaa !200
  %tmp12 = getelementptr inbounds i8, i8* %tmp, i64 24
  %tmp13 = bitcast i8* %tmp12 to i32*
  store i32 0, i32* %tmp13, align 4, !tbaa !201
  %tmp14 = bitcast i8* %tmp to i32*
  store i32 26, i32* %tmp14, align 4, !tbaa !170
  %tmp15 = getelementptr inbounds i8, i8* %tmp, i64 32
  %tmp16 = bitcast i8* %tmp15 to %chpl_Error_object**
  store %chpl_Error_object* %arg, %chpl_Error_object** %tmp16, align 8, !tbaa !202
  store i32 29, i32* %tmp4, align 4, !tbaa !170
  ret %chpl_TaskErrors_object* %tmp3
}

define internal void @append2(%chpl_TaskErrors_object* %arg, %chpl_Error_object* %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg1, i64 0, i32 1
  %tmp2 = getelementptr inbounds %chpl_TaskErrors_object, %chpl_TaskErrors_object* %arg, i64 0, i32 1
  %tmp3 = bitcast %chpl_Error_object** %tmp2 to i64*
  %tmp4 = load i64, i64* %tmp3, align 8, !tbaa !202
  %tmp5 = bitcast %chpl_Error_object** %tmp to i64*
  store i64 %tmp4, i64* %tmp5, align 8, !tbaa !198
  store %chpl_Error_object* %arg1, %chpl_Error_object** %tmp2, align 8, !tbaa !202
  ret void
}

define internal void @deinit19(%chpl_TaskErrors_object* %arg, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_TaskErrors_object, %chpl_TaskErrors_object* %arg, i64 0, i32 1
  %tmp6 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !202
  %.0.in2 = icmp eq %chpl_Error_object* %tmp6, null
  br i1 %.0.in2, label %bb18, label %.lr.ph

.lr.ph:                                           ; preds = %.split
  br label %bb7

bb7:                                              ; preds = %.lr.ph, %bb7
  %.013 = phi %chpl_Error_object* [ %tmp6, %.lr.ph ], [ %tmp9, %bb7 ]
  %tmp8 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.013, i64 0, i32 1
  %tmp9 = load %chpl_Error_object*, %chpl_Error_object** %tmp8, align 8, !tbaa !198
  %tmp10 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.013, i64 0, i32 0, i32 0
  %tmp11 = load i32, i32* %tmp10, align 4, !tbaa !170
  %tmp12 = sext i32 %tmp11 to i64
  %tmp13 = mul nsw i64 %tmp12, 5
  %tmp14 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp13
  %tmp15 = bitcast void (i8*)** %tmp14 to void (%chpl_Error_object*, i64, i32)**
  %tmp16 = load void (%chpl_Error_object*, i64, i32)*, void (%chpl_Error_object*, i64, i32)** %tmp15, align 8
  tail call void %tmp16(%chpl_Error_object* nonnull %.013, i64 %arg4, i32 %arg5)
  %tmp17 = bitcast %chpl_Error_object* %.013 to i8*
  tail call void @chpl_here_free(i8* %tmp17, i64 %arg4, i32 %arg5)
  %.0.in = icmp eq %chpl_Error_object* %tmp9, null
  br i1 %.0.in, label %._crit_edge, label %bb7

._crit_edge:                                      ; preds = %bb7
  br label %bb18

bb18:                                             ; preds = %._crit_edge, %.split
  ret void
}

define internal void @message4(%chpl_TaskErrors_object* %arg, %string* nonnull %arg34, i64 %arg35, i32 %arg36) {
bb:
  %tmp = alloca %string, align 8
  %tmp37 = alloca %string, align 8
  %tmp38 = alloca %string, align 8
  %tmp39 = alloca %string, align 8
  %tmp40 = alloca %string, align 8
  %tmp41 = alloca %string, align 8
  %tmp42 = alloca %string, align 8
  %tmp43 = alloca %string, align 8
  %tmp44 = alloca %string, align 8
  %tmp45 = alloca %string, align 8
  %tmp46 = alloca %string, align 8
  %tmp47 = alloca %string, align 8
  %tmp48 = alloca %string, align 8
  %tmp49 = alloca %string, align 8
  %tmp50 = alloca %string, align 8
  %tmp51 = alloca %string, align 8
  %tmp52 = alloca %string, align 8
  %tmp53 = alloca %string, align 8
  %tmp54 = alloca %string, align 8
  %tmp55 = alloca %string, align 8
  %tmp56 = alloca %string, align 8
  %tmp57 = alloca %string, align 8
  %tmp58 = alloca %string, align 8
  %tmp59 = alloca %string, align 8
  %tmp60 = alloca %string, align 8
  %tmp61 = alloca %string, align 8
  %tmp62 = alloca %string, align 8
  %tmp63 = alloca %string, align 8
  %tmp64 = alloca %string, align 8
  %tmp65 = alloca %string, align 8
  %tmp66 = alloca %string, align 8
  %tmp67 = alloca %string, align 8
  %tmp68 = alloca %string, align 8
  %tmp69 = alloca %string, align 8
  %tmp70 = alloca %string, align 8
  %tmp71 = alloca %string, align 8
  %tmp72 = alloca %string, align 8
  %tmp73 = alloca %string, align 8
  %tmp74 = alloca %string, align 8
  %tmp75 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp76 = load %string, %string* @_str_literal_1928, align 16
  store %string %tmp76, %string* %tmp, align 8
  %tmp77 = bitcast %string* %tmp to i8*
  %tmp78 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp77)
  %tmp79 = load %string, %string* @_str_literal_1926, align 16
  %tmp80 = load %string, %string* @_str_literal_1924, align 16
  store %string %tmp80, %string* %tmp37, align 8
  %tmp81 = bitcast %string* %tmp37 to i8*
  %tmp82 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp81)
  %tmp83 = load %string, %string* @_str_literal_1921, align 16
  store %string %tmp83, %string* %tmp38, align 8
  %tmp84 = bitcast %string* %tmp38 to i8*
  %tmp85 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp84)
  call void @init34(%string* %tmp39, i64 %arg35, i32 %arg36)
  call void @init34(%string* %tmp40, i64 %arg35, i32 %arg36)
  %tmp86 = getelementptr inbounds %chpl_TaskErrors_object, %chpl_TaskErrors_object* %arg, i64 0, i32 1
  %tmp87 = load %chpl_Error_object*, %chpl_Error_object** %tmp86, align 8, !tbaa !202
  %.05.in27 = icmp eq %chpl_Error_object* %tmp87, null
  br i1 %.05.in27, label %bb183, label %.lr.ph31

.lr.ph31:                                         ; preds = %.split
  br label %bb88

bb88:                                             ; preds = %.lr.ph31, %bb179
  %.05.in.in29 = phi %chpl_Error_object* [ %tmp87, %.lr.ph31 ], [ %tmp182, %bb179 ]
  %.01628 = phi i64 [ 0, %.lr.ph31 ], [ %tmp180, %bb179 ]
  %tmp89 = call i8 @chpl___EQUALS__(%string* %tmp39, %string* %tmp38, i64 %arg35, i32 %arg36)
  %tmp90 = icmp eq i8 %tmp89, 0
  br i1 %tmp90, label %bb91, label %bb121

bb91:                                             ; preds = %bb88
  %tmp92 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.05.in.in29, i64 0, i32 0, i32 0
  %tmp93 = load i32, i32* %tmp92, align 4, !tbaa !170
  %tmp94 = sext i32 %tmp93 to i64
  %tmp95 = mul nsw i64 %tmp94, 5
  %tmp96 = add nsw i64 %tmp95, 1
  %tmp97 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp96
  %tmp98 = bitcast void (i8*)** %tmp97 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp99 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp98, align 8
  call void %tmp99(%chpl_Error_object* %.05.in.in29, %string* nonnull %tmp42, i64 %arg35, i32 %arg36)
  %tmp100 = load %string, %string* %tmp42, align 8
  store %string %tmp100, %string* %tmp41, align 8
  call void @init35(%string* %tmp44, %string* %tmp41, i8 0, i64 %arg35, i32 %arg36)
  %tmp101 = load %string, %string* %tmp44, align 8
  store %string %tmp101, %string* %tmp43, align 8
  call void @init35(%string* %tmp46, %string* %tmp39, i8 0, i64 %arg35, i32 %arg36)
  %tmp102 = load %string, %string* %tmp46, align 8
  store %string %tmp102, %string* %tmp45, align 8
  %tmp103 = getelementptr inbounds %string, %string* %tmp43, i64 0, i32 0
  %tmp104 = load i64, i64* %tmp103, align 8, !tbaa !175
  %tmp105 = getelementptr inbounds %string, %string* %tmp45, i64 0, i32 0
  %tmp106 = load i64, i64* %tmp105, align 8, !tbaa !175
  %tmp107 = icmp slt i64 %tmp104, %tmp106
  %.08 = select i1 %tmp107, i64 %tmp104, i64 %tmp106
  %tmp108 = getelementptr inbounds %string, %string* %tmp43, i64 0, i32 2
  %tmp109 = load i8*, i8** %tmp108, align 8, !tbaa !179
  %tmp110 = getelementptr inbounds %string, %string* %tmp45, i64 0, i32 2
  %tmp111 = load i8*, i8** %tmp110, align 8, !tbaa !179
  %tmp112 = call i32 @memcmp(i8* %tmp109, i8* %tmp111, i64 %.08)
  %tmp113 = sext i32 %tmp112 to i64
  %tmp114 = icmp eq i32 %tmp112, 0
  br i1 %tmp114, label %bb115, label %bb118

bb115:                                            ; preds = %bb91
  %tmp116 = icmp sgt i64 %tmp104, %tmp106
  br i1 %tmp116, label %bb119, label %bb117

bb117:                                            ; preds = %bb115
  br i1 %tmp107, label %bb119, label %bb118

bb118:                                            ; preds = %bb117, %bb91
  br label %bb119

bb119:                                            ; preds = %bb117, %bb115, %bb118
  %.07 = phi i64 [ %tmp113, %bb118 ], [ 1, %bb115 ], [ -1, %bb117 ]
  %.07.lobit = lshr i64 %.07, 63
  %tmp120 = trunc i64 %.07.lobit to i8
  call void @deinit23(%string* %tmp45, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp43, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp41, i64 %arg35, i32 %arg36)
  br label %bb121

bb121:                                            ; preds = %bb119, %bb88
  %.06 = phi i8 [ %tmp120, %bb119 ], [ 1, %bb88 ]
  %tmp122 = icmp eq i8 %.06, 0
  br i1 %tmp122, label %bb133, label %bb123

bb123:                                            ; preds = %bb121
  %tmp124 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.05.in.in29, i64 0, i32 0, i32 0
  %tmp125 = load i32, i32* %tmp124, align 4, !tbaa !170
  %tmp126 = sext i32 %tmp125 to i64
  %tmp127 = mul nsw i64 %tmp126, 5
  %tmp128 = add nsw i64 %tmp127, 1
  %tmp129 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp128
  %tmp130 = bitcast void (i8*)** %tmp129 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp131 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp130, align 8
  call void %tmp131(%chpl_Error_object* %.05.in.in29, %string* nonnull %tmp48, i64 %arg35, i32 %arg36)
  %tmp132 = load %string, %string* %tmp48, align 8
  store %string %tmp132, %string* %tmp47, align 8
  call void @chpl___ASSIGN_2(%string* %tmp39, %string* %tmp47, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp47, i64 %arg35, i32 %arg36)
  br label %bb133

bb133:                                            ; preds = %bb121, %bb123
  %tmp134 = call i8 @chpl___EQUALS__(%string* %tmp40, %string* %tmp37, i64 %arg35, i32 %arg36)
  %tmp135 = icmp eq i8 %tmp134, 0
  br i1 %tmp135, label %bb136, label %bb167

bb136:                                            ; preds = %bb133
  %tmp137 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.05.in.in29, i64 0, i32 0, i32 0
  %tmp138 = load i32, i32* %tmp137, align 4, !tbaa !170
  %tmp139 = sext i32 %tmp138 to i64
  %tmp140 = mul nsw i64 %tmp139, 5
  %tmp141 = add nsw i64 %tmp140, 1
  %tmp142 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp141
  %tmp143 = bitcast void (i8*)** %tmp142 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp144 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp143, align 8
  call void %tmp144(%chpl_Error_object* %.05.in.in29, %string* nonnull %tmp50, i64 %arg35, i32 %arg36)
  %tmp145 = load %string, %string* %tmp50, align 8
  store %string %tmp145, %string* %tmp49, align 8
  call void @init35(%string* %tmp52, %string* %tmp49, i8 0, i64 %arg35, i32 %arg36)
  %tmp146 = load %string, %string* %tmp52, align 8
  store %string %tmp146, %string* %tmp51, align 8
  call void @init35(%string* %tmp54, %string* %tmp40, i8 0, i64 %arg35, i32 %arg36)
  %tmp147 = load %string, %string* %tmp54, align 8
  store %string %tmp147, %string* %tmp53, align 8
  %tmp148 = getelementptr inbounds %string, %string* %tmp51, i64 0, i32 0
  %tmp149 = load i64, i64* %tmp148, align 8, !tbaa !175
  %tmp150 = getelementptr inbounds %string, %string* %tmp53, i64 0, i32 0
  %tmp151 = load i64, i64* %tmp150, align 8, !tbaa !175
  %tmp152 = icmp slt i64 %tmp149, %tmp151
  %.011 = select i1 %tmp152, i64 %tmp149, i64 %tmp151
  %tmp153 = getelementptr inbounds %string, %string* %tmp51, i64 0, i32 2
  %tmp154 = load i8*, i8** %tmp153, align 8, !tbaa !179
  %tmp155 = getelementptr inbounds %string, %string* %tmp53, i64 0, i32 2
  %tmp156 = load i8*, i8** %tmp155, align 8, !tbaa !179
  %tmp157 = call i32 @memcmp(i8* %tmp154, i8* %tmp156, i64 %.011)
  %tmp158 = sext i32 %tmp157 to i64
  %tmp159 = icmp eq i32 %tmp157, 0
  br i1 %tmp159, label %bb160, label %bb163

bb160:                                            ; preds = %bb136
  %tmp161 = icmp sgt i64 %tmp149, %tmp151
  br i1 %tmp161, label %bb164, label %bb162

bb162:                                            ; preds = %bb160
  br i1 %tmp152, label %bb164, label %bb163

bb163:                                            ; preds = %bb162, %bb136
  br label %bb164

bb164:                                            ; preds = %bb162, %bb160, %bb163
  %.010 = phi i64 [ %tmp158, %bb163 ], [ 1, %bb160 ], [ -1, %bb162 ]
  %tmp165 = icmp sgt i64 %.010, 0
  %tmp166 = zext i1 %tmp165 to i8
  call void @deinit23(%string* %tmp53, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp51, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp49, i64 %arg35, i32 %arg36)
  br label %bb167

bb167:                                            ; preds = %bb164, %bb133
  %.09 = phi i8 [ %tmp166, %bb164 ], [ 1, %bb133 ]
  %tmp168 = icmp eq i8 %.09, 0
  br i1 %tmp168, label %bb179, label %bb169

bb169:                                            ; preds = %bb167
  %tmp170 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.05.in.in29, i64 0, i32 0, i32 0
  %tmp171 = load i32, i32* %tmp170, align 4, !tbaa !170
  %tmp172 = sext i32 %tmp171 to i64
  %tmp173 = mul nsw i64 %tmp172, 5
  %tmp174 = add nsw i64 %tmp173, 1
  %tmp175 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp174
  %tmp176 = bitcast void (i8*)** %tmp175 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp177 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp176, align 8
  call void %tmp177(%chpl_Error_object* %.05.in.in29, %string* nonnull %tmp56, i64 %arg35, i32 %arg36)
  %tmp178 = load %string, %string* %tmp56, align 8
  store %string %tmp178, %string* %tmp55, align 8
  call void @chpl___ASSIGN_2(%string* %tmp40, %string* %tmp55, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp55, i64 %arg35, i32 %arg36)
  br label %bb179

bb179:                                            ; preds = %bb167, %bb169
  %tmp180 = add nuw nsw i64 %.01628, 1
  %tmp181 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.05.in.in29, i64 0, i32 1
  %tmp182 = load %chpl_Error_object*, %chpl_Error_object** %tmp181, align 8, !tbaa !198
  %.05.in = icmp eq %chpl_Error_object* %tmp182, null
  br i1 %.05.in, label %._crit_edge32, label %bb88

._crit_edge32:                                    ; preds = %bb179
  %.lcssa = phi i64 [ %tmp180, %bb179 ]
  br label %bb183

bb183:                                            ; preds = %._crit_edge32, %.split
  %.016.lcssa = phi i64 [ %.lcssa, %._crit_edge32 ], [ 0, %.split ]
  %tmp184 = load %chpl_Error_object*, %chpl_Error_object** %tmp86, align 8, !tbaa !202
  %.014.in20 = icmp eq %chpl_Error_object* %tmp184, null
  br i1 %.014.in20, label %bb200, label %.lr.ph24

.lr.ph24:                                         ; preds = %bb183
  br label %bb185

bb185:                                            ; preds = %.lr.ph24, %bb185
  %.023 = phi %chpl_Error_object* [ null, %.lr.ph24 ], [ %.2, %bb185 ]
  %.0122 = phi %chpl_Error_object* [ null, %.lr.ph24 ], [ %.12, %bb185 ]
  %.014.in.in21 = phi %chpl_Error_object* [ %tmp184, %.lr.ph24 ], [ %tmp199, %bb185 ]
  %tmp186 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.014.in.in21, i64 0, i32 0, i32 0
  %tmp187 = load i32, i32* %tmp186, align 4, !tbaa !170
  %tmp188 = sext i32 %tmp187 to i64
  %tmp189 = mul nsw i64 %tmp188, 5
  %tmp190 = add nsw i64 %tmp189, 1
  %tmp191 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp190
  %tmp192 = bitcast void (i8*)** %tmp191 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp193 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp192, align 8
  call void %tmp193(%chpl_Error_object* %.014.in.in21, %string* nonnull %tmp58, i64 %arg35, i32 %arg36)
  %tmp194 = load %string, %string* %tmp58, align 8
  store %string %tmp194, %string* %tmp57, align 8
  %tmp195 = call i8 @chpl___EQUALS__(%string* %tmp57, %string* %tmp39, i64 %arg35, i32 %arg36)
  %tmp196 = icmp eq i8 %tmp195, 0
  %tmp197 = icmp eq %chpl_Error_object* %.023, null
  %.1 = select i1 %tmp197, %chpl_Error_object* %.014.in.in21, %chpl_Error_object* %.023
  %.12 = select i1 %tmp196, %chpl_Error_object* %.0122, %chpl_Error_object* %.014.in.in21
  %.2 = select i1 %tmp196, %chpl_Error_object* %.023, %chpl_Error_object* %.1
  call void @deinit23(%string* %tmp57, i64 %arg35, i32 %arg36)
  %tmp198 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.014.in.in21, i64 0, i32 1
  %tmp199 = load %chpl_Error_object*, %chpl_Error_object** %tmp198, align 8, !tbaa !198
  %.014.in = icmp eq %chpl_Error_object* %tmp199, null
  br i1 %.014.in, label %._crit_edge, label %bb185

._crit_edge:                                      ; preds = %bb185
  %.12.lcssa = phi %chpl_Error_object* [ %.12, %bb185 ]
  %.2.lcssa = phi %chpl_Error_object* [ %.2, %bb185 ]
  br label %bb200

bb200:                                            ; preds = %._crit_edge, %bb183
  %.01.lcssa = phi %chpl_Error_object* [ %.12.lcssa, %._crit_edge ], [ null, %bb183 ]
  %.0.lcssa = phi %chpl_Error_object* [ %.2.lcssa, %._crit_edge ], [ null, %bb183 ]
  %tmp201 = call i8 @chpl___EQUALS__(%string* %tmp39, %string* %tmp40, i64 %arg35, i32 %arg36)
  %tmp202 = icmp eq i8 %tmp201, 0
  br i1 %tmp202, label %bb203, label %bb219

bb203:                                            ; preds = %bb200
  %tmp204 = load %chpl_Error_object*, %chpl_Error_object** %tmp86, align 8, !tbaa !202
  %.012.in17 = icmp eq %chpl_Error_object* %tmp204, null
  br i1 %.012.in17, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %bb203
  br label %bb205

bb205:                                            ; preds = %.lr.ph, %bb205
  %.2319 = phi %chpl_Error_object* [ %.01.lcssa, %.lr.ph ], [ %.3, %bb205 ]
  %.01518 = phi %chpl_Error_object* [ %tmp204, %.lr.ph ], [ %tmp218, %bb205 ]
  %tmp206 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.01518, i64 0, i32 0, i32 0
  %tmp207 = load i32, i32* %tmp206, align 4, !tbaa !170
  %tmp208 = sext i32 %tmp207 to i64
  %tmp209 = mul nsw i64 %tmp208, 5
  %tmp210 = add nsw i64 %tmp209, 1
  %tmp211 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp210
  %tmp212 = bitcast void (i8*)** %tmp211 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp213 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp212, align 8
  call void %tmp213(%chpl_Error_object* %.01518, %string* nonnull %tmp60, i64 %arg35, i32 %arg36)
  %tmp214 = load %string, %string* %tmp60, align 8
  store %string %tmp214, %string* %tmp59, align 8
  %tmp215 = call i8 @chpl___EQUALS__(%string* %tmp59, %string* %tmp40, i64 %arg35, i32 %arg36)
  %tmp216 = icmp eq i8 %tmp215, 0
  %.3 = select i1 %tmp216, %chpl_Error_object* %.2319, %chpl_Error_object* %.01518
  call void @deinit23(%string* %tmp59, i64 %arg35, i32 %arg36)
  %tmp217 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.01518, i64 0, i32 1
  %tmp218 = load %chpl_Error_object*, %chpl_Error_object** %tmp217, align 8, !tbaa !198
  %.012.in = icmp eq %chpl_Error_object* %tmp218, null
  br i1 %.012.in, label %..loopexit_crit_edge, label %bb205

..loopexit_crit_edge:                             ; preds = %bb205
  %.3.lcssa = phi %chpl_Error_object* [ %.3, %bb205 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %bb203
  %.23.lcssa = phi %chpl_Error_object* [ %.3.lcssa, %..loopexit_crit_edge ], [ %.01.lcssa, %bb203 ]
  br label %bb219

bb219:                                            ; preds = %.loopexit, %bb200
  %.4 = phi %chpl_Error_object* [ %.01.lcssa, %bb200 ], [ %.23.lcssa, %.loopexit ]
  store %string %tmp79, %string* %tmp62, align 8
  call void @_cast4(i64 %.016.lcssa, %string* %tmp64, i64 %arg35, i32 %arg36)
  %tmp220 = load %string, %string* %tmp64, align 8
  store %string %tmp220, %string* %tmp63, align 8
  call void @chpl___PLUS_(%string* %tmp63, %string* %tmp62, %string* %tmp65, i64 %arg35, i32 %arg36)
  %tmp221 = load %string, %string* %tmp65, align 8
  call void @deinit23(%string* %tmp63, i64 %arg35, i32 %arg36)
  store %string %tmp221, %string* %tmp61, align 8
  %tmp222 = icmp eq %chpl_Error_object* %.0.lcssa, %.4
  br i1 %tmp222, label %bb228, label %bb223

bb223:                                            ; preds = %bb219
  call void @chpl_describe_error(%chpl_Error_object* %.0.lcssa, %string* %tmp67, i64 %arg35, i32 %arg36)
  %tmp224 = load %string, %string* %tmp67, align 8
  store %string %tmp224, %string* %tmp66, align 8
  call void @chpl___PLUS_(%string* %tmp66, %string* %tmp, %string* %tmp69, i64 %arg35, i32 %arg36)
  %tmp225 = load %string, %string* %tmp69, align 8
  store %string %tmp225, %string* %tmp68, align 8
  call void @chpl_describe_error(%chpl_Error_object* %.4, %string* %tmp71, i64 %arg35, i32 %arg36)
  %tmp226 = load %string, %string* %tmp71, align 8
  store %string %tmp226, %string* %tmp70, align 8
  call void @chpl___PLUS_(%string* %tmp68, %string* %tmp70, %string* %tmp73, i64 %arg35, i32 %arg36)
  %tmp227 = load %string, %string* %tmp73, align 8
  store %string %tmp227, %string* %tmp72, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp61, %string* %tmp72, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp72, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp70, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp68, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp66, i64 %arg35, i32 %arg36)
  br label %bb230

bb228:                                            ; preds = %bb219
  call void @chpl_describe_error(%chpl_Error_object* %.0.lcssa, %string* %tmp75, i64 %arg35, i32 %arg36)
  %tmp229 = load %string, %string* %tmp75, align 8
  store %string %tmp229, %string* %tmp74, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp61, %string* %tmp74, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp74, i64 %arg35, i32 %arg36)
  br label %bb230

bb230:                                            ; preds = %bb228, %bb223
  %tmp231 = load %string, %string* %tmp61, align 8
  store %string %tmp231, %string* %arg34, align 8
  call void @deinit23(%string* %tmp40, i64 %arg35, i32 %arg36)
  call void @deinit23(%string* %tmp39, i64 %arg35, i32 %arg36)
  ret void
}

define internal void @chpl_error_type_name(%chpl_Error_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg, i64 0, i32 0, i32 0
  %tmp5 = load i32, i32* %tmp4, align 4, !tbaa !170
  %tmp6 = sext i32 %tmp5 to i64
  %tmp7 = getelementptr inbounds [59 x i8*], [59 x i8*]* @chpl_classNames, i64 0, i64 %tmp6
  %tmp8 = load i8*, i8** %tmp7, align 8
  call void @_cast2(i8* %tmp8, %string* %tmp, i64 %arg2, i32 %arg3)
  %tmp9 = load %string, %string* %tmp, align 8
  store %string %tmp9, %string* %arg1, align 8
  ret void
}

define internal void @chpl_describe_error(%chpl_Error_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp11 = load %string, %string* @_str_literal_1414, align 16
  store %string %tmp11, %string* %tmp, align 8
  %tmp12 = bitcast %string* %tmp to i8*
  %tmp13 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp12)
  call void @chpl_error_type_name(%chpl_Error_object* %arg, %string* %tmp5, i64 %arg2, i32 %arg3)
  %tmp14 = load %string, %string* %tmp5, align 8
  store %string %tmp14, %string* %tmp4, align 8
  call void @chpl___PLUS_(%string* %tmp4, %string* %tmp, %string* %tmp7, i64 %arg2, i32 %arg3)
  %tmp15 = load %string, %string* %tmp7, align 8
  store %string %tmp15, %string* %tmp6, align 8
  %tmp16 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg, i64 0, i32 0, i32 0
  %tmp17 = load i32, i32* %tmp16, align 4, !tbaa !170
  %tmp18 = sext i32 %tmp17 to i64
  %tmp19 = mul nsw i64 %tmp18, 5
  %tmp20 = add nsw i64 %tmp19, 1
  %tmp21 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp20
  %tmp22 = bitcast void (i8*)** %tmp21 to void (%chpl_Error_object*, %string*, i64, i32)**
  %tmp23 = load void (%chpl_Error_object*, %string*, i64, i32)*, void (%chpl_Error_object*, %string*, i64, i32)** %tmp22, align 8
  call void %tmp23(%chpl_Error_object* %arg, %string* nonnull %tmp9, i64 %arg2, i32 %arg3)
  %tmp24 = load %string, %string* %tmp9, align 8
  store %string %tmp24, %string* %tmp8, align 8
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp8, %string* %tmp10, i64 %arg2, i32 %arg3)
  %tmp25 = load %string, %string* %tmp10, align 8
  store %string %tmp25, %string* %arg1, align 8
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp6, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp4, i64 %arg2, i32 %arg3)
  ret void
}

define internal %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq %chpl_Error_object* %arg, null
  br i1 %tmp, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  %tmp4 = tail call %chpl_NilThrownError_object* @_new2(i64 %arg1, i32 %arg2)
  %tmp5 = getelementptr inbounds %chpl_NilThrownError_object, %chpl_NilThrownError_object* %tmp4, i64 0, i32 0
  br label %bb6

bb6:                                              ; preds = %bb3, %.split
  %.0 = phi %chpl_Error_object* [ %tmp5, %bb3 ], [ %arg, %.split ]
  %tmp7 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.0, i64 0, i32 2
  store i64 %arg1, i64* %tmp7, align 8, !tbaa !200
  %tmp8 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %.0, i64 0, i32 3
  store i32 %arg2, i32* %tmp8, align 4, !tbaa !201
  ret %chpl_Error_object* %.0
}

define internal void @chpl_delete_error(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq %chpl_Error_object* %arg, null
  br i1 %tmp, label %bb12, label %bb3

bb3:                                              ; preds = %.split
  %tmp4 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg, i64 0, i32 0, i32 0
  %tmp5 = load i32, i32* %tmp4, align 4, !tbaa !170
  %tmp6 = sext i32 %tmp5 to i64
  %tmp7 = mul nsw i64 %tmp6, 5
  %tmp8 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp7
  %tmp9 = bitcast void (i8*)** %tmp8 to void (%chpl_Error_object*, i64, i32)**
  %tmp10 = load void (%chpl_Error_object*, i64, i32)*, void (%chpl_Error_object*, i64, i32)** %tmp9, align 8
  tail call void %tmp10(%chpl_Error_object* nonnull %arg, i64 %arg1, i32 %arg2)
  %tmp11 = bitcast %chpl_Error_object* %arg to i8*
  tail call void @chpl_here_free(i8* %tmp11, i64 %arg1, i32 %arg2)
  br label %bb12

bb12:                                             ; preds = %.split, %bb3
  ret void
}

define internal void @chpl_uncaught_error(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  %tmp24 = alloca %string, align 8
  %tmp25 = alloca %string, align 8
  %tmp26 = alloca %string, align 8
  %tmp27 = alloca %string, align 8
  %tmp28 = alloca %string, align 8
  %tmp29 = alloca %string, align 8
  %tmp30 = alloca %string, align 8
  %tmp31 = alloca %string, align 8
  %tmp32 = alloca %string, align 8
  %tmp33 = alloca %string, align 8
  %tmp34 = alloca %string, align 8
  %tmp35 = alloca %string, align 8
  %tmp36 = alloca %string, align 8
  %tmp37 = alloca %string, align 8
  %tmp38 = alloca %string, align 8
  %tmp39 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp40 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp40, %string* %tmp, align 8
  %tmp41 = load %string, %string* @_str_literal_1948, align 16
  store %string %tmp41, %string* %tmp3, align 8
  %tmp42 = bitcast %string* %tmp3 to i8*
  %tmp43 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp42)
  %tmp44 = load %string, %string* @_str_literal_1946, align 16
  store %string %tmp44, %string* %tmp4, align 8
  %tmp45 = bitcast %string* %tmp4 to i8*
  %tmp46 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp45)
  %tmp47 = load %string, %string* @_str_literal_461, align 16
  store %string %tmp47, %string* %tmp5, align 8
  %tmp48 = bitcast %string* %tmp5 to i8*
  %tmp49 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp48)
  %tmp50 = load %string, %string* @_str_literal_1944, align 16
  store %string %tmp50, %string* %tmp6, align 8
  %tmp51 = bitcast %string* %tmp6 to i8*
  %tmp52 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp51)
  %tmp53 = load %string, %string* @_str_literal_1942, align 16
  store %string %tmp53, %string* %tmp7, align 8
  %tmp54 = bitcast %string* %tmp7 to i8*
  %tmp55 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp54)
  %tmp56 = tail call i8* @chpl_lookupFilename(i32 %arg2)
  call void @_cast2(i8* %tmp56, %string* %tmp9, i64 %arg1, i32 %arg2)
  %tmp57 = load %string, %string* %tmp9, align 8
  store %string %tmp57, %string* %tmp8, align 8
  %tmp58 = bitcast %string* %tmp8 to i8*
  %tmp59 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp58)
  %tmp60 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg, i64 0, i32 3
  %tmp61 = load i32, i32* %tmp60, align 4, !tbaa !6
  %tmp62 = call i8* @chpl_lookupFilename(i32 %tmp61)
  call void @_cast2(i8* %tmp62, %string* %tmp11, i64 %arg1, i32 %arg2)
  %tmp63 = load %string, %string* %tmp11, align 8
  store %string %tmp63, %string* %tmp10, align 8
  %tmp64 = bitcast %string* %tmp10 to i8*
  %tmp65 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp64)
  %tmp66 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg, i64 0, i32 2
  %tmp67 = load i64, i64* %tmp66, align 8, !tbaa !200
  call void @chpl_describe_error(%chpl_Error_object* %arg, %string* %tmp14, i64 %arg1, i32 %arg2)
  %tmp68 = load %string, %string* %tmp14, align 8
  store %string %tmp68, %string* %tmp13, align 8
  call void @chpl___PLUS_(%string* %tmp7, %string* %tmp13, %string* %tmp16, i64 %arg1, i32 %arg2)
  %tmp69 = load %string, %string* %tmp16, align 8
  store %string %tmp69, %string* %tmp15, align 8
  call void @chpl___PLUS_(%string* %tmp15, %string* %tmp6, %string* %tmp18, i64 %arg1, i32 %arg2)
  %tmp70 = load %string, %string* %tmp18, align 8
  store %string %tmp70, %string* %tmp17, align 8
  call void @chpl___PLUS_(%string* %tmp17, %string* %tmp10, %string* %tmp20, i64 %arg1, i32 %arg2)
  %tmp71 = load %string, %string* %tmp20, align 8
  store %string %tmp71, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp19, %string* %tmp5, %string* %tmp22, i64 %arg1, i32 %arg2)
  %tmp72 = load %string, %string* %tmp22, align 8
  store %string %tmp72, %string* %tmp21, align 8
  call void @_cast4(i64 %tmp67, %string* %tmp25, i64 %arg1, i32 %arg2)
  %tmp73 = load %string, %string* %tmp25, align 8
  store %string %tmp73, %string* %tmp24, align 8
  call void @chpl___PLUS_(%string* %tmp21, %string* %tmp24, %string* %tmp26, i64 %arg1, i32 %arg2)
  %tmp74 = load %string, %string* %tmp26, align 8
  call void @deinit23(%string* %tmp24, i64 %arg1, i32 %arg2)
  store %string %tmp74, %string* %tmp23, align 8
  call void @chpl___PLUS_(%string* %tmp23, %string* %tmp4, %string* %tmp28, i64 %arg1, i32 %arg2)
  %tmp75 = load %string, %string* %tmp28, align 8
  store %string %tmp75, %string* %tmp27, align 8
  call void @chpl___PLUS_(%string* %tmp27, %string* %tmp6, %string* %tmp30, i64 %arg1, i32 %arg2)
  %tmp76 = load %string, %string* %tmp30, align 8
  store %string %tmp76, %string* %tmp29, align 8
  call void @chpl___PLUS_(%string* %tmp29, %string* %tmp8, %string* %tmp32, i64 %arg1, i32 %arg2)
  %tmp77 = load %string, %string* %tmp32, align 8
  store %string %tmp77, %string* %tmp31, align 8
  call void @chpl___PLUS_(%string* %tmp31, %string* %tmp5, %string* %tmp34, i64 %arg1, i32 %arg2)
  %tmp78 = load %string, %string* %tmp34, align 8
  store %string %tmp78, %string* %tmp33, align 8
  call void @_cast4(i64 %arg1, %string* %tmp37, i64 %arg1, i32 %arg2)
  %tmp79 = load %string, %string* %tmp37, align 8
  store %string %tmp79, %string* %tmp36, align 8
  call void @chpl___PLUS_(%string* %tmp33, %string* %tmp36, %string* %tmp38, i64 %arg1, i32 %arg2)
  %tmp80 = load %string, %string* %tmp38, align 8
  call void @deinit23(%string* %tmp36, i64 %arg1, i32 %arg2)
  store %string %tmp80, %string* %tmp35, align 8
  call void @chpl___PLUS_(%string* %tmp35, %string* %tmp3, %string* %tmp39, i64 %arg1, i32 %arg2)
  %tmp81 = load %string, %string* %tmp39, align 8
  store %string %tmp81, %string* %tmp12, align 8
  %tmp82 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 4
  %tmp83 = load i32, i32* %tmp82, align 4, !tbaa !178
  %tmp84 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp85 = icmp eq i32 %tmp83, %tmp84
  br i1 %tmp85, label %bb87, label %bb86

bb86:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  br label %bb87

bb87:                                             ; preds = %.split, %bb86
  %tmp88 = getelementptr inbounds %string, %string* %tmp12, i64 0, i32 2
  %tmp89 = load i8*, i8** %tmp88, align 8, !tbaa !179
  call void @chpl_error_preformatted(i8* %tmp89)
  call void @deinit23(%string* %tmp35, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp33, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp31, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp29, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp27, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp23, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp21, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp19, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp17, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp15, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp13, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp12, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp10, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp8, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl_propagate_error(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl_uncaught_error(%chpl_Error_object* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_Error_object* @chpl_forall_error(%chpl_Error_object* %arg, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq %chpl_Error_object* %arg, null
  br i1 %tmp, label %bb11, label %bb6

bb6:                                              ; preds = %.split
  %tmp7 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %arg, i64 0, i32 0, i32 0
  %tmp8 = load i32, i32* %tmp7, align 4, !tbaa !170
  %tmp9 = icmp slt i32 %tmp8, 29
  %tmp10 = icmp ugt i32 %tmp8, 29
  %not. = or i1 %tmp10, %tmp9
  br label %bb11

bb11:                                             ; preds = %bb6, %.split
  %.01 = phi i1 [ %not., %bb6 ], [ true, %.split ]
  br i1 %.01, label %bb12, label %bb15

bb12:                                             ; preds = %bb11
  %tmp13 = tail call %chpl_TaskErrors_object* @_new5(%chpl_Error_object* %arg, i64 %arg4, i32 %arg5)
  %tmp14 = getelementptr inbounds %chpl_TaskErrors_object, %chpl_TaskErrors_object* %tmp13, i64 0, i32 0
  br label %bb15

bb15:                                             ; preds = %bb11, %bb12
  %.02 = phi %chpl_Error_object* [ %tmp14, %bb12 ], [ %arg, %bb11 ]
  ret %chpl_Error_object* %.02
}

define internal void @chpl__init_ChapelIO(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelIO_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @241, i64 0, i64 0), i64 8, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelIO_p, align 1, !tbaa !8
  tail call void @chpl__init_ChapelBase(i64 %arg, i32 %arg1)
  tail call void @chpl__init_SysBasic(i64 %arg, i32 %arg1)
  tail call void @chpl__init_IO(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @halt(%string* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp5, %string* %tmp, align 8
  call void @init35(%string* %tmp4, %string* %arg, i8 0, i64 %arg1, i32 %arg2)
  %tmp6 = load %string, %string* %tmp4, align 8
  store %string %tmp6, %string* %tmp3, align 8
  %tmp7 = getelementptr inbounds %string, %string* %tmp3, i64 0, i32 4
  %tmp8 = load i32, i32* %tmp7, align 4, !tbaa !178
  %tmp9 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp10 = icmp eq i32 %tmp8, %tmp9
  br i1 %tmp10, label %bb12, label %bb11

bb11:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  br label %bb12

bb12:                                             ; preds = %.split, %bb11
  %tmp13 = getelementptr inbounds %string, %string* %tmp3, i64 0, i32 2
  %tmp14 = load i8*, i8** %tmp13, align 8, !tbaa !179
  call void @halt2(i8* %tmp14, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp3, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @halt2(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp8, %string* %tmp, align 8
  %tmp9 = load %string, %string* @_str_literal_1687, align 16
  store %string %tmp9, %string* %tmp3, align 8
  %tmp10 = bitcast %string* %tmp3 to i8*
  %tmp11 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp10)
  call void @stringify_chpl(i8* %arg, %string* %tmp6, i64 %arg1, i32 %arg2)
  %tmp12 = load %string, %string* %tmp6, align 8
  store %string %tmp12, %string* %tmp5, align 8
  call void @chpl___PLUS_(%string* %tmp3, %string* %tmp5, %string* %tmp7, i64 %arg1, i32 %arg2)
  %tmp13 = load %string, %string* %tmp7, align 8
  store %string %tmp13, %string* %tmp4, align 8
  %tmp14 = getelementptr inbounds %string, %string* %tmp4, i64 0, i32 4
  %tmp15 = load i32, i32* %tmp14, align 4, !tbaa !178
  %tmp16 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp17 = icmp eq i32 %tmp15, %tmp16
  br i1 %tmp17, label %bb19, label %bb18

bb18:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  br label %bb19

bb19:                                             ; preds = %.split, %bb18
  %tmp20 = getelementptr inbounds %string, %string* %tmp4, i64 0, i32 2
  %tmp21 = load i8*, i8** %tmp20, align 8, !tbaa !179
  %tmp22 = trunc i64 %arg1 to i32
  call void @chpl_error(i8* %tmp21, i32 %tmp22, i32 %arg2)
  call void @deinit23(%string* %tmp5, i64 %arg1, i32 %arg2)
  call void @deinit23(%string* %tmp4, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @halt3(%string* nonnull %arg, %string* nonnull %arg1, %string* nonnull %arg2, %string* nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp11 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp11, %string* %tmp, align 8
  %tmp12 = load %string, %string* @_str_literal_1687, align 16
  store %string %tmp12, %string* %tmp6, align 8
  %tmp13 = bitcast %string* %tmp6 to i8*
  %tmp14 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp13)
  call void @stringify_chpl2(%string* %arg, %string* %arg1, %string* %arg2, %string* %arg3, %string* %tmp9, i64 %arg4, i32 %arg5)
  %tmp15 = load %string, %string* %tmp9, align 8
  store %string %tmp15, %string* %tmp8, align 8
  call void @chpl___PLUS_(%string* %tmp6, %string* %tmp8, %string* %tmp10, i64 %arg4, i32 %arg5)
  %tmp16 = load %string, %string* %tmp10, align 8
  store %string %tmp16, %string* %tmp7, align 8
  %tmp17 = getelementptr inbounds %string, %string* %tmp7, i64 0, i32 4
  %tmp18 = load i32, i32* %tmp17, align 4, !tbaa !178
  %tmp19 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp20 = icmp eq i32 %tmp18, %tmp19
  br i1 %tmp20, label %bb22, label %bb21

bb21:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg4, i32 %arg5)
  br label %bb22

bb22:                                             ; preds = %.split, %bb21
  %tmp23 = getelementptr inbounds %string, %string* %tmp7, i64 0, i32 2
  %tmp24 = load i8*, i8** %tmp23, align 8, !tbaa !179
  %tmp25 = trunc i64 %arg4 to i32
  call void @chpl_error(i8* %tmp24, i32 %tmp25, i32 %arg5)
  call void @deinit23(%string* %tmp8, i64 %arg4, i32 %arg5)
  call void @deinit23(%string* %tmp7, i64 %arg4, i32 %arg5)
  ret void
}

define internal void @chpl__init_ChapelLocale(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelLocale_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb10

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @236, i64 0, i64 0), i64 12, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelLocale_p, align 1, !tbaa !8
  tail call void @chpl__init_LocaleModel(i64 %arg, i32 %arg1)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @236, i64 0, i64 0), i8* bitcast (void (i64, i32)* @deinit20 to i8*), i64 %arg, i32 %arg1)
  store %chpl_locale_object* null, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  store i8 0, i8* @rootLocaleInitialized, align 1, !tbaa !8
  store %chpl_locale_object* null, %chpl_locale_object** @origRootLocale, align 8, !tbaa !158
  %tmp6 = tail call %chpl_DummyLocale_object* @_new6(i64 %arg, i32 %arg1)
  store %chpl_DummyLocale_object* %tmp6, %chpl_DummyLocale_object** @dummyLocale, align 8, !tbaa !107
  %tmp7 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (%chpl_DummyLocale_object** @dummyLocale to i8*))
  %tmp8 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp9 = add i32 %tmp8, -1
  store i32 %tmp9, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb10

bb10:                                             ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__auto_destroy_locale(%chpl_locale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg, i64 0, i32 8, i32 0
  tail call void @atomic_destroy_int_least64_t(i64* nonnull %tmp)
  ret void
}

define internal i64 @id(%chpl_locale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg, i64 0, i32 0, i32 0
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !170
  %tmp4 = sext i32 %tmp3 to i64
  %tmp5 = mul nsw i64 %tmp4, 5
  %tmp6 = add nsw i64 %tmp5, 2
  %tmp7 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp6
  %tmp8 = bitcast void (i8*)** %tmp7 to i64 (%chpl_locale_object*, i64, i32)**
  %tmp9 = load i64 (%chpl_locale_object*, i64, i32)*, i64 (%chpl_locale_object*, i64, i32)** %tmp8, align 8
  %tmp10 = tail call i64 %tmp9(%chpl_locale_object* %arg, i64 %arg1, i32 %arg2)
  ret i64 %tmp10
}

define internal i64 @chpl_id(%chpl_locale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %string, %string* @_str_literal_30, align 16
  store %string %tmp3, %string* %tmp, align 8
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  ret i64 -1
}

define internal i64 @getChildCount(%chpl_locale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %string, %string* @_str_literal_30, align 16
  store %string %tmp3, %string* %tmp, align 8
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  ret i64 0
}

define internal %chpl_locale_object* @getChild(%chpl_locale_object* %arg, i64 %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load %string, %string* @_str_literal_30, align 16
  store %string %tmp4, %string* %tmp, align 8
  call void @halt(%string* %tmp, i64 %arg2, i32 %arg3)
  ret %chpl_locale_object* %arg
}

define internal %chpl_DummyLocale_object* @_new6(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca %atomic_int64, align 8
  %tmp2 = alloca i64, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = tail call i8* @chpl_here_alloc(i64 72, i16 5, i64 %arg, i32 %arg1)
  %tmp4 = bitcast i8* %tmp3 to %chpl_DummyLocale_object*
  %tmp5 = bitcast i8* %tmp3 to i32*
  store i32 51, i32* %tmp5, align 4, !tbaa !170
  %tmp6 = bitcast i8* %tmp3 to %chpl_object_object*
  %tmp7 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp6)
  %tmp8 = bitcast i8* %tmp3 to i32*
  store i32 1, i32* %tmp8, align 4, !tbaa !170
  %tmp9 = getelementptr inbounds i8, i8* %tmp3, i64 8
  %tmp10 = bitcast i8* %tmp9 to %chpl_locale_object**
  store %chpl_locale_object* null, %chpl_locale_object** %tmp10, align 8, !tbaa !204
  %tmp11 = getelementptr inbounds i8, i8* %tmp3, i64 16
  %tmp12 = bitcast i8* %tmp11 to i64*
  store i64 0, i64* %tmp12, align 8, !tbaa !206
  %tmp13 = getelementptr inbounds i8, i8* %tmp3, i64 24
  %tmp14 = bitcast i8* %tmp13 to i64*
  store i64 0, i64* %tmp14, align 8, !tbaa !207
  %tmp15 = getelementptr inbounds i8, i8* %tmp3, i64 32
  %tmp16 = bitcast i8* %tmp15 to i64*
  store i64 0, i64* %tmp16, align 8, !tbaa !208
  %tmp17 = getelementptr inbounds i8, i8* %tmp3, i64 40
  %tmp18 = bitcast i8* %tmp17 to i64*
  store i64 0, i64* %tmp18, align 8, !tbaa !209
  %tmp19 = getelementptr inbounds i8, i8* %tmp3, i64 48
  %tmp20 = bitcast i8* %tmp19 to i64*
  store i64 0, i64* %tmp20, align 8, !tbaa !210
  %tmp21 = getelementptr inbounds i8, i8* %tmp3, i64 56
  %tmp22 = bitcast i8* %tmp21 to i64*
  store i64 0, i64* %tmp22, align 8, !tbaa !211
  call void @atomic_init_int_least64_t(i64* nonnull %tmp2, i64 0)
  %tmp23 = load i64, i64* %tmp2, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp, i64 %tmp23)
  %tmp24 = getelementptr inbounds i8, i8* %tmp3, i64 64
  %tmp25 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp, i64 0, i32 0
  %tmp26 = load i64, i64* %tmp25, align 8
  %tmp27 = bitcast i8* %tmp24 to i64*
  store i64 %tmp26, i64* %tmp27, align 8
  store i32 51, i32* %tmp5, align 4, !tbaa !170
  ret %chpl_DummyLocale_object* %tmp4
}

define internal void @chpl__auto_destroy_DummyLocale(%chpl_DummyLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DummyLocale_object, %chpl_DummyLocale_object* %arg, i64 0, i32 0, i32 8, i32 0
  tail call void @atomic_destroy_int_least64_t(i64* nonnull %tmp)
  ret void
}

define internal i64 @chpl_id2(%chpl_DummyLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i64 -1
}

define internal i64 @getChildCount2(%chpl_DummyLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i64 0
}

define internal %chpl_locale_object* @getChild2(%chpl_DummyLocale_object* %arg, i64 %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DummyLocale_object, %chpl_DummyLocale_object* %arg, i64 0, i32 0
  ret %chpl_locale_object* %tmp
}

define internal void @chpl__auto_destroy_AbstractLocaleModel(%chpl_AbstractLocaleModel_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_AbstractLocaleModel_object, %chpl_AbstractLocaleModel_object* %arg, i64 0, i32 0, i32 8, i32 0
  tail call void @atomic_destroy_int_least64_t(i64* nonnull %tmp)
  ret void
}

define internal void @chpl__auto_destroy_AbstractRootLocale(%chpl_AbstractRootLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_AbstractRootLocale_object, %chpl_AbstractRootLocale_object* %arg, i64 0, i32 0, i32 8, i32 0
  tail call void @atomic_destroy_int_least64_t(i64* nonnull %tmp)
  ret void
}

define internal %chpl_locale_object* @localeIDtoLocale(%chpl_AbstractRootLocale_object* %arg, %struct.chpl_localeID_t* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load %string, %string* @_str_literal_30, align 16
  store %string %tmp4, %string* %tmp, align 8
  call void @halt(%string* %tmp, i64 %arg2, i32 %arg3)
  %tmp5 = getelementptr inbounds %chpl_AbstractRootLocale_object, %chpl_AbstractRootLocale_object* %arg, i64 0, i32 0
  ret %chpl_locale_object* %tmp5
}

define internal %chpl_localesSignal_object* @_new7(%atomicbool* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomicbool, %atomicbool* %arg, i64 0, i32 0
  %tmp3 = load i8, i8* %tmp, align 1
  %tmp4 = tail call i8* @chpl_here_alloc(i64 12, i16 36, i64 %arg1, i32 %arg2)
  %tmp5 = bitcast i8* %tmp4 to %chpl_localesSignal_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 56, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  store i32 1, i32* %tmp6, align 4, !tbaa !170
  %tmp9 = getelementptr inbounds i8, i8* %tmp4, i64 8
  store i8 %tmp3, i8* %tmp9, align 1
  store i32 56, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_localesSignal_object* %tmp5
}

define internal void @chpl__auto_destroy_localesSignal(%chpl_localesSignal_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_localesSignal_object, %chpl_localesSignal_object* %arg, i64 0, i32 1, i32 0
  tail call void @atomic_destroy_bool(i8* nonnull %tmp)
  ret void
}

define internal void @init20(%localesBarrier* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @wait5(%localesBarrier* nonnull %arg, i64 %arg8, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg9, i64 %arg10, i32 %arg11) {
bb:
  %tmp = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  %tmp12 = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  %tmp13 = alloca %atomicbool, align 8
  %tmp14 = alloca %atomicbool, align 8
  %tmp15 = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp16 = icmp eq i64 %arg8, 0
  br i1 %tmp16, label %bb17, label %bb72

bb17:                                             ; preds = %.split
  %tmp18 = load i64, i64* @numLocales, align 8, !tbaa !138
  %tmp19 = add nsw i64 %tmp18, -1
  br label %bb20

bb20:                                             ; preds = %bb47, %bb17
  tail call void @atomic_fence(i32 5, i64 %arg10, i32 %arg11)
  %tmp21 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg9, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp21, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp, align 8
  %tmp22 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp, i64 0, i32 1
  %tmp23 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp22, align 8, !tbaa !80
  %tmp24 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp23, i64 0, i32 1
  %tmp25 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp24, align 8, !tbaa !99
  %tmp26 = tail call i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp25)
  %tmp27 = tail call i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp25)
  %tmp28 = sub i64 1, %tmp26
  %tmp29 = add i64 %tmp28, %tmp27
  %tmp30 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp25)
  %tmp31 = add nsw i64 %tmp30, -1
  %tmp32 = mul nsw i64 %tmp31, %tmp29
  %tmp33 = add nsw i64 %tmp32, %tmp26
  %tmp34 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp23, i64 0, i32 7
  %tmp35 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp34, align 8, !tbaa !212
  %tmp36 = icmp sgt i64 %tmp32, -1
  br i1 %tmp36, label %.preheader6, label %bb45

.preheader6:                                      ; preds = %bb20
  br label %bb37

bb37:                                             ; preds = %.preheader6, %bb37
  %.04 = phi i64 [ %.1, %bb37 ], [ 0, %.preheader6 ]
  %.02 = phi i64 [ %tmp43, %bb37 ], [ %tmp26, %.preheader6 ]
  %tmp38 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp35, i64 %.02
  %tmp39 = bitcast %chpl_localesSignal_object** %tmp38 to %chpl_object_object**
  %tmp40 = load %chpl_object_object*, %chpl_object_object** %tmp39, align 8, !tbaa !148
  %tmp41 = icmp ne %chpl_object_object* %tmp40, null
  %tmp42 = zext i1 %tmp41 to i64
  %.1 = add nuw nsw i64 %.04, %tmp42
  %tmp43 = add nsw i64 %.02, %tmp29
  %tmp44 = icmp sgt i64 %tmp43, %tmp33
  br i1 %tmp44, label %.loopexit7, label %bb37

.loopexit7:                                       ; preds = %bb37
  %.1.lcssa = phi i64 [ %.1, %bb37 ]
  br label %bb45

bb45:                                             ; preds = %.loopexit7, %bb20
  %.2 = phi i64 [ 0, %bb20 ], [ %.1.lcssa, %.loopexit7 ]
  %tmp46 = icmp eq i64 %.2, %tmp19
  br i1 %tmp46, label %bb48, label %bb47

bb47:                                             ; preds = %bb45
  tail call void @chpl_task_yield()
  br label %bb20

bb48:                                             ; preds = %bb45
  %tmp49 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg9, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp49, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp12, align 8
  %tmp50 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp12, i64 0, i32 1
  %tmp51 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp50, align 8, !tbaa !80
  %tmp52 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp51, i64 0, i32 1
  %tmp53 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp52, align 8, !tbaa !99
  %tmp54 = tail call i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp53)
  %tmp55 = tail call i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp53)
  %tmp56 = sub i64 1, %tmp54
  %tmp57 = add i64 %tmp56, %tmp55
  %tmp58 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp53)
  %tmp59 = add nsw i64 %tmp58, -1
  %tmp60 = mul nsw i64 %tmp59, %tmp57
  %tmp61 = add nsw i64 %tmp60, %tmp54
  %tmp62 = icmp sgt i64 %tmp60, -1
  br i1 %tmp62, label %.preheader, label %bb91

.preheader:                                       ; preds = %bb48
  br label %bb63

bb63:                                             ; preds = %.preheader, %bb63
  %.03 = phi i64 [ %tmp70, %bb63 ], [ %tmp54, %.preheader ]
  %tmp64 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp51, i64 0, i32 7
  %tmp65 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp64, align 8, !tbaa !212
  %tmp66 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp65, i64 %.03
  %tmp67 = load %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp66, align 8, !tbaa !148
  %tmp68 = getelementptr inbounds %chpl_localesSignal_object, %chpl_localesSignal_object* %tmp67, i64 0, i32 1, i32 0
  %tmp69 = tail call i1 @atomic_exchange_explicit_bool(i8* nonnull %tmp68, i1 true, i32 5)
  %tmp70 = add nsw i64 %.03, %tmp57
  %tmp71 = icmp sgt i64 %tmp70, %tmp61
  br i1 %tmp71, label %.loopexit, label %bb63

bb72:                                             ; preds = %.split
  call void @atomic_init_bool(i8* nonnull %tmp15, i1 false)
  %tmp73 = load i8, i8* %tmp15, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp14, i8 %tmp73)
  %tmp74 = getelementptr inbounds %atomicbool, %atomicbool* %tmp14, i64 0, i32 0
  %tmp75 = load i8, i8* %tmp74, align 8
  %tmp76 = getelementptr inbounds %atomicbool, %atomicbool* %tmp13, i64 0, i32 0
  store i8 %tmp75, i8* %tmp76, align 8
  %tmp77 = call %chpl_localesSignal_object* @_new7(%atomicbool* %tmp13, i64 %arg10, i32 %arg11)
  %tmp78 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg9, i64 0, i32 1
  %tmp79 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp78, align 8, !tbaa !80
  %tmp80 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp79, i64 0, i32 7
  %tmp81 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp80, align 8, !tbaa !212
  %tmp82 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp81, i64 %arg8
  store %chpl_localesSignal_object* %tmp77, %chpl_localesSignal_object** %tmp82, align 8, !tbaa !148
  %tmp83 = getelementptr inbounds %chpl_localesSignal_object, %chpl_localesSignal_object* %tmp77, i64 0, i32 1, i32 0
  %tmp84 = call i1 @atomic_load_explicit_bool(i8* nonnull %tmp83, i32 0)
  br i1 %tmp84, label %bb87, label %.lr.ph

.lr.ph:                                           ; preds = %bb72
  br label %bb85

bb85:                                             ; preds = %.lr.ph, %bb85
  call void @chpl_task_yield()
  %tmp86 = call i1 @atomic_load_explicit_bool(i8* nonnull %tmp83, i32 0)
  br i1 %tmp86, label %._crit_edge, label %bb85

._crit_edge:                                      ; preds = %bb85
  br label %bb87

bb87:                                             ; preds = %._crit_edge, %bb72
  call void @atomic_thread_fence(i32 5)
  %tmp88 = icmp eq %chpl_localesSignal_object* %tmp77, null
  br i1 %tmp88, label %bb91, label %bb89

bb89:                                             ; preds = %bb87
  call void @atomic_destroy_bool(i8* nonnull %tmp83)
  %tmp90 = bitcast %chpl_localesSignal_object* %tmp77 to i8*
  call void @chpl_here_free(i8* %tmp90, i64 %arg10, i32 %arg11)
  br label %bb91

.loopexit:                                        ; preds = %bb63
  br label %bb91

bb91:                                             ; preds = %.loopexit, %bb89, %bb87, %bb48
  ret void
}

define internal void @chpl_init_rootLocale(i64 %arg, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %chpl_RootLocale_object* @_new11(i64 %arg, i32 %arg2)
  %tmp3 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %tmp, i64 0, i32 0, i32 0
  store %chpl_locale_object* %tmp3, %chpl_locale_object** @origRootLocale, align 8, !tbaa !158
  %tmp4 = icmp eq %chpl_RootLocale_object* %tmp, null
  br i1 %tmp4, label %bb11, label %bb5

bb5:                                              ; preds = %.split
  %tmp6 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %tmp, i64 0, i32 0, i32 0, i32 0, i32 0
  %tmp7 = load i32, i32* %tmp6, align 4, !tbaa !170
  %tmp8 = icmp sgt i32 %tmp7, 54
  %tmp9 = icmp ult i32 %tmp7, 56
  %tmp10 = and i1 %tmp8, %tmp9
  %. = select i1 %tmp10, %chpl_RootLocale_object* %tmp, %chpl_RootLocale_object* null
  br label %bb11

bb11:                                             ; preds = %.split, %bb5
  %.01 = phi %chpl_RootLocale_object* [ %., %bb5 ], [ null, %.split ]
  tail call void @setup2(%chpl_RootLocale_object* %.01, i64 %arg, i32 %arg2)
  ret void
}

define internal void @chpl_rootLocaleInitPrivate(i64 %arg, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i64, i64* @numLocales, align 8, !tbaa !138
  %tmp6 = load i64, i64* bitcast (%chpl_locale_object** @origRootLocale to i64*), align 8, !tbaa !158
  store i64 %tmp6, i64* bitcast (%chpl_locale_object** @rootLocale to i64*), align 8, !tbaa !158
  %tmp7 = icmp ne i64 %arg, 0
  br i1 %tmp7, label %bb8, label %.critedge

bb8:                                              ; preds = %.split
  %tmp9 = tail call %chpl_RootLocale_object* @_new11(i64 %arg4, i32 %arg5)
  %tmp10 = load %chpl_locale_object*, %chpl_locale_object** @origRootLocale, align 8, !tbaa !158
  %tmp11 = icmp eq %chpl_locale_object* %tmp10, null
  br i1 %tmp11, label %bb19, label %bb12

bb12:                                             ; preds = %bb8
  %tmp13 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp10, i64 0, i32 0, i32 0
  %tmp14 = load i32, i32* %tmp13, align 4, !tbaa !170
  %tmp15 = icmp sgt i32 %tmp14, 54
  %tmp16 = icmp ult i32 %tmp14, 56
  %tmp17 = and i1 %tmp15, %tmp16
  %tmp18 = bitcast %chpl_locale_object* %tmp10 to %chpl_RootLocale_object*
  %.01 = select i1 %tmp17, %chpl_RootLocale_object* %tmp18, %chpl_RootLocale_object* null
  br label %bb19

bb19:                                             ; preds = %bb8, %bb12
  %.03 = phi %chpl_RootLocale_object* [ %.01, %bb12 ], [ null, %bb8 ]
  %tmp20 = tail call %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @getDefaultLocaleArray(%chpl_RootLocale_object* %.03)
  %tmp21 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp20, i64 0, i32 1
  %tmp22 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp21, align 8, !tbaa !72
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp22, i64 0, i32 7
  %tmp24 = bitcast %chpl_locale_object*** %tmp23 to i8**
  %tmp25 = load i8*, i8** %tmp24, align 8, !tbaa !213
  %tmp26 = tail call %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @getDefaultLocaleArray(%chpl_RootLocale_object* %tmp9)
  %tmp27 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp26, i64 0, i32 1
  %tmp28 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp27, align 8, !tbaa !72
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp28, i64 0, i32 7
  %tmp30 = bitcast %chpl_locale_object*** %tmp29 to i8**
  %tmp31 = load i8*, i8** %tmp30, align 8, !tbaa !213
  %tmp32 = shl i64 %tmp, 3
  %tmp33 = trunc i64 %arg4 to i32
  tail call void @chpl_gen_comm_get(i8* %tmp31, i32 0, i8* %tmp25, i64 %tmp32, i32 -1, i32 0, i32 %tmp33, i32 %arg5)
  %tmp34 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %tmp9, i64 0, i32 0, i32 0
  store %chpl_locale_object* %tmp34, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  br i1 %tmp7, label %bb35, label %.critedge

bb35:                                             ; preds = %bb19
  %tmp36 = load %chpl_locale_object*, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  %tmp37 = icmp eq %chpl_locale_object* %tmp36, null
  br i1 %tmp37, label %bb45, label %bb38

bb38:                                             ; preds = %bb35
  %tmp39 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp36, i64 0, i32 0, i32 0
  %tmp40 = load i32, i32* %tmp39, align 4, !tbaa !170
  %tmp41 = icmp sgt i32 %tmp40, 54
  %tmp42 = icmp ult i32 %tmp40, 56
  %tmp43 = and i1 %tmp41, %tmp42
  %tmp44 = bitcast %chpl_locale_object* %tmp36 to %chpl_RootLocale_object*
  %.0 = select i1 %tmp43, %chpl_RootLocale_object* %tmp44, %chpl_RootLocale_object* null
  br label %bb45

bb45:                                             ; preds = %bb35, %bb38
  %.02 = phi %chpl_RootLocale_object* [ %.0, %bb38 ], [ null, %bb35 ]
  %tmp46 = tail call %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @getDefaultLocaleArray(%chpl_RootLocale_object* %.02)
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp46, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t** @Locales, align 8, !tbaa !214
  br label %.critedge

.critedge:                                        ; preds = %.split, %bb45, %bb19
  store i8 1, i8* @rootLocaleInitialized, align 1, !tbaa !8
  ret void
}

define void @chpl_getLocaleID(%struct.chpl_localeID_t* %arg, i64 %arg1, i32 %arg2) #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp3 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp, i32 -2)
  %tmp4 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %arg, i64 0, i32 0
  store i32 %tmp3, i32* %tmp4, align 4, !tbaa !110
  ret void
}

define internal %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* nonnull %arg, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %chpl_locale_object*, %chpl_locale_object** bitcast (%chpl_DummyLocale_object** @dummyLocale to %chpl_locale_object**), align 8, !tbaa !107
  %tmp5 = load %chpl_locale_object*, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  %tmp6 = icmp eq %chpl_locale_object* %tmp5, null
  br i1 %tmp6, label %bb23, label %bb7

bb7:                                              ; preds = %.split
  %tmp8 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp5, i64 0, i32 0, i32 0
  %tmp9 = load i32, i32* %tmp8, align 4, !tbaa !170
  %tmp10 = icmp sgt i32 %tmp9, 53
  %tmp11 = icmp ult i32 %tmp9, 56
  %tmp12 = and i1 %tmp10, %tmp11
  %tmp13 = bitcast %chpl_locale_object* %tmp5 to %chpl_AbstractRootLocale_object*
  %.0 = select i1 %tmp12, %chpl_AbstractRootLocale_object* %tmp13, %chpl_AbstractRootLocale_object* null
  %tmp14 = getelementptr inbounds %chpl_AbstractRootLocale_object, %chpl_AbstractRootLocale_object* %.0, i64 0, i32 0, i32 0, i32 0
  %tmp15 = load i32, i32* %tmp14, align 4, !tbaa !170
  %tmp16 = sext i32 %tmp15 to i64
  %tmp17 = mul nsw i64 %tmp16, 5
  %tmp18 = add nsw i64 %tmp17, 4
  %tmp19 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp18
  %tmp20 = bitcast void (i8*)** %tmp19 to %chpl_locale_object* (%chpl_AbstractRootLocale_object*, %struct.chpl_localeID_t*, i64, i32)**
  %tmp21 = load %chpl_locale_object* (%chpl_AbstractRootLocale_object*, %struct.chpl_localeID_t*, i64, i32)*, %chpl_locale_object* (%chpl_AbstractRootLocale_object*, %struct.chpl_localeID_t*, i64, i32)** %tmp20, align 8
  %tmp22 = tail call %chpl_locale_object* %tmp21(%chpl_AbstractRootLocale_object* %.0, %struct.chpl_localeID_t* nonnull %arg, i64 %arg3, i32 %arg4)
  br label %bb23

bb23:                                             ; preds = %.split, %bb7
  %.02 = phi %chpl_locale_object* [ %tmp22, %bb7 ], [ %tmp, %.split ]
  ret %chpl_locale_object* %.02
}

define internal i64 @runningTasks(%chpl_locale_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg, i64 0, i32 8, i32 0
  %tmp1 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp, i32 0)
  %tmp2 = icmp sgt i64 %tmp1, 1
  %.0 = select i1 %tmp2, i64 %tmp1, i64 1
  ret i64 %.0
}

define void @chpl_taskRunningCntInc(i64 %arg, i32 %arg1) #0 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = load i8, i8* @rootLocaleInitialized, align 1, !tbaa !2
  %tmp3 = icmp eq i8 %tmp2, 0
  br i1 %tmp3, label %bb11, label %bb4

bb4:                                              ; preds = %.split
  %tmp5 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp6 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp5, i32 -2)
  %tmp7 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp6, i32* %tmp7, align 8, !tbaa !110
  %tmp8 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg, i32 %arg1)
  %tmp9 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp8, i64 0, i32 8, i32 0
  %tmp10 = call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp9, i64 1, i32 0)
  br label %bb11

bb11:                                             ; preds = %.split, %bb4
  ret void
}

define void @chpl_taskRunningCntDec(i64 %arg, i32 %arg1) #0 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = load i8, i8* @rootLocaleInitialized, align 1, !tbaa !2
  %tmp3 = icmp eq i8 %tmp2, 0
  br i1 %tmp3, label %bb11, label %bb4

bb4:                                              ; preds = %.split
  %tmp5 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp6 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp5, i32 -2)
  %tmp7 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp6, i32* %tmp7, align 8, !tbaa !110
  %tmp8 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg, i32 %arg1)
  %tmp9 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp8, i64 0, i32 8, i32 0
  %tmp10 = call i64 @atomic_fetch_sub_explicit_int_least64_t(i64* nonnull %tmp9, i64 1, i32 0)
  br label %bb11

bb11:                                             ; preds = %.split, %bb4
  ret void
}

define void @chpl_taskRunningCntReset(i64 %arg, i32 %arg1) #0 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp3 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp2, i32 -2)
  %tmp4 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp3, i32* %tmp4, align 8, !tbaa !110
  %tmp5 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg, i32 %arg1)
  %tmp6 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp5, i64 0, i32 8, i32 0
  call void @atomic_store_explicit_int_least64_t(i64* nonnull %tmp6, i64 0, i32 0)
  ret void
}

define internal void @deinit20(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %chpl_locale_object*, %chpl_locale_object** @origRootLocale, align 8, !tbaa !158
  %tmp2 = icmp eq %chpl_locale_object* %tmp, null
  br i1 %tmp2, label %bb12, label %bb3

bb3:                                              ; preds = %.split
  %tmp4 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp, i64 0, i32 0, i32 0
  %tmp5 = load i32, i32* %tmp4, align 4, !tbaa !170
  %tmp6 = sext i32 %tmp5 to i64
  %tmp7 = mul nsw i64 %tmp6, 5
  %tmp8 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp7
  %tmp9 = bitcast void (i8*)** %tmp8 to void (%chpl_locale_object*, i64, i32)**
  %tmp10 = load void (%chpl_locale_object*, i64, i32)*, void (%chpl_locale_object*, i64, i32)** %tmp9, align 8
  tail call void %tmp10(%chpl_locale_object* nonnull %tmp, i64 %arg, i32 %arg1)
  %tmp11 = load i8*, i8** bitcast (%chpl_locale_object** @origRootLocale to i8**), align 8, !tbaa !158
  tail call void @chpl_here_free(i8* %tmp11, i64 %arg, i32 %arg1)
  br label %bb12

bb12:                                             ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_ChapelNumLocales(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelNumLocales_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb16

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @256, i64 0, i64 0), i64 16, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelNumLocales_p, align 1, !tbaa !8
  %tmp6 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @139, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp6, label %bb9, label %bb7

bb7:                                              ; preds = %bb3
  %tmp8 = tail call i64 @chpl_comm_default_num_locales()
  br label %bb12

bb9:                                              ; preds = %bb3
  %tmp10 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @139, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp11 = tail call i64 @_command_line_cast(i8* %tmp10, i64 %arg, i32 %arg1)
  br label %bb12

bb12:                                             ; preds = %bb9, %bb7
  %.0 = phi i64 [ %tmp8, %bb7 ], [ %tmp11, %bb9 ]
  store i64 %.0, i64* @numLocales, align 8, !tbaa !138
  %tmp13 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @numLocales to i8*))
  %tmp14 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp15 = add i32 %tmp14, -1
  store i32 %tmp15, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb16

bb16:                                             ; preds = %.split, %bb12
  ret void
}

define internal void @chpl__init_ChapelRange(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelRange_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @233, i64 0, i64 0), i64 11, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelRange_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @init21(%range_int64_t_boundedLow_F* nonnull %arg, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i8 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !216
  %tmp6 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %arg, i64 0, i32 1
  store i64 %arg2, i64* %tmp6, align 8, !tbaa !218
  ret void
}

define internal void @init22(%range_int64_t_bounded_F* nonnull %arg, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i8 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !219
  %tmp6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg, i64 0, i32 1
  store i64 %arg2, i64* %tmp6, align 8, !tbaa !220
  ret void
}

define internal void @init23(%range_int64_t_bounded_T* nonnull %arg, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i8 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !221
  %tmp6 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %arg, i64 0, i32 1
  store i64 %arg2, i64* %tmp6, align 8, !tbaa !223
  %tmp7 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %arg, i64 0, i32 2
  store i64 0, i64* %tmp7, align 8, !tbaa !224
  %tmp8 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %arg, i64 0, i32 3
  store i64 0, i64* %tmp8, align 8, !tbaa !225
  %tmp9 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %arg, i64 0, i32 4
  store i8 0, i8* %tmp9, align 1, !tbaa !226
  store i64 %arg3, i64* %tmp7, align 8, !tbaa !224
  store i64 %arg4, i64* %tmp8, align 8, !tbaa !225
  store i8 %arg5, i8* %tmp9, align 1, !tbaa !226
  ret void
}

define internal void @init24(%range_int64_t_bounded_F* nonnull %arg, i64 %arg1, i64 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg, i64 0, i32 0
  store i64 %arg1, i64* %tmp, align 8, !tbaa !219
  %tmp3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg, i64 0, i32 1
  store i64 %arg2, i64* %tmp3, align 8, !tbaa !220
  ret void
}

define internal void @chpl_build_bounded_range(i64 %arg, i64 %arg6, %range_int64_t_bounded_F* nonnull %arg7) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init22(%range_int64_t_bounded_F* %tmp, i64 %arg, i64 %arg6, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg7, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg7, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @chpl_build_low_bounded_range(i64 %arg, %range_int64_t_boundedLow_F* nonnull %arg6) {
bb:
  %tmp = alloca %range_int64_t_boundedLow_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init21(%range_int64_t_boundedLow_F* %tmp, i64 %arg, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %arg6, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %arg6, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal i64 @length(%range_int64_t_bounded_F %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = extractvalue %range_int64_t_bounded_F %arg, 0
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg, 1
  %tmp = icmp slt i64 %.elt2, %.elt
  %tmp3 = add i64 %.elt2, 1
  %tmp4 = sub i64 %tmp3, %.elt
  %.0 = select i1 %tmp, i64 0, i64 %tmp4
  ret i64 %.0
}

define internal i8 @isAmbiguous(%range_int64_t_bounded_T %arg) {
bb:
  %tmp = alloca %range_int64_t_bounded_T, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %range_int64_t_bounded_T %arg, %range_int64_t_bounded_T* %tmp, align 8
  %tmp2 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp, i64 0, i32 4
  %tmp3 = load i8, i8* %tmp2, align 8, !tbaa !226
  %tmp4 = icmp eq i8 %tmp3, 0
  br i1 %tmp4, label %bb5, label %bb9

bb5:                                              ; preds = %.split
  %tmp6 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp, i64 0, i32 2
  %tmp7 = load i64, i64* %tmp6, align 8, !tbaa !224
  %.off = add i64 %tmp7, 1
  %tmp8 = icmp ugt i64 %.off, 2
  %.0 = zext i1 %tmp8 to i8
  br label %bb9

bb9:                                              ; preds = %.split, %bb5
  %.01 = phi i8 [ %.0, %bb5 ], [ 0, %.split ]
  ret i8 %.01
}

define internal void @safeCast(%range_int64_t_bounded_F %arg, %range_int64_t_bounded_F* nonnull %arg18) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp19, i64 1, i64 0, i64 1, i64 0, i8 0)
  %tmp20 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %tmp21 = load i64, i64* %tmp20, align 8, !tbaa !219
  %.repack14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg18, i64 0, i32 0
  store i64 %tmp21, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg18, i64 0, i32 1
  store i64 %.elt2, i64* %.repack16, align 8
  ret void
}

define internal void @chpl_by_help(%range_int64_t_bounded_F %arg, i64 %arg6, %range_int64_t_bounded_T* nonnull %arg7) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.elt5 = extractvalue %range_int64_t_bounded_F %arg, 1
  store i64 %.elt5, i64* %.repack4, align 8
  %tmp8 = alloca %range_int64_t_bounded_T, align 8
  %tmp9 = icmp sgt i64 %arg6, 0
  br i1 %tmp9, label %bb10, label %bb13

bb10:                                             ; preds = %.split
  %tmp11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %tmp12 = load i64, i64* %tmp11, align 8, !tbaa !219
  br label %bb17

bb13:                                             ; preds = %.split
  %tmp14 = icmp ne i64 %arg6, 0
  %tmp15 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %tmp16 = load i64, i64* %tmp15, align 8
  %.01 = zext i1 %tmp14 to i8
  %.0 = select i1 %tmp14, i64 %tmp16, i64 0
  br label %bb17

bb17:                                             ; preds = %bb13, %bb10
  %.03 = phi i8 [ 1, %bb10 ], [ %.01, %bb13 ]
  %.02 = phi i64 [ %tmp12, %bb10 ], [ %.0, %bb13 ]
  %tmp18 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %tmp19 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %tmp20 = load i64, i64* %tmp18, align 8, !tbaa !219
  %tmp21 = load i64, i64* %tmp19, align 8, !tbaa !220
  call void @init23(%range_int64_t_bounded_T* %tmp8, i64 %tmp20, i64 %tmp21, i64 %arg6, i64 %.02, i8 %.03)
  %tmp22 = load %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp8, align 8
  store %range_int64_t_bounded_T %tmp22, %range_int64_t_bounded_T* %arg7, align 8
  ret void
}

define internal void @this4(%range_int64_t_bounded_F %arg, %range_int64_t_bounded_F %arg16, %range_int64_t_bounded_F* nonnull %arg17) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.elt4 = extractvalue %range_int64_t_bounded_F %arg, 1
  store i64 %.elt4, i64* %.repack3, align 8
  %tmp18 = alloca %range_int64_t_bounded_F, align 8
  %.repack5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp18, i64 0, i32 0
  %.elt6 = extractvalue %range_int64_t_bounded_F %arg16, 0
  store i64 %.elt6, i64* %.repack5, align 8
  %.repack7 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp18, i64 0, i32 1
  %.elt8 = extractvalue %range_int64_t_bounded_F %arg16, 1
  store i64 %.elt8, i64* %.repack7, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  %tmp20 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %tmp21 = load i64, i64* %tmp20, align 8, !tbaa !219
  %tmp22 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %tmp23 = load i64, i64* %tmp22, align 8, !tbaa !220
  %tmp24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp18, i64 0, i32 0
  %tmp25 = load i64, i64* %tmp24, align 8, !tbaa !219
  %tmp26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp18, i64 0, i32 1
  %tmp27 = load i64, i64* %tmp26, align 8, !tbaa !220
  %tmp28 = icmp sgt i64 %tmp21, %tmp25
  %.02 = select i1 %tmp28, i64 %tmp21, i64 %tmp25
  %tmp29 = icmp slt i64 %tmp23, %tmp27
  %.01 = select i1 %tmp29, i64 %tmp23, i64 %tmp27
  call void @init22(%range_int64_t_bounded_F* %tmp19, i64 %.02, i64 %.01, i64 1, i64 0, i8 1)
  %.elt9 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp19, i64 0, i32 0
  %.unpack = load i64, i64* %.elt9, align 8
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp19, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.repack12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg17, i64 0, i32 0
  store i64 %.unpack, i64* %.repack12, align 8
  %.repack14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg17, i64 0, i32 1
  store i64 %.unpack11, i64* %.repack14, align 8
  ret void
}

define internal void @chpl_count_help(%range_int64_t_boundedLow_F %arg, i64 %arg16, %range_int64_t_bounded_F* nonnull %arg17, i64 %arg18, i32 %arg19) {
bb:
  %tmp = alloca %range_int64_t_boundedLow_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.repack = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 0
  %.elt = extractvalue %range_int64_t_boundedLow_F %arg, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 1
  %.elt5 = extractvalue %range_int64_t_boundedLow_F %arg, 1
  store i64 %.elt5, i64* %.repack4, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %range_int64_t_bounded_F, align 8
  %tmp22 = alloca %range_int64_t_bounded_F, align 8
  %tmp23 = load %string, %string* @_str_literal_763, align 16
  store %string %tmp23, %string* %tmp20, align 8
  %tmp24 = bitcast %string* %tmp20 to i8*
  %tmp25 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp24)
  %tmp26 = icmp eq i64 %arg16, 0
  br i1 %tmp26, label %bb27, label %bb30

bb27:                                             ; preds = %.split
  call void @init22(%range_int64_t_bounded_F* %tmp21, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp21, i64 0, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp28 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp21, i64 0, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp29 = insertvalue %range_int64_t_bounded_F %tmp28, i64 %.unpack15, 1
  br label %bb56

bb30:                                             ; preds = %.split
  %tmp31 = icmp sgt i64 %arg16, -1
  br i1 %tmp31, label %bb33, label %bb32

bb32:                                             ; preds = %bb30
  call void @halt(%string* %tmp20, i64 %arg18, i32 %arg19)
  br label %bb33

bb33:                                             ; preds = %bb32, %bb30
  %tmp34 = icmp sgt i64 %arg16, 0
  br i1 %tmp34, label %bb35, label %bb38

bb35:                                             ; preds = %bb33
  %tmp36 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 0
  %tmp37 = load i64, i64* %tmp36, align 8, !tbaa !216
  br label %bb43

bb38:                                             ; preds = %bb33
  %tmp39 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 1
  %tmp40 = add nsw i64 %arg16, 1
  %tmp41 = load i64, i64* %tmp39, align 8, !tbaa !218
  %tmp42 = call i64 @chpl__add(i64 %tmp41, i64 %tmp40)
  br label %bb43

bb43:                                             ; preds = %bb35, %bb38
  %.01 = phi i64 [ %tmp37, %bb35 ], [ %tmp42, %bb38 ]
  %tmp44 = icmp slt i64 %arg16, 0
  br i1 %tmp44, label %bb45, label %bb48

bb45:                                             ; preds = %bb43
  %tmp46 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 1
  %tmp47 = load i64, i64* %tmp46, align 8, !tbaa !218
  br label %bb53

bb48:                                             ; preds = %bb43
  %tmp49 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 0
  %tmp50 = add nsw i64 %arg16, -1
  %tmp51 = load i64, i64* %tmp49, align 8, !tbaa !216
  %tmp52 = call i64 @chpl__add(i64 %tmp51, i64 %tmp50)
  br label %bb53

bb53:                                             ; preds = %bb48, %bb45
  %.0 = phi i64 [ %tmp47, %bb45 ], [ %tmp52, %bb48 ]
  call void @init24(%range_int64_t_bounded_F* %tmp22, i64 %.01, i64 %.0)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 0
  %.unpack = load i64, i64* %.elt6, align 8
  %tmp54 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt7 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 1
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp55 = insertvalue %range_int64_t_bounded_F %tmp54, i64 %.unpack8, 1
  br label %bb56

bb56:                                             ; preds = %bb53, %bb27
  %.03 = phi %range_int64_t_bounded_F [ %tmp29, %bb27 ], [ %tmp55, %bb53 ]
  %.repack9 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg17, i64 0, i32 0
  %.03.elt = extractvalue %range_int64_t_bounded_F %.03, 0
  store i64 %.03.elt, i64* %.repack9, align 8
  %.repack10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg17, i64 0, i32 1
  %.03.elt11 = extractvalue %range_int64_t_bounded_F %.03, 1
  store i64 %.03.elt11, i64* %.repack10, align 8
  ret void
}

define internal void @chpl___POUND_(%range_int64_t_boundedLow_F %arg, i64 %arg6, %range_int64_t_bounded_F* nonnull %arg7, i64 %arg8, i32 %arg9) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @chpl_count_help(%range_int64_t_boundedLow_F %arg, i64 %arg6, %range_int64_t_bounded_F* %tmp, i64 %arg8, i32 %arg9)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg7, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg7, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal i64 @chpl__mod(i64 %arg, i64 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp slt i64 %arg2, 0
  %tmp3 = sub nsw i64 0, %arg2
  %.0 = select i1 %tmp, i64 %tmp3, i64 %arg2
  %tmp4 = srem i64 %arg, %.0
  %tmp5 = icmp slt i64 %tmp4, 0
  %tmp6 = select i1 %tmp5, i64 %.0, i64 0
  %.01 = add nsw i64 %tmp4, %tmp6
  ret i64 %.01
}

define internal i64 @chpl__diffMod(i64 %arg, i64 %arg2, i64 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp slt i64 %arg3, 0
  %tmp4 = sub nsw i64 0, %arg3
  %.01 = select i1 %tmp, i64 %tmp4, i64 %arg3
  %tmp5 = tail call i64 @chpl__mod(i64 %arg, i64 %.01)
  %tmp6 = tail call i64 @chpl__mod(i64 %arg2, i64 %.01)
  %tmp7 = icmp slt i64 %tmp5, %tmp6
  %tmp8 = select i1 %tmp7, i64 %.01, i64 0
  %.0.v = add i64 %tmp5, %tmp8
  %.0 = sub i64 %.0.v, %tmp6
  ret i64 %.0
}

define internal i64 @chpl__add(i64 %arg, i64 %arg8) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp sgt i64 %arg, 0
  %tmp9 = icmp sgt i64 %arg8, 0
  %tmp10 = sub nsw i64 9223372036854775807, %arg
  %tmp11 = icmp slt i64 %tmp10, %arg8
  %not. = and i1 %tmp, %tmp9
  %narrow = and i1 %tmp11, %not.
  br i1 %narrow, label %bb19, label %bb12

bb12:                                             ; preds = %.split
  %tmp13 = and i64 %arg8, %arg
  %tmp14 = icmp sgt i64 %tmp13, -1
  %tmp15 = sub nsw i64 -9223372036854775808, %arg
  %tmp16 = icmp sle i64 %tmp15, %arg8
  %tmp17 = or i1 %tmp14, %tmp16
  %tmp18 = add nsw i64 %arg8, %arg
  %spec.select = select i1 %tmp17, i64 %tmp18, i64 -9223372036854775808
  ret i64 %spec.select

bb19:                                             ; preds = %.split
  ret i64 9223372036854775807
}

define void @chpl__init_ChapelStandard(i64 %arg, i32 %arg1) #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelStandard_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @221, i64 0, i64 0), i64 14, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelStandard_p, align 1, !tbaa !8
  tail call void @chpl__init_CPtr(i64 %arg, i32 %arg1)
  tail call void @chpl__init_CString(i64 %arg, i32 %arg1)
  tail call void @chpl__init_String(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelDebugPrint(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelBase(i64 %arg, i32 %arg1)
  tail call void @chpl__init_MemConsistency(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Atomics(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelThreads(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelTuple(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelRange(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelTaskDataHelp(i64 %arg, i32 %arg1)
  tail call void @chpl__init_LocaleModel(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelLocale(i64 %arg, i32 %arg1)
  tail call void @chpl__init_DefaultRectangular(i64 %arg, i32 %arg1)
  tail call void @chpl__init_LocalesArray(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelArray(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelDistribution(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelIO(i64 %arg, i32 %arg1)
  tail call void @chpl__init_LocaleTree(i64 %arg, i32 %arg1)
  tail call void @chpl__init_DefaultAssociative(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ExternalArray(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelTaskTable(i64 %arg, i32 %arg1)
  tail call void @chpl__init_MemTracking(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelUtil(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelError(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelDynDispHack(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelTaskData(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Assert(i64 %arg, i32 %arg1)
  tail call void @chpl__init_AlignedTSupport(i64 %arg, i32 %arg1)
  tail call void @chpl__init_RangeChunk(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Sort(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_ChapelStringLiterals(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelStringLiterals_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @141, i64 0, i64 0), i64 20, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelStringLiterals_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define void @chpl__initStringLiterals() #0 {
bb:
  %tmp = alloca %string, align 8
  %tmp1 = alloca %string, align 8
  %tmp2 = alloca %string, align 8
  %tmp3 = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  %tmp24 = alloca %string, align 8
  %tmp25 = alloca %string, align 8
  %tmp26 = alloca %string, align 8
  %tmp27 = alloca %string, align 8
  %tmp28 = alloca %string, align 8
  %tmp29 = alloca %string, align 8
  %tmp30 = alloca %string, align 8
  %tmp31 = alloca %string, align 8
  %tmp32 = alloca %string, align 8
  %tmp33 = alloca %string, align 8
  %tmp34 = alloca %string, align 8
  %tmp35 = alloca %string, align 8
  %tmp36 = alloca %string, align 8
  %tmp37 = alloca %string, align 8
  %tmp38 = alloca %string, align 8
  %tmp39 = alloca %string, align 8
  %tmp40 = alloca %string, align 8
  %tmp41 = alloca %string, align 8
  %tmp42 = alloca %string, align 8
  %tmp43 = alloca %string, align 8
  %tmp44 = alloca %string, align 8
  %tmp45 = alloca %string, align 8
  %tmp46 = alloca %string, align 8
  %tmp47 = alloca %string, align 8
  %tmp48 = alloca %string, align 8
  %tmp49 = alloca %string, align 8
  %tmp50 = alloca %string, align 8
  %tmp51 = alloca %string, align 8
  %tmp52 = alloca %string, align 8
  %tmp53 = alloca %string, align 8
  %tmp54 = alloca %string, align 8
  %tmp55 = alloca %string, align 8
  %tmp56 = alloca %string, align 8
  %tmp57 = alloca %string, align 8
  %tmp58 = alloca %string, align 8
  %tmp59 = alloca %string, align 8
  %tmp60 = alloca %string, align 8
  %tmp61 = alloca %string, align 8
  %tmp62 = alloca %string, align 8
  %tmp63 = alloca %string, align 8
  %tmp64 = alloca %string, align 8
  %tmp65 = alloca %string, align 8
  %tmp66 = alloca %string, align 8
  %tmp67 = alloca %string, align 8
  %tmp68 = alloca %string, align 8
  %tmp69 = alloca %string, align 8
  %tmp70 = alloca %string, align 8
  %tmp71 = alloca %string, align 8
  %tmp72 = alloca %string, align 8
  %tmp73 = alloca %string, align 8
  %tmp74 = alloca %string, align 8
  %tmp75 = alloca %string, align 8
  %tmp76 = alloca %string, align 8
  %tmp77 = alloca %string, align 8
  %tmp78 = alloca %string, align 8
  %tmp79 = alloca %string, align 8
  %tmp80 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init37(%string* %tmp, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @142, i64 0, i64 0), i64 29, i64 30, i8 0, i8 0, i64 40, i32 2)
  %tmp81 = load %string, %string* %tmp, align 8
  store %string %tmp81, %string* @_str_literal_30, align 16
  %tmp82 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_30 to i8*))
  call void @init37(%string* %tmp1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @143, i64 0, i64 0), i64 54, i64 55, i8 0, i8 0, i64 799, i32 2)
  %tmp83 = load %string, %string* %tmp1, align 8
  store %string %tmp83, %string* @_str_literal_180, align 16
  %tmp84 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_180 to i8*))
  call void @init37(%string* %tmp2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @144, i64 0, i64 0), i64 39, i64 40, i8 0, i8 0, i64 175, i32 7)
  %tmp85 = load %string, %string* %tmp2, align 8
  store %string %tmp85, %string* @_str_literal_314, align 16
  %tmp86 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_314 to i8*))
  call void @init37(%string* %tmp3, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @145, i64 0, i64 0), i64 39, i64 40, i8 0, i8 0, i64 396, i32 8)
  %tmp87 = load %string, %string* %tmp3, align 8
  store %string %tmp87, %string* @_str_literal_349, align 16
  %tmp88 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_349 to i8*))
  call void @init37(%string* %tmp4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @146, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 533, i32 8)
  %tmp89 = load %string, %string* %tmp4, align 8
  store %string %tmp89, %string* @_str_literal_361, align 16
  %tmp90 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_361 to i8*))
  call void @init37(%string* %tmp5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @147, i64 0, i64 0), i64 4, i64 5, i8 0, i8 0, i64 1026, i32 8)
  %tmp91 = load %string, %string* %tmp5, align 8
  store %string %tmp91, %string* @_str_literal_383, align 16
  %tmp92 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_383 to i8*))
  call void @init37(%string* %tmp6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @148, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 1027, i32 8)
  %tmp93 = load %string, %string* %tmp6, align 8
  store %string %tmp93, %string* @_str_literal_385, align 16
  %tmp94 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_385 to i8*))
  call void @init37(%string* %tmp7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @149, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 1806, i32 8)
  %tmp95 = load %string, %string* %tmp7, align 8
  store %string %tmp95, %string* @_str_literal_405, align 16
  %tmp96 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_405 to i8*))
  call void @init37(%string* %tmp8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @150, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 1810, i32 8)
  %tmp97 = load %string, %string* %tmp8, align 8
  store %string %tmp97, %string* @_str_literal_413, align 16
  %tmp98 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_413 to i8*))
  call void @init37(%string* %tmp9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @151, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 1812, i32 8)
  %tmp99 = load %string, %string* %tmp9, align 8
  store %string %tmp99, %string* @_str_literal_417, align 16
  %tmp100 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_417 to i8*))
  call void @init37(%string* %tmp10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @152, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 1964, i32 8)
  %tmp101 = load %string, %string* %tmp10, align 8
  store %string %tmp101, %string* @_str_literal_428, align 16
  %tmp102 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_428 to i8*))
  call void @init37(%string* %tmp11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @153, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 102, i32 11)
  %tmp103 = load %string, %string* %tmp11, align 8
  store %string %tmp103, %string* @_str_literal_461, align 16
  %tmp104 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_461 to i8*))
  call void @init37(%string* %tmp12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @154, i64 0, i64 0), i64 4, i64 5, i8 0, i8 0, i64 201, i32 22)
  %tmp105 = load %string, %string* %tmp12, align 8
  store %string %tmp105, %string* @_str_literal_590, align 16
  %tmp106 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_590 to i8*))
  call void @init37(%string* %tmp13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @155, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 265, i32 22)
  %tmp107 = load %string, %string* %tmp13, align 8
  store %string %tmp107, %string* @_str_literal_613, align 16
  %tmp108 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_613 to i8*))
  call void @init37(%string* %tmp14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @156, i64 0, i64 0), i64 2, i64 3, i8 0, i8 0, i64 266, i32 22)
  %tmp109 = load %string, %string* %tmp14, align 8
  store %string %tmp109, %string* @_str_literal_615, align 16
  %tmp110 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_615 to i8*))
  call void @init37(%string* %tmp15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @157, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 267, i32 22)
  %tmp111 = load %string, %string* %tmp15, align 8
  store %string %tmp111, %string* @_str_literal_617, align 16
  %tmp112 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_617 to i8*))
  call void @init37(%string* %tmp16, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @158, i64 0, i64 0), i64 56, i64 57, i8 0, i8 0, i64 1482, i32 23)
  %tmp113 = load %string, %string* %tmp16, align 8
  store %string %tmp113, %string* @_str_literal_763, align 16
  %tmp114 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_763 to i8*))
  call void @init37(%string* %tmp17, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @159, i64 0, i64 0), i64 46, i64 47, i8 0, i8 0, i64 68, i32 27)
  %tmp115 = load %string, %string* %tmp17, align 8
  store %string %tmp115, %string* @_str_literal_919, align 16
  %tmp116 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_919 to i8*))
  call void @init37(%string* %tmp18, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @160, i64 0, i64 0), i64 34, i64 35, i8 0, i8 0, i64 27, i32 29)
  %tmp117 = load %string, %string* %tmp18, align 8
  store %string %tmp117, %string* @_str_literal_957, align 16
  %tmp118 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_957 to i8*))
  call void @init37(%string* %tmp19, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @161, i64 0, i64 0), i64 33, i64 34, i8 0, i8 0, i64 28, i32 29)
  %tmp119 = load %string, %string* %tmp19, align 8
  store %string %tmp119, %string* @_str_literal_959, align 16
  %tmp120 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_959 to i8*))
  call void @init37(%string* %tmp20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @162, i64 0, i64 0), i64 2, i64 3, i8 0, i8 0, i64 217, i32 29)
  %tmp121 = load %string, %string* %tmp20, align 8
  store %string %tmp121, %string* @_str_literal_972, align 16
  %tmp122 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_972 to i8*))
  call void @init37(%string* %tmp21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @163, i64 0, i64 0), i64 2, i64 3, i8 0, i8 0, i64 1467, i32 29)
  %tmp123 = load %string, %string* %tmp21, align 8
  store %string %tmp123, %string* @_str_literal_1077, align 16
  %tmp124 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1077 to i8*))
  call void @init37(%string* %tmp22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @164, i64 0, i64 0), i64 2, i64 3, i8 0, i8 0, i64 1492, i32 29)
  %tmp125 = load %string, %string* %tmp22, align 8
  store %string %tmp125, %string* @_str_literal_1080, align 16
  %tmp126 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1080 to i8*))
  call void @init37(%string* %tmp23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @165, i64 0, i64 0), i64 2, i64 3, i8 0, i8 0, i64 2287, i32 31)
  %tmp127 = load %string, %string* %tmp23, align 8
  store %string %tmp127, %string* @_str_literal_1414, align 16
  %tmp128 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1414 to i8*))
  call void @init37(%string* %tmp24, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @166, i64 0, i64 0), i64 44, i64 45, i8 0, i8 0, i64 190, i32 32)
  %tmp129 = load %string, %string* %tmp24, align 8
  store %string %tmp129, %string* @_str_literal_1599, align 16
  %tmp130 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1599 to i8*))
  call void @init37(%string* %tmp25, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @167, i64 0, i64 0), i64 48, i64 49, i8 0, i8 0, i64 674, i32 32)
  %tmp131 = load %string, %string* %tmp25, align 8
  store %string %tmp131, %string* @_str_literal_1633, align 16
  %tmp132 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1633 to i8*))
  call void @init37(%string* %tmp26, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @168, i64 0, i64 0), i64 46, i64 47, i8 0, i8 0, i64 701, i32 32)
  %tmp133 = load %string, %string* %tmp26, align 8
  store %string %tmp133, %string* @_str_literal_1636, align 16
  %tmp134 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1636 to i8*))
  call void @init37(%string* %tmp27, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @169, i64 0, i64 0), i64 16, i64 17, i8 0, i8 0, i64 983, i32 32)
  %tmp135 = load %string, %string* %tmp27, align 8
  store %string %tmp135, %string* @_str_literal_1662, align 16
  %tmp136 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1662 to i8*))
  call void @init37(%string* %tmp28, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @170, i64 0, i64 0), i64 28, i64 29, i8 0, i8 0, i64 984, i32 32)
  %tmp137 = load %string, %string* %tmp28, align 8
  store %string %tmp137, %string* @_str_literal_1664, align 16
  %tmp138 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1664 to i8*))
  call void @init37(%string* %tmp29, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @171, i64 0, i64 0), i64 15, i64 16, i8 0, i8 0, i64 688, i32 33)
  %tmp139 = load %string, %string* %tmp29, align 8
  store %string %tmp139, %string* @_str_literal_1687, align 16
  %tmp140 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1687 to i8*))
  call void @init37(%string* %tmp30, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @172, i64 0, i64 0), i64 61, i64 62, i8 0, i8 0, i64 58, i32 40)
  %tmp141 = load %string, %string* %tmp30, align 8
  store %string %tmp141, %string* @_str_literal_1901, align 16
  %tmp142 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1901 to i8*))
  call void @init37(%string* %tmp31, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @173, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 51, i32 43)
  %tmp143 = load %string, %string* %tmp31, align 8
  store %string %tmp143, %string* @_str_literal_1909, align 16
  %tmp144 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1909 to i8*))
  call void @init37(%string* %tmp32, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @174, i64 0, i64 0), i64 20, i64 21, i8 0, i8 0, i64 72, i32 43)
  %tmp145 = load %string, %string* %tmp32, align 8
  store %string %tmp145, %string* @_str_literal_1911, align 16
  %tmp146 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1911 to i8*))
  call void @init37(%string* %tmp33, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @175, i64 0, i64 0), i64 18, i64 19, i8 0, i8 0, i64 96, i32 43)
  %tmp147 = load %string, %string* %tmp33, align 8
  store %string %tmp147, %string* @_str_literal_1915, align 16
  %tmp148 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1915 to i8*))
  call void @init37(%string* %tmp34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @176, i64 0, i64 0), i64 3, i64 4, i8 0, i8 0, i64 96, i32 43)
  %tmp149 = load %string, %string* %tmp34, align 8
  store %string %tmp149, %string* @_str_literal_1917, align 16
  %tmp150 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1917 to i8*))
  call void @init37(%string* %tmp35, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @177, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 260, i32 43)
  %tmp151 = load %string, %string* %tmp35, align 8
  store %string %tmp151, %string* @_str_literal_1921, align 16
  %tmp152 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1921 to i8*))
  call void @init37(%string* %tmp36, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @178, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 262, i32 43)
  %tmp153 = load %string, %string* %tmp36, align 8
  store %string %tmp153, %string* @_str_literal_1924, align 16
  %tmp154 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1924 to i8*))
  call void @init37(%string* %tmp37, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @179, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 286, i32 43)
  %tmp155 = load %string, %string* %tmp37, align 8
  store %string %tmp155, %string* @_str_literal_1926, align 16
  %tmp156 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1926 to i8*))
  call void @init37(%string* %tmp38, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @180, i64 0, i64 0), i64 5, i64 6, i8 0, i8 0, i64 289, i32 43)
  %tmp157 = load %string, %string* %tmp38, align 8
  store %string %tmp157, %string* @_str_literal_1928, align 16
  %tmp158 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1928 to i8*))
  call void @init37(%string* %tmp39, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @181, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 389, i32 43)
  %tmp159 = load %string, %string* %tmp39, align 8
  store %string %tmp159, %string* @_str_literal_1942, align 16
  %tmp160 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1942 to i8*))
  call void @init37(%string* %tmp40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @182, i64 0, i64 0), i64 3, i64 4, i8 0, i8 0, i64 390, i32 43)
  %tmp161 = load %string, %string* %tmp40, align 8
  store %string %tmp161, %string* @_str_literal_1944, align 16
  %tmp162 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1944 to i8*))
  call void @init37(%string* %tmp41, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @183, i64 0, i64 0), i64 13, i64 14, i8 0, i8 0, i64 390, i32 43)
  %tmp163 = load %string, %string* %tmp41, align 8
  store %string %tmp163, %string* @_str_literal_1946, align 16
  %tmp164 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1946 to i8*))
  call void @init37(%string* %tmp42, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @184, i64 0, i64 0), i64 15, i64 16, i8 0, i8 0, i64 391, i32 43)
  %tmp165 = load %string, %string* %tmp42, align 8
  store %string %tmp165, %string* @_str_literal_1948, align 16
  %tmp166 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1948 to i8*))
  call void @init37(%string* %tmp43, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @185, i64 0, i64 0), i64 22, i64 23, i8 0, i8 0, i64 424, i32 43)
  %tmp167 = load %string, %string* %tmp43, align 8
  store %string %tmp167, %string* @_str_literal_1952, align 16
  %tmp168 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1952 to i8*))
  call void @init37(%string* %tmp44, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @186, i64 0, i64 0), i64 5, i64 6, i8 0, i8 0, i64 42, i32 48)
  %tmp169 = load %string, %string* %tmp44, align 8
  store %string %tmp169, %string* @_str_literal_1964, align 16
  %tmp170 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1964 to i8*))
  call void @init37(%string* %tmp45, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @187, i64 0, i64 0), i64 34, i64 35, i8 0, i8 0, i64 49, i32 48)
  %tmp171 = load %string, %string* %tmp45, align 8
  store %string %tmp171, %string* @_str_literal_1966, align 16
  %tmp172 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1966 to i8*))
  call void @init37(%string* %tmp46, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @188, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 55, i32 48)
  %tmp173 = load %string, %string* %tmp46, align 8
  store %string %tmp173, %string* @_str_literal_1968, align 16
  %tmp174 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1968 to i8*))
  call void @init37(%string* %tmp47, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @189, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 122, i32 48)
  %tmp175 = load %string, %string* %tmp47, align 8
  store %string %tmp175, %string* @_str_literal_1976, align 16
  %tmp176 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1976 to i8*))
  call void @init37(%string* %tmp48, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @190, i64 0, i64 0), i64 10, i64 11, i8 0, i8 0, i64 136, i32 48)
  %tmp177 = load %string, %string* %tmp48, align 8
  store %string %tmp177, %string* @_str_literal_1980, align 16
  %tmp178 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_1980 to i8*))
  call void @init37(%string* %tmp49, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @191, i64 0, i64 0), i64 15, i64 16, i8 0, i8 0, i64 12, i32 57)
  %tmp179 = load %string, %string* %tmp49, align 8
  store %string %tmp179, %string* @_str_literal_2065, align 16
  %tmp180 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2065 to i8*))
  call void @init37(%string* %tmp50, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @192, i64 0, i64 0), i64 14, i64 15, i8 0, i8 0, i64 15, i32 57)
  %tmp181 = load %string, %string* %tmp50, align 8
  store %string %tmp181, %string* @_str_literal_2067, align 16
  %tmp182 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2067 to i8*))
  call void @init37(%string* %tmp51, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @193, i64 0, i64 0), i64 38, i64 39, i8 0, i8 0, i64 1295, i32 68)
  %tmp183 = load %string, %string* %tmp51, align 8
  store %string %tmp183, %string* @_str_literal_2255, align 16
  %tmp184 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2255 to i8*))
  call void @init37(%string* %tmp52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @194, i64 0, i64 0), i64 12, i64 13, i8 0, i8 0, i64 1462, i32 68)
  %tmp185 = load %string, %string* %tmp52, align 8
  store %string %tmp185, %string* @_str_literal_2273, align 16
  %tmp186 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2273 to i8*))
  call void @init37(%string* %tmp53, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @195, i64 0, i64 0), i64 7, i64 8, i8 0, i8 0, i64 1476, i32 68)
  %tmp187 = load %string, %string* %tmp53, align 8
  store %string %tmp187, %string* @_str_literal_2276, align 16
  %tmp188 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2276 to i8*))
  call void @init37(%string* %tmp54, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @196, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 1708, i32 68)
  %tmp189 = load %string, %string* %tmp54, align 8
  store %string %tmp189, %string* @_str_literal_2350, align 16
  %tmp190 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2350 to i8*))
  call void @init37(%string* %tmp55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @197, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 1765, i32 68)
  %tmp191 = load %string, %string* %tmp55, align 8
  store %string %tmp191, %string* @_str_literal_2354, align 16
  %tmp192 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2354 to i8*))
  call void @init37(%string* %tmp56, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @198, i64 0, i64 0), i64 41, i64 42, i8 0, i8 0, i64 2174, i32 68)
  %tmp193 = load %string, %string* %tmp56, align 8
  store %string %tmp193, %string* @_str_literal_2380, align 16
  %tmp194 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2380 to i8*))
  call void @init37(%string* %tmp57, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @199, i64 0, i64 0), i64 7, i64 8, i8 0, i8 0, i64 2181, i32 68)
  %tmp195 = load %string, %string* %tmp57, align 8
  store %string %tmp195, %string* @_str_literal_2383, align 16
  %tmp196 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2383 to i8*))
  call void @init37(%string* %tmp58, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @200, i64 0, i64 0), i64 14, i64 15, i8 0, i8 0, i64 2651, i32 68)
  %tmp197 = load %string, %string* %tmp58, align 8
  store %string %tmp197, %string* @_str_literal_2419, align 16
  %tmp198 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2419 to i8*))
  call void @init37(%string* %tmp59, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @201, i64 0, i64 0), i64 14, i64 15, i8 0, i8 0, i64 2774, i32 68)
  %tmp199 = load %string, %string* %tmp59, align 8
  store %string %tmp199, %string* @_str_literal_2430, align 16
  %tmp200 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2430 to i8*))
  call void @init37(%string* %tmp60, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @202, i64 0, i64 0), i64 23, i64 24, i8 0, i8 0, i64 3395, i32 68)
  %tmp201 = load %string, %string* %tmp60, align 8
  store %string %tmp201, %string* @_str_literal_2468, align 16
  %tmp202 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2468 to i8*))
  call void @init37(%string* %tmp61, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @203, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 3505, i32 68)
  %tmp203 = load %string, %string* %tmp61, align 8
  store %string %tmp203, %string* @_str_literal_2474, align 16
  %tmp204 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2474 to i8*))
  call void @init37(%string* %tmp62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @204, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 3548, i32 68)
  %tmp205 = load %string, %string* %tmp62, align 8
  store %string %tmp205, %string* @_str_literal_2477, align 16
  %tmp206 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2477 to i8*))
  call void @init37(%string* %tmp63, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @205, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 3548, i32 68)
  %tmp207 = load %string, %string* %tmp63, align 8
  store %string %tmp207, %string* @_str_literal_2479, align 16
  %tmp208 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2479 to i8*))
  call void @init37(%string* %tmp64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @206, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 3548, i32 68)
  %tmp209 = load %string, %string* %tmp64, align 8
  store %string %tmp209, %string* @_str_literal_2481, align 16
  %tmp210 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2481 to i8*))
  call void @init37(%string* %tmp65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @207, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 3548, i32 68)
  %tmp211 = load %string, %string* %tmp65, align 8
  store %string %tmp211, %string* @_str_literal_2483, align 16
  %tmp212 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2483 to i8*))
  call void @init37(%string* %tmp66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @208, i64 0, i64 0), i64 1, i64 2, i8 0, i8 0, i64 3548, i32 68)
  %tmp213 = load %string, %string* %tmp66, align 8
  store %string %tmp213, %string* @_str_literal_2485, align 16
  %tmp214 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2485 to i8*))
  call void @init37(%string* %tmp67, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @209, i64 0, i64 0), i64 17, i64 18, i8 0, i8 0, i64 4123, i32 68)
  %tmp215 = load %string, %string* %tmp67, align 8
  store %string %tmp215, %string* @_str_literal_2530, align 16
  %tmp216 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2530 to i8*))
  call void @init37(%string* %tmp68, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @210, i64 0, i64 0), i64 0, i64 0, i8 0, i8 0, i64 4124, i32 68)
  %tmp217 = load %string, %string* %tmp68, align 8
  store %string %tmp217, %string* @_str_literal_2532, align 16
  %tmp218 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2532 to i8*))
  call void @init37(%string* %tmp69, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @211, i64 0, i64 0), i64 11, i64 12, i8 0, i8 0, i64 399, i32 73)
  %tmp219 = load %string, %string* %tmp69, align 8
  store %string %tmp219, %string* @_str_literal_2724, align 16
  %tmp220 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2724 to i8*))
  call void @init37(%string* %tmp70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @212, i64 0, i64 0), i64 8, i64 9, i8 0, i8 0, i64 400, i32 73)
  %tmp221 = load %string, %string* %tmp70, align 8
  store %string %tmp221, %string* @_str_literal_2726, align 16
  %tmp222 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2726 to i8*))
  call void @init37(%string* %tmp71, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @213, i64 0, i64 0), i64 29, i64 30, i8 0, i8 0, i64 0, i32 1)
  %tmp223 = load %string, %string* %tmp71, align 8
  store %string %tmp223, %string* @_str_literal_2967, align 16
  %tmp224 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_2967 to i8*))
  call void @init37(%string* %tmp72, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @214, i64 0, i64 0), i64 37, i64 38, i8 0, i8 0, i64 1622, i32 8)
  %tmp225 = load %string, %string* %tmp72, align 8
  store %string %tmp225, %string* @_str_literal_3171, align 16
  %tmp226 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3171 to i8*))
  call void @init37(%string* %tmp73, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @53, i64 0, i64 0), i64 23, i64 24, i8 0, i8 0, i64 31, i32 48)
  %tmp227 = load %string, %string* %tmp73, align 8
  store %string %tmp227, %string* @_str_literal_3195, align 16
  %tmp228 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3195 to i8*))
  call void @init37(%string* %tmp74, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @215, i64 0, i64 0), i64 52, i64 53, i8 0, i8 0, i64 31, i32 48)
  %tmp229 = load %string, %string* %tmp74, align 8
  store %string %tmp229, %string* @_str_literal_3197, align 16
  %tmp230 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3197 to i8*))
  call void @init37(%string* %tmp75, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @216, i64 0, i64 0), i64 38, i64 39, i8 0, i8 0, i64 1622, i32 8)
  %tmp231 = load %string, %string* %tmp75, align 8
  store %string %tmp231, %string* @_str_literal_3218, align 16
  %tmp232 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3218 to i8*))
  call void @init37(%string* %tmp76, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @136, i64 0, i64 0), i64 6, i64 7, i8 0, i8 0, i64 31, i32 48)
  %tmp233 = load %string, %string* %tmp76, align 8
  store %string %tmp233, %string* @_str_literal_3226, align 16
  %tmp234 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3226 to i8*))
  call void @init37(%string* %tmp77, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @217, i64 0, i64 0), i64 34, i64 35, i8 0, i8 0, i64 31, i32 48)
  %tmp235 = load %string, %string* %tmp77, align 8
  store %string %tmp235, %string* @_str_literal_3228, align 16
  %tmp236 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3228 to i8*))
  call void @init37(%string* %tmp78, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @218, i64 0, i64 0), i64 9, i64 10, i8 0, i8 0, i64 31, i32 48)
  %tmp237 = load %string, %string* %tmp78, align 8
  store %string %tmp237, %string* @_str_literal_3230, align 16
  %tmp238 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3230 to i8*))
  call void @init37(%string* %tmp79, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @72, i64 0, i64 0), i64 23, i64 24, i8 0, i8 0, i64 31, i32 48)
  %tmp239 = load %string, %string* %tmp79, align 8
  store %string %tmp239, %string* @_str_literal_3254, align 16
  %tmp240 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3254 to i8*))
  call void @init37(%string* %tmp80, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @219, i64 0, i64 0), i64 52, i64 53, i8 0, i8 0, i64 31, i32 48)
  %tmp241 = load %string, %string* %tmp80, align 8
  store %string %tmp241, %string* @_str_literal_3256, align 16
  %tmp242 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @_str_literal_3256 to i8*))
  ret void
}

define internal void @chpl__init_ChapelTaskData(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelTaskData_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb15

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @250, i64 0, i64 0), i64 14, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelTaskData_p, align 1, !tbaa !8
  store i64 0, i64* @chpl_offset_endCount, align 8, !tbaa !127
  %tmp6 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @chpl_offset_endCount to i8*))
  %tmp7 = tail call i64 @sizeof_endcount_ptr()
  store i64 %tmp7, i64* @chpl_offset_serial, align 8, !tbaa !127
  %tmp8 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @chpl_offset_serial to i8*))
  %tmp9 = add i64 %tmp7, 1
  store i64 %tmp9, i64* @chpl_offset_end, align 8, !tbaa !127
  %tmp10 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @chpl_offset_end to i8*))
  %tmp11 = icmp ult i64 %tmp9, 33
  %tmp12 = zext i1 %tmp11 to i8
  tail call void @assert_chpl(i8 %tmp12, i64 %arg, i32 %arg1)
  %tmp13 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp14 = add i32 %tmp13, -1
  store i32 %tmp14, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb15

bb15:                                             ; preds = %.split, %bb3
  ret void
}

define internal i64 @sizeof_endcount_ptr() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i64 12
}

define internal void @chpl_task_data_setDynamicEndCount(%struct.chpl_task_ChapelData_t* %arg, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  %tmp4 = alloca i8*, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = tail call i32 @chpl_gen_getLocaleID()
  %tmp6 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp5, i32* %tmp6, align 8, !tbaa !110
  %tmp7 = bitcast i8** %tmp4 to %chpl_chpl___EndCount_atomic_int64_int64_t_object**
  store %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg1, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp7, align 8, !tbaa !227
  %tmp8 = load i64, i64* @chpl_offset_endCount, align 8, !tbaa !127
  %tmp9 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg, i64 0, i32 0, i64 %tmp8
  %tmp10 = tail call i8* @c_pointer_return(i8* %tmp9)
  %tmp11 = bitcast %struct.chpl_localeID_t* %tmp to i8*
  %tmp12 = call i8* @c_pointer_return(i8* %tmp11)
  %tmp13 = bitcast i8* %tmp12 to i32*
  %tmp14 = bitcast i8* %tmp10 to i32*
  %tmp15 = load i32, i32* %tmp13, align 1
  store i32 %tmp15, i32* %tmp14, align 1
  %tmp16 = add i64 %tmp8, 4
  %tmp17 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg, i64 0, i32 0, i64 %tmp16
  %tmp18 = call i8* @c_pointer_return(i8* %tmp17)
  %tmp19 = bitcast i8** %tmp4 to i8*
  %tmp20 = call i8* @c_pointer_return(i8* %tmp19)
  %tmp21 = bitcast i8* %tmp20 to i64*
  %tmp22 = bitcast i8* %tmp18 to i64*
  %tmp23 = load i64, i64* %tmp21, align 1
  store i64 %tmp23, i64* %tmp22, align 1
  ret void
}

define internal %chpl_chpl___EndCount_atomic_int64_int64_t_object* @chpl_task_data_getDynamicEndCount(%struct.chpl_task_ChapelData_t* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  %tmp3 = alloca i8*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store i8* null, i8** %tmp3, align 8, !tbaa !227
  %tmp4 = load i64, i64* @chpl_offset_endCount, align 8, !tbaa !127
  %tmp5 = bitcast %struct.chpl_localeID_t* %tmp to i8*
  %tmp6 = call i8* @c_pointer_return(i8* %tmp5)
  %tmp7 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg, i64 0, i32 0, i64 %tmp4
  %tmp8 = call i8* @c_pointer_return(i8* %tmp7)
  %tmp9 = bitcast i8* %tmp8 to i32*
  %tmp10 = bitcast i8* %tmp6 to i32*
  %tmp11 = load i32, i32* %tmp9, align 1
  store i32 %tmp11, i32* %tmp10, align 1
  %tmp12 = add i64 %tmp4, 4
  %tmp13 = bitcast i8** %tmp3 to i8*
  %tmp14 = call i8* @c_pointer_return(i8* %tmp13)
  %tmp15 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg, i64 0, i32 0, i64 %tmp12
  %tmp16 = call i8* @c_pointer_return(i8* %tmp15)
  %tmp17 = bitcast i8* %tmp16 to i64*
  %tmp18 = bitcast i8* %tmp14 to i64*
  %tmp19 = load i64, i64* %tmp17, align 1
  store i64 %tmp19, i64* %tmp18, align 1
  %tmp20 = bitcast i8** %tmp3 to %chpl_chpl___EndCount_atomic_int64_int64_t_object**
  %tmp21 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp20, align 8, !tbaa !227
  ret %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp21
}

define internal void @chpl_task_data_setSerial(%struct.chpl_task_ChapelData_t* %arg, i8 %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load i64, i64* @chpl_offset_serial, align 8, !tbaa !127
  %tmp5 = icmp ne i8 %arg1, 0
  %spec.store.select = zext i1 %tmp5 to i8
  store i8 %spec.store.select, i8* %tmp, align 1
  %tmp6 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg, i64 0, i32 0, i64 %tmp4
  %tmp7 = tail call i8* @c_pointer_return(i8* %tmp6)
  %tmp8 = call i8* @c_pointer_return(i8* nonnull %tmp)
  %tmp9 = load i8, i8* %tmp8, align 1
  store i8 %tmp9, i8* %tmp7, align 1
  ret void
}

define internal i8 @chpl_task_data_getSerial(%struct.chpl_task_ChapelData_t* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load i64, i64* @chpl_offset_serial, align 8, !tbaa !127
  store i8 0, i8* %tmp, align 1, !tbaa !8
  %tmp4 = call i8* @c_pointer_return(i8* nonnull %tmp)
  %tmp5 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg, i64 0, i32 0, i64 %tmp3
  %tmp6 = call i8* @c_pointer_return(i8* %tmp5)
  %tmp7 = load i8, i8* %tmp6, align 1
  store i8 %tmp7, i8* %tmp4, align 1
  %tmp8 = load i8, i8* %tmp, align 1, !tbaa !8
  %tmp9 = icmp eq i8 %tmp8, 1
  %tmp10 = zext i1 %tmp9 to i8
  ret i8 %tmp10
}

define internal void @chpl_task_setDynamicEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  tail call void @chpl_task_data_setDynamicEndCount(%struct.chpl_task_ChapelData_t* %tmp, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_chpl___EndCount_atomic_int64_int64_t_object* @chpl_task_getDynamicEndCount(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp2 = tail call %chpl_chpl___EndCount_atomic_int64_int64_t_object* @chpl_task_data_getDynamicEndCount(%struct.chpl_task_ChapelData_t* %tmp, i64 %arg, i32 %arg1)
  ret %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp2
}

define void @chpl_task_setSerial(i8 %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  tail call void @chpl_task_data_setSerial(%struct.chpl_task_ChapelData_t* %tmp, i8 %arg, i64 118, i32 45)
  ret void
}

define i8 @chpl_task_getSerial() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp1 = tail call i8 @chpl_task_data_getSerial(%struct.chpl_task_ChapelData_t* %tmp, i64 121, i32 45)
  ret i8 %tmp1
}

define internal void @chpl__init_ChapelTaskDataHelp(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelTaskDataHelp_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @235, i64 0, i64 0), i64 18, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelTaskDataHelp_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %arg, %struct.chpl_task_ChapelData_t* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getBundleChapelData(%struct.chpl_task_bundle_t* %arg)
  %tmp4 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %tmp, i64 0, i32 0, i64 0
  %tmp5 = getelementptr inbounds %struct.chpl_task_ChapelData_t, %struct.chpl_task_ChapelData_t* %arg1, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp4, i8* align 1 %tmp5, i64 32, i1 false)
  ret void
}

define internal void @chpl_save_task_error(%chpl_chpl___EndCountBase_object* %arg, %chpl_Error_object* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq %chpl_Error_object* %arg1, null
  br i1 %tmp, label %bb6, label %bb4

bb4:                                              ; preds = %.split
  %tmp5 = getelementptr inbounds %chpl_chpl___EndCountBase_object, %chpl_chpl___EndCountBase_object* %arg, i64 0, i32 1
  tail call void @append(%chpl_TaskErrors* %tmp5, %chpl_Error_object* nonnull %arg1)
  br label %bb6

bb6:                                              ; preds = %.split, %bb4
  ret void
}

define internal void @chpl__init_ChapelTaskTable(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelTaskTable_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @245, i64 0, i64 0), i64 15, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelTaskTable_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define void @chpldev_taskTable_add(i32 %arg, i32 %arg1, i32 %arg2, i64 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpldev_taskTable_remove(i32 %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpldev_taskTable_set_active(i32 %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpldev_taskTable_set_suspended(i32 %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpldev_taskTable_get_tl_info(i32 %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpldev_taskTable_print() {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp1 = load %string, %string* @_str_literal_1901, align 16
  store %string %tmp1, %string* %tmp, align 8
  %tmp2 = bitcast %string* %tmp to i8*
  %tmp3 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp2)
  call void @halt(%string* %tmp, i64 58, i32 40)
  ret void
}

define internal void @chpl__init_ChapelThreads(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelThreads_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb11

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @231, i64 0, i64 0), i64 13, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelThreads_p, align 1, !tbaa !8
  %tmp6 = tail call i32 @chpl_task_getenvNumThreadsPerLocale()
  %tmp7 = sext i32 %tmp6 to i64
  store i64 %tmp7, i64* @numThreadsPerLocale, align 8, !tbaa !138
  %tmp8 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @numThreadsPerLocale to i8*))
  %tmp9 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp10 = add i32 %tmp9, -1
  store i32 %tmp10, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb11

bb11:                                             ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_ChapelTuple(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelTuple_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @232, i64 0, i64 0), i64 11, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelTuple_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = add nsw i64 %arg1, -1
  %tmp2 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg, i64 0, i64 %tmp
  ret %range_int64_t_bounded_F* %tmp2
}

define internal i64* @this6([2 x i64]* nonnull %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = add nsw i64 %arg1, -1
  %tmp2 = getelementptr inbounds [2 x i64], [2 x i64]* %arg, i64 0, i64 %tmp
  ret i64* %tmp2
}

define internal %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = add nsw i64 %arg1, -1
  %tmp2 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 %tmp
  ret %range_int64_t_bounded_F* %tmp2
}

define internal void @chpl__init_ChapelUtil(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_ChapelUtil_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @247, i64 0, i64 0), i64 10, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ChapelUtil_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl_addModule(i8* %arg, i8* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %chpl_chpl_ModuleDeinit_object*, %chpl_chpl_ModuleDeinit_object** @chpl_moduleDeinitFuns, align 8, !tbaa !105
  %tmp4 = tail call %chpl_chpl_ModuleDeinit_object* @_new(i8* %arg, i8* %arg1, %chpl_chpl_ModuleDeinit_object* %tmp, i64 %arg2, i32 %arg3)
  store %chpl_chpl_ModuleDeinit_object* %tmp4, %chpl_chpl_ModuleDeinit_object** @chpl_moduleDeinitFuns, align 8, !tbaa !105
  ret void
}

define internal void @chpl_deinitModules(i64 %arg, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %chpl_chpl_ModuleDeinit_object*, %chpl_chpl_ModuleDeinit_object** @chpl_moduleDeinitFuns, align 8, !tbaa !105
  %.01.in2 = icmp eq %chpl_chpl_ModuleDeinit_object* %tmp, null
  br i1 %.01.in2, label %bb11, label %.lr.ph

.lr.ph:                                           ; preds = %.split
  br label %bb5

bb5:                                              ; preds = %.lr.ph, %bb5
  %.01.in.in3 = phi %chpl_chpl_ModuleDeinit_object* [ %tmp, %.lr.ph ], [ %tmp9, %bb5 ]
  %tmp6 = getelementptr inbounds %chpl_chpl_ModuleDeinit_object, %chpl_chpl_ModuleDeinit_object* %.01.in.in3, i64 0, i32 2
  %tmp7 = load i8*, i8** %tmp6, align 8, !tbaa !183
  tail call void @chpl_execute_module_deinit(i8* %tmp7)
  %tmp8 = getelementptr inbounds %chpl_chpl_ModuleDeinit_object, %chpl_chpl_ModuleDeinit_object* %.01.in.in3, i64 0, i32 3
  %tmp9 = load %chpl_chpl_ModuleDeinit_object*, %chpl_chpl_ModuleDeinit_object** %tmp8, align 8, !tbaa !184
  %tmp10 = bitcast %chpl_chpl_ModuleDeinit_object* %.01.in.in3 to i8*
  tail call void @chpl_here_free(i8* %tmp10, i64 %arg, i32 %arg4)
  %.01.in = icmp eq %chpl_chpl_ModuleDeinit_object* %tmp9, null
  br i1 %.01.in, label %._crit_edge, label %bb5

._crit_edge:                                      ; preds = %bb5
  br label %bb11

bb11:                                             ; preds = %._crit_edge, %.split
  store %chpl_chpl_ModuleDeinit_object* null, %chpl_chpl_ModuleDeinit_object** @chpl_moduleDeinitFuns, align 8, !tbaa !123
  ret void
}

define internal void @chpl__init_DefaultAssociative(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_DefaultAssociative_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @243, i64 0, i64 0), i64 18, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_DefaultAssociative_p, align 1, !tbaa !8
  tail call void @chpl__init_DSIUtil(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Sort(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_DefaultRectangular(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl__autoDestroy(%_distribution_DefaultDist* @defaultDist, i64 %arg, i32 %arg1)
  ret void
}

define internal void @chpl__init_DefaultRectangular(i64 %arg, i32 %arg14) {
bb:
  %tmp = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %list_BaseDom_chpl, align 8
  %tmp17 = alloca %list_BaseDom_chpl, align 8
  %tmp18 = alloca %atomicbool, align 8
  %tmp19 = alloca %atomicbool, align 8
  %tmp20 = alloca i8, align 1
  %tmp21 = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp22 = load i8, i8* @chpl__init_DefaultRectangular_p, align 1, !tbaa !2
  %tmp23 = icmp eq i8 %tmp22, 0
  br i1 %tmp23, label %bb24, label %bb71

bb24:                                             ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @237, i64 0, i64 0), i64 18, i64 %arg, i32 %arg14)
  %tmp25 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp26 = add i32 %tmp25, 1
  store i32 %tmp26, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_DefaultRectangular_p, align 1, !tbaa !8
  tail call void @chpl__init_DSIUtil(i64 %arg, i32 %arg14)
  tail call void @chpl__init_ChapelArray(i64 %arg, i32 %arg14)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @237, i64 0, i64 0), i8* bitcast (void (i64, i32)* @chpl__deinit_DefaultRectangular to i8*), i64 %arg, i32 %arg14)
  %tmp27 = load %string, %string* @_str_literal_959, align 16
  store %string %tmp27, %string* %tmp, align 8
  %tmp28 = bitcast %string* %tmp to i8*
  %tmp29 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp28)
  %tmp30 = load %string, %string* @_str_literal_957, align 16
  store %string %tmp30, %string* %tmp15, align 8
  %tmp31 = bitcast %string* %tmp15 to i8*
  %tmp32 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp31)
  %tmp33 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @124, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp33, label %bb34, label %bb37

bb34:                                             ; preds = %bb24
  %tmp35 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @124, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp36 = tail call i64 @_command_line_cast10(i8* %tmp35, i64 %arg, i32 %arg14)
  br label %bb37

bb37:                                             ; preds = %bb24, %bb34
  %.0 = phi i64 [ %tmp36, %bb34 ], [ 0, %bb24 ]
  store i64 %.0, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %tmp38 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @dataParTasksPerLocale to i8*))
  %tmp39 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @126, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp39, label %bb40, label %bb43

bb40:                                             ; preds = %bb37
  %tmp41 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @126, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp42 = tail call i8 @_command_line_cast13(i8* %tmp41, i64 %arg, i32 %arg14)
  br label %bb43

bb43:                                             ; preds = %bb37, %bb40
  %.02 = phi i8 [ %tmp42, %bb40 ], [ 0, %bb37 ]
  store i8 %.02, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp44 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @dataParIgnoreRunningTasks)
  %tmp45 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @127, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp45, label %bb46, label %bb49

bb46:                                             ; preds = %bb43
  %tmp47 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @127, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp48 = tail call i64 @_command_line_cast2(i8* %tmp47, i64 %arg, i32 %arg14)
  br label %bb49

bb49:                                             ; preds = %bb43, %bb46
  %.01 = phi i64 [ %tmp48, %bb46 ], [ 1, %bb43 ]
  store i64 %.01, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp50 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @dataParMinGranularity to i8*))
  %tmp51 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %tmp52 = icmp slt i64 %tmp51, 0
  br i1 %tmp52, label %bb53, label %bb54

bb53:                                             ; preds = %bb49
  call void @halt(%string* %tmp15, i64 %arg, i32 %arg14)
  br label %bb54

bb54:                                             ; preds = %bb49, %bb53
  %tmp55 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp56 = icmp slt i64 %tmp55, 1
  br i1 %tmp56, label %bb57, label %bb58

bb57:                                             ; preds = %bb54
  call void @halt(%string* %tmp, i64 %arg, i32 %arg14)
  br label %bb58

bb58:                                             ; preds = %bb57, %bb54
  call void @init_chpl11(%list_BaseDom_chpl* %tmp17, %chpl_listNode_BaseDom_chpl_object* null, %chpl_listNode_BaseDom_chpl_object* null)
  %tmp59 = bitcast %list_BaseDom_chpl* %tmp17 to i64*
  %.unpack13 = load i64, i64* %tmp59, align 8
  %.elt3 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp17, i64 0, i32 1
  %tmp60 = bitcast %chpl_listNode_BaseDom_chpl_object** %.elt3 to i64*
  %.unpack412 = load i64, i64* %tmp60, align 8
  %.elt5 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp17, i64 0, i32 2
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp61 = bitcast %list_BaseDom_chpl* %tmp16 to i64*
  store i64 %.unpack13, i64* %tmp61, align 8
  %.repack8 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp16, i64 0, i32 1
  %tmp62 = bitcast %chpl_listNode_BaseDom_chpl_object** %.repack8 to i64*
  store i64 %.unpack412, i64* %tmp62, align 8
  %.repack10 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp16, i64 0, i32 2
  store i64 %.unpack6, i64* %.repack10, align 8
  call void @atomic_init_bool(i8* nonnull %tmp20, i1 false)
  %tmp63 = load i8, i8* %tmp20, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp19, i8 %tmp63)
  %tmp64 = getelementptr inbounds %atomicbool, %atomicbool* %tmp19, i64 0, i32 0
  %tmp65 = load i8, i8* %tmp64, align 8
  %tmp66 = getelementptr inbounds %atomicbool, %atomicbool* %tmp18, i64 0, i32 0
  store i8 %tmp65, i8* %tmp66, align 8
  %tmp67 = call %chpl_DefaultDist_object* @_new8(%list_BaseDom_chpl* %tmp16, %atomicbool* %tmp18, i8 0, i64 -1, i64 %arg, i32 %arg14)
  call void @chpl__buildDistValue(%chpl_DefaultDist_object* %tmp67, %_distribution_DefaultDist* %tmp21)
  %tmp68 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp21, align 8
  store %_distribution_DefaultDist %tmp68, %_distribution_DefaultDist* @defaultDist, align 16
  %tmp69 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp70 = add i32 %tmp69, -1
  store i32 %tmp70, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb71

bb71:                                             ; preds = %.split, %bb58
  ret void
}

; Function Attrs: readnone
define internal i64 @polly_array_index_2(i64 %arg, i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) #1 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = mul nsw i64 %arg3, %arg1
  %tmp5 = add nsw i64 %tmp, %arg
  %tmp6 = mul nsw i64 %arg4, %arg2
  %tmp7 = add nsw i64 %tmp5, %tmp6
  ret i64 %tmp7
}

define internal %chpl_DefaultDist_object* @_new8(%list_BaseDom_chpl* nonnull %arg, %atomicbool* nonnull %arg12, i8 %arg13, i64 %arg14, i64 %arg15, i32 %arg16) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomicbool, %atomicbool* %arg12, i64 0, i32 0
  %tmp17 = load i8, i8* %tmp, align 1
  %tmp18 = bitcast %list_BaseDom_chpl* %arg to i64*
  %.unpack11 = load i64, i64* %tmp18, align 8
  %.elt1 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 1
  %tmp19 = bitcast %chpl_listNode_BaseDom_chpl_object** %.elt1 to i64*
  %.unpack210 = load i64, i64* %tmp19, align 8
  %.elt3 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp20 = tail call i8* @chpl_here_alloc(i64 48, i16 38, i64 %arg15, i32 %arg16)
  %tmp21 = bitcast i8* %tmp20 to %chpl_DefaultDist_object*
  %tmp22 = bitcast i8* %tmp20 to i32*
  store i32 6, i32* %tmp22, align 4, !tbaa !170
  %tmp23 = bitcast i8* %tmp20 to %chpl_object_object*
  %tmp24 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp23)
  %tmp25 = bitcast i8* %tmp20 to i32*
  store i32 1, i32* %tmp25, align 4, !tbaa !170
  %tmp26 = getelementptr inbounds i8, i8* %tmp20, i64 8
  %tmp27 = bitcast i8* %tmp26 to i64*
  store i64 %.unpack11, i64* %tmp27, align 8
  %.repack6 = getelementptr inbounds i8, i8* %tmp20, i64 16
  %tmp28 = bitcast i8* %.repack6 to i64*
  store i64 %.unpack210, i64* %tmp28, align 8
  %.repack8 = getelementptr inbounds i8, i8* %tmp20, i64 24
  %tmp29 = bitcast i8* %.repack8 to i64*
  store i64 %.unpack4, i64* %tmp29, align 8
  %tmp30 = getelementptr inbounds i8, i8* %tmp20, i64 32
  store i8 %tmp17, i8* %tmp30, align 1
  %tmp31 = getelementptr inbounds i8, i8* %tmp20, i64 33
  store i8 %arg13, i8* %tmp31, align 1, !tbaa !185
  %tmp32 = getelementptr inbounds i8, i8* %tmp20, i64 40
  %tmp33 = bitcast i8* %tmp32 to i64*
  store i64 %arg14, i64* %tmp33, align 8, !tbaa !228
  store i32 6, i32* %tmp22, align 4, !tbaa !170
  ret %chpl_DefaultDist_object* %tmp21
}

define internal void @chpl__auto_destroy_DefaultDist(%chpl_DefaultDist_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultDist_object, %chpl_DefaultDist_object* %arg, i64 0, i32 0
  tail call void @deinit7(%chpl_BaseDist_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @dsiNewRectangularDom(%chpl_DefaultDist_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i8* @chpl_here_alloc(i64 80, i16 53, i64 %arg2, i32 %arg3)
  %tmp4 = bitcast i8* %tmp to %chpl_DefaultRectangularDom_1_int64_t_F_object*
  tail call void @init26(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp4, %chpl_DefaultDist_object* %arg, i64 %arg2, i32 %arg3)
  tail call void @dsiSetIndices2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp4, [1 x %range_int64_t_bounded_F]* %arg1)
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp4
}

define internal %chpl_DefaultRectangularDom_2_int64_t_F_object* @dsiNewRectangularDom2(%chpl_DefaultDist_object* %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i8* @chpl_here_alloc(i64 96, i16 75, i64 %arg2, i32 %arg3)
  %tmp4 = bitcast i8* %tmp to %chpl_DefaultRectangularDom_2_int64_t_F_object*
  tail call void @init25(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp4, %chpl_DefaultDist_object* %arg, i64 %arg2, i32 %arg3)
  tail call void @dsiSetIndices(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp4, [2 x %range_int64_t_bounded_F]* %arg1)
  ret %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp4
}

define internal %chpl_DefaultDist_object* @dsiClone(%chpl_DefaultDist_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret %chpl_DefaultDist_object* %arg
}

define internal i8 @dsiTrackDomains2(%chpl_DefaultDist_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i8 0
}

define internal void @chpl_defaultDistInitPrivate(i64 %arg, i32 %arg12) {
bb:
  %tmp = alloca %_distribution_DefaultDist, align 8
  %tmp13 = alloca %list_BaseDom_chpl, align 8
  %tmp14 = alloca %list_BaseDom_chpl, align 8
  %tmp15 = alloca %atomicbool, align 8
  %tmp16 = alloca %atomicbool, align 8
  %tmp17 = alloca i8, align 1
  %tmp18 = alloca %_distribution_DefaultDist, align 8
  %tmp19 = alloca %_distribution_DefaultDist, align 8
  %tmp20 = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp21 = load %chpl_object_object*, %chpl_object_object** bitcast (%chpl_DefaultDist_object** getelementptr inbounds (%_distribution_DefaultDist, %_distribution_DefaultDist* @defaultDist, i64 0, i32 1) to %chpl_object_object**), align 8, !tbaa !28
  %tmp22 = icmp eq %chpl_object_object* %tmp21, null
  br i1 %tmp22, label %bb23, label %bb37

bb23:                                             ; preds = %.split
  call void @init_chpl11(%list_BaseDom_chpl* %tmp14, %chpl_listNode_BaseDom_chpl_object* null, %chpl_listNode_BaseDom_chpl_object* null)
  %tmp24 = bitcast %list_BaseDom_chpl* %tmp14 to i64*
  %.unpack11 = load i64, i64* %tmp24, align 8
  %.elt1 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp14, i64 0, i32 1
  %tmp25 = bitcast %chpl_listNode_BaseDom_chpl_object** %.elt1 to i64*
  %.unpack210 = load i64, i64* %tmp25, align 8
  %.elt3 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp14, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp26 = bitcast %list_BaseDom_chpl* %tmp13 to i64*
  store i64 %.unpack11, i64* %tmp26, align 8
  %.repack6 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp13, i64 0, i32 1
  %tmp27 = bitcast %chpl_listNode_BaseDom_chpl_object** %.repack6 to i64*
  store i64 %.unpack210, i64* %tmp27, align 8
  %.repack8 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp13, i64 0, i32 2
  store i64 %.unpack4, i64* %.repack8, align 8
  call void @atomic_init_bool(i8* nonnull %tmp17, i1 false)
  %tmp28 = load i8, i8* %tmp17, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp16, i8 %tmp28)
  %tmp29 = getelementptr inbounds %atomicbool, %atomicbool* %tmp16, i64 0, i32 0
  %tmp30 = load i8, i8* %tmp29, align 8
  %tmp31 = getelementptr inbounds %atomicbool, %atomicbool* %tmp15, i64 0, i32 0
  store i8 %tmp30, i8* %tmp31, align 8
  %tmp32 = call %chpl_DefaultDist_object* @_new8(%list_BaseDom_chpl* %tmp13, %atomicbool* %tmp15, i8 0, i64 -1, i64 %arg, i32 %arg12)
  call void @chpl__buildDistValue(%chpl_DefaultDist_object* %tmp32, %_distribution_DefaultDist* %tmp18)
  %tmp33 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp18, align 8
  store %_distribution_DefaultDist %tmp33, %_distribution_DefaultDist* %tmp, align 8
  %tmp34 = bitcast %_distribution_DefaultDist* %tmp to i8*
  %tmp35 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* %tmp34)
  call void @clone2(%_distribution_DefaultDist* %tmp, %_distribution_DefaultDist* %tmp20)
  %tmp36 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp20, align 8
  store %_distribution_DefaultDist %tmp36, %_distribution_DefaultDist* %tmp19, align 8
  store %_distribution_DefaultDist %tmp36, %_distribution_DefaultDist* @defaultDist, align 16
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp19, i64 %arg, i32 %arg12)
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp, i64 %arg, i32 %arg12)
  br label %bb37

bb37:                                             ; preds = %bb23, %.split
  ret void
}

define internal void @chpl__auto_destroy_DefaultRectangularDom(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit9(%chpl_BaseRectangularDom_1_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_DefaultRectangularDom2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @deinit10(%chpl_BaseRectangularDom_2_int64_t_F_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal i8 @dsiLinksDistribution2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i8 0
}

define internal i8 @dsiLinksDistribution3(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i8 0
}

define internal void @init25(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %chpl_DefaultDist_object* %arg14, i64 %arg15, i32 %arg16) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp17 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp18 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @init12(%chpl_BaseRectangularDom_2_int64_t_F_object* %tmp18, i64 %arg15, i32 %arg16)
  %tmp19 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 11, i32* %tmp19, align 4, !tbaa !170
  %tmp20 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 1
  store %chpl_DefaultDist_object* %arg14, %chpl_DefaultDist_object** %tmp20, align 8, !tbaa !46
  call void @init22(%range_int64_t_bounded_F* %tmp, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp17, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp17, i64 0, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp17, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack8 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack8, align 8
  %.repack10 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 0
  store i64 %.unpack4, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 1
  store i64 %.unpack6, i64* %.repack12, align 8
  %tmp21 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 12, i32* %tmp21, align 4, !tbaa !170
  ret void
}

define internal void @init26(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %chpl_DefaultDist_object* %arg6, i64 %arg7, i32 %arg8) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp9 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0
  tail call void @init11(%chpl_BaseRectangularDom_1_int64_t_F_object* %tmp9, i64 %arg7, i32 %arg8)
  %tmp10 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 9, i32* %tmp10, align 4, !tbaa !170
  %tmp11 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 1
  store %chpl_DefaultDist_object* %arg6, %chpl_DefaultDist_object** %tmp11, align 8, !tbaa !54
  call void @init22(%range_int64_t_bounded_F* %tmp, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp12 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 10, i32* %tmp12, align 4, !tbaa !170
  ret void
}

define internal %chpl_DefaultDist_object* @dsiMyDist2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp, align 8, !tbaa !54
  ret %chpl_DefaultDist_object* %tmp3
}

define internal %chpl_DefaultDist_object* @dsiMyDist3(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultDist_object*, %chpl_DefaultDist_object** %tmp, align 8, !tbaa !46
  ret %chpl_DefaultDist_object* %tmp3
}

define internal void @dsiGetIndices(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg14) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.elt3 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %.elt5 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack8 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack8, align 8
  %.repack10 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 1, i32 0
  store i64 %.unpack4, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 1, i32 1
  store i64 %.unpack6, i64* %.repack12, align 8
  ret void
}

define internal void @dsiGetIndices2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg6) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg6, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg6, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @dsiSetIndices(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg14) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %.elt6 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 1, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %.elt8 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg14, i64 0, i64 1, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %.repack10 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 0
  store i64 %.unpack7, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 1
  store i64 %.unpack9, i64* %.repack12, align 8
  ret void
}

define internal void @dsiSetIndices2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg6) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg6, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg6, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @dsiAssignDomain(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_1_int64_t_F* nonnull %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl_assignDomainWithGetSetIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_1_int64_t_F* %arg1, i64 %arg3, i32 %arg4)
  ret void
}

define internal void @dsiAssignDomain2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* nonnull %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl_assignDomainWithGetSetIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* %arg1, i64 %arg3, i32 %arg4)
  ret void
}

define internal void @dsiDim(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 %arg6, %range_int64_t_bounded_F* nonnull %arg7) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2
  %tmp8 = tail call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %tmp, i64 %arg6)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp8, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp8, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg7, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg7, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @dsiDim2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %range_int64_t_bounded_F* nonnull %arg6) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg6, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg6, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, %range_int64_t_bounded_F* nonnull %arg6) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg6, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg6, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal void @dsiDim4(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, %range_int64_t_bounded_F* nonnull %arg6) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg6, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg6, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  ret void
}

define internal i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp3 = insertvalue %range_int64_t_bounded_F %tmp, i64 %.unpack2, 1
  %tmp4 = tail call i64 @length(%range_int64_t_bounded_F %tmp3)
  ret i64 %tmp4
}

define internal i64 @dsiNumIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp7 = insertvalue %range_int64_t_bounded_F %tmp, i64 %.unpack2, 1
  %tmp8 = tail call i64 @length(%range_int64_t_bounded_F %tmp7)
  %.elt3 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack4, 0
  %.elt5 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp10 = insertvalue %range_int64_t_bounded_F %tmp9, i64 %.unpack6, 1
  %tmp11 = tail call i64 @length(%range_int64_t_bounded_F %tmp10)
  %tmp12 = mul nsw i64 %tmp11, %tmp8
  ret i64 %tmp12
}

define internal void @dsiLow(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, [2 x i64]* nonnull %arg14) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt6 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 0, i32 2, i64 1, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp = getelementptr inbounds [2 x i64], [2 x i64]* %arg14, i64 0, i64 0
  store i64 %.unpack, i64* %tmp, align 8, !tbaa !138
  %tmp15 = getelementptr inbounds [2 x i64], [2 x i64]* %arg14, i64 0, i64 1
  store i64 %.unpack7, i64* %tmp15, align 8, !tbaa !138
  ret void
}

define internal i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  ret i64 %.unpack
}

define internal %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* @dsiBuildArray(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca [1 x i64], align 8
  %tmp5 = alloca [1 x i64], align 8
  %tmp6 = alloca [1 x i64], align 8
  %tmp7 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = tail call i8* @chpl_here_alloc(i64 104, i16 55, i64 %arg3, i32 %arg4)
  %tmp9 = bitcast i8* %tmp8 to %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*
  %tmp10 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp, i64 0, i64 0
  store i64 0, i64* %tmp10, align 8, !tbaa !138
  %tmp11 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp5, i64 0, i64 0
  store i64 0, i64* %tmp11, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp6, i64 0, i64 0
  store i64 0, i64* %tmp12, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp7, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp7, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp13 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp7, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp14 = insertvalue %range_int64_t_bounded_F %tmp13, i64 %.unpack2, 1
  call void @init28(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp9, i64 -1, i8 0, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, [1 x i64]* %tmp, [1 x i64]* %tmp5, [1 x i64]* %tmp6, i64 0, %chpl_locale_object** null, %chpl_locale_object** null, i8 0, %range_int64_t_bounded_F %tmp14, i64 %arg3, i32 %arg4)
  call void @postinit3(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp9, i64 %arg3, i32 %arg4)
  ret %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp9
}

define internal %ARRTY* @dsiBuildArray2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca [2 x i64], align 8
  %tmp5 = alloca [2 x i64], align 8
  %tmp6 = alloca [2 x i64], align 8
  %tmp7 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = tail call i8* @chpl_here_alloc(i64 128, i16 77, i64 %arg3, i32 %arg4)
  %tmp9 = bitcast i8* %tmp8 to %ARRTY*
  %tmp10 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 0, i64* %tmp10, align 8, !tbaa !138
  %tmp11 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 0, i64* %tmp11, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp5, i64 0, i64 0
  store i64 0, i64* %tmp12, align 8, !tbaa !138
  %tmp13 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp5, i64 0, i64 1
  store i64 0, i64* %tmp13, align 8, !tbaa !138
  %tmp14 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp6, i64 0, i64 0
  store i64 0, i64* %tmp14, align 8, !tbaa !138
  %tmp15 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp6, i64 0, i64 1
  store i64 0, i64* %tmp15, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp7, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp7, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp16 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp7, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp17 = insertvalue %range_int64_t_bounded_F %tmp16, i64 %.unpack2, 1
  call void @init27(%ARRTY* %tmp9, i64 -1, i8 0, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg, [2 x i64]* %tmp, [2 x i64]* %tmp5, [2 x i64]* %tmp6, i64 0, double* null, double* null, i8 0, %range_int64_t_bounded_F %tmp17, i64 %arg3, i32 %arg4)
  call void @postinit2(%ARRTY* %tmp9, i64 %arg3, i32 %arg4)
  ret %ARRTY* %tmp9
}

define internal %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* @dsiBuildArray3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca [1 x i64], align 8
  %tmp5 = alloca [1 x i64], align 8
  %tmp6 = alloca [1 x i64], align 8
  %tmp7 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = tail call i8* @chpl_here_alloc(i64 104, i16 70, i64 %arg3, i32 %arg4)
  %tmp9 = bitcast i8* %tmp8 to %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*
  %tmp10 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp, i64 0, i64 0
  store i64 0, i64* %tmp10, align 8, !tbaa !138
  %tmp11 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp5, i64 0, i64 0
  store i64 0, i64* %tmp11, align 8, !tbaa !138
  %tmp12 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp6, i64 0, i64 0
  store i64 0, i64* %tmp12, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp7, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp7, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp13 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp7, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp14 = insertvalue %range_int64_t_bounded_F %tmp13, i64 %.unpack2, 1
  call void @init30(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp9, i64 -1, i8 0, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg, [1 x i64]* %tmp, [1 x i64]* %tmp5, [1 x i64]* %tmp6, i64 0, %chpl_localesSignal_object** null, %chpl_localesSignal_object** null, i8 0, %range_int64_t_bounded_F %tmp14, i64 %arg3, i32 %arg4)
  call void @postinit5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp9, i64 %arg3, i32 %arg4)
  ret %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp9
}

define internal void @chpl__auto_destroy_DefaultRectangularArr(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit15(%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_DefaultRectangularArr2(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit16(%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_DefaultRectangularArr3(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit17(%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_DefaultRectangularArr4(%ARRTY* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0
  tail call void @deinit18(%chpl_BaseRectangularArr_2_int64_t_F__real64_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_DefaultRectangularArr5(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0
  tail call void @deinit14(%chpl_BaseRectangularArr_1_int64_t_F_locale_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @init27(%ARRTY* %arg, i64 %arg3, i8 %arg4, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg5, [2 x i64]* nonnull %arg6, [2 x i64]* nonnull %arg7, [2 x i64]* nonnull %arg8, i64 %arg9, double* %arg10, double* %arg11, i8 %arg12, %range_int64_t_bounded_F %arg13, i64 %arg14, i32 %arg15) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [2 x i64], [2 x i64]* %arg8, i64 0, i64 0
  %tmp16 = load i64, i64* %tmp, align 8, !tbaa !138
  %tmp17 = getelementptr inbounds [2 x i64], [2 x i64]* %arg8, i64 0, i64 1
  %tmp18 = load i64, i64* %tmp17, align 8, !tbaa !138
  %tmp19 = getelementptr inbounds [2 x i64], [2 x i64]* %arg7, i64 0, i64 0
  %tmp20 = load i64, i64* %tmp19, align 8, !tbaa !138
  %tmp21 = getelementptr inbounds [2 x i64], [2 x i64]* %arg7, i64 0, i64 1
  %tmp22 = load i64, i64* %tmp21, align 8, !tbaa !138
  %tmp23 = getelementptr inbounds [2 x i64], [2 x i64]* %arg6, i64 0, i64 0
  %tmp24 = load i64, i64* %tmp23, align 8, !tbaa !138
  %tmp25 = getelementptr inbounds [2 x i64], [2 x i64]* %arg6, i64 0, i64 1
  %tmp26 = load i64, i64* %tmp25, align 8, !tbaa !138
  %tmp27 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0
  tail call void @init16(%chpl_BaseRectangularArr_2_int64_t_F__real64_object* %tmp27, i64 %arg3, i8 %arg4, i64 %arg14, i32 %arg15)
  %tmp28 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 24, i32* %tmp28, align 4, !tbaa !170
  %tmp29 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg5, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp29, align 8, !tbaa !93
  %tmp30 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 0
  store i64 %tmp24, i64* %tmp30, align 8, !tbaa !138
  %tmp31 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 1
  store i64 %tmp26, i64* %tmp31, align 8, !tbaa !138
  %tmp32 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  store i64 %tmp20, i64* %tmp32, align 8, !tbaa !138
  %tmp33 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 1
  store i64 %tmp22, i64* %tmp33, align 8, !tbaa !138
  %tmp34 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 4, i64 0
  store i64 %tmp16, i64* %tmp34, align 8, !tbaa !138
  %tmp35 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 4, i64 1
  store i64 %tmp18, i64* %tmp35, align 8, !tbaa !138
  %tmp36 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 5
  store i64 %arg9, i64* %tmp36, align 8, !tbaa !229
  %tmp37 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 6
  store double* %arg10, double** %tmp37, align 8, !tbaa !230
  %tmp38 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 7
  store double* %arg11, double** %tmp38, align 8, !tbaa !231
  %tmp39 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 8
  store i8 %arg12, i8* %tmp39, align 1, !tbaa !232
  %.repack = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 9, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg13, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 9, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg13, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp40 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 25, i32* %tmp40, align 4, !tbaa !170
  ret void
}

define internal void @init28(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg3, i8 %arg4, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, [1 x i64]* nonnull %arg6, [1 x i64]* nonnull %arg7, [1 x i64]* nonnull %arg8, i64 %arg9, %chpl_locale_object** %arg10, %chpl_locale_object** %arg11, i8 %arg12, %range_int64_t_bounded_F %arg13, i64 %arg14, i32 %arg15) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [1 x i64], [1 x i64]* %arg8, i64 0, i64 0
  %tmp16 = load i64, i64* %tmp, align 8, !tbaa !138
  %tmp17 = getelementptr inbounds [1 x i64], [1 x i64]* %arg7, i64 0, i64 0
  %tmp18 = load i64, i64* %tmp17, align 8, !tbaa !138
  %tmp19 = getelementptr inbounds [1 x i64], [1 x i64]* %arg6, i64 0, i64 0
  %tmp20 = load i64, i64* %tmp19, align 8, !tbaa !138
  %tmp21 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0
  tail call void @init18(%chpl_BaseRectangularArr_1_int64_t_F_locale_object* %tmp21, i64 %arg3, i8 %arg4, i64 %arg14, i32 %arg15)
  %tmp22 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 17, i32* %tmp22, align 4, !tbaa !170
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp23, align 8, !tbaa !85
  %tmp24 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %tmp20, i64* %tmp24, align 8, !tbaa !138
  %tmp25 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 %tmp18, i64* %tmp25, align 8, !tbaa !138
  %tmp26 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 %tmp16, i64* %tmp26, align 8, !tbaa !138
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 5
  store i64 %arg9, i64* %tmp27, align 8, !tbaa !233
  %tmp28 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 6
  store %chpl_locale_object** %arg10, %chpl_locale_object*** %tmp28, align 8, !tbaa !234
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 7
  store %chpl_locale_object** %arg11, %chpl_locale_object*** %tmp29, align 8, !tbaa !213
  %tmp30 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 8
  store i8 %arg12, i8* %tmp30, align 1, !tbaa !235
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 9, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg13, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 9, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg13, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 18, i32* %tmp31, align 4, !tbaa !170
  ret void
}

define internal void @init29(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 %arg3, i8 %arg4, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, [1 x i64]* nonnull %arg6, [1 x i64]* nonnull %arg7, [1 x i64]* nonnull %arg8, i64 %arg9, i64* %arg10, i64* %arg11, i8 %arg12, %range_int64_t_bounded_F %arg13, i64 %arg14, i32 %arg15) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [1 x i64], [1 x i64]* %arg8, i64 0, i64 0
  %tmp16 = load i64, i64* %tmp, align 8, !tbaa !138
  %tmp17 = getelementptr inbounds [1 x i64], [1 x i64]* %arg7, i64 0, i64 0
  %tmp18 = load i64, i64* %tmp17, align 8, !tbaa !138
  %tmp19 = getelementptr inbounds [1 x i64], [1 x i64]* %arg6, i64 0, i64 0
  %tmp20 = load i64, i64* %tmp19, align 8, !tbaa !138
  %tmp21 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 0
  tail call void @init17(%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %tmp21, i64 %arg3, i8 %arg4, i64 %arg14, i32 %arg15)
  %tmp22 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 21, i32* %tmp22, align 4, !tbaa !170
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp23, align 8, !tbaa !236
  %tmp24 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %tmp20, i64* %tmp24, align 8, !tbaa !138
  %tmp25 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 %tmp18, i64* %tmp25, align 8, !tbaa !138
  %tmp26 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 %tmp16, i64* %tmp26, align 8, !tbaa !138
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 5
  store i64 %arg9, i64* %tmp27, align 8, !tbaa !239
  %tmp28 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 6
  store i64* %arg10, i64** %tmp28, align 8, !tbaa !240
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 7
  store i64* %arg11, i64** %tmp29, align 8, !tbaa !241
  %tmp30 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 8
  store i8 %arg12, i8* %tmp30, align 1, !tbaa !242
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 9, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg13, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 9, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg13, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 22, i32* %tmp31, align 4, !tbaa !170
  ret void
}

define internal void @init30(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg3, i8 %arg4, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, [1 x i64]* nonnull %arg6, [1 x i64]* nonnull %arg7, [1 x i64]* nonnull %arg8, i64 %arg9, %chpl_localesSignal_object** %arg10, %chpl_localesSignal_object** %arg11, i8 %arg12, %range_int64_t_bounded_F %arg13, i64 %arg14, i32 %arg15) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [1 x i64], [1 x i64]* %arg8, i64 0, i64 0
  %tmp16 = load i64, i64* %tmp, align 8, !tbaa !138
  %tmp17 = getelementptr inbounds [1 x i64], [1 x i64]* %arg7, i64 0, i64 0
  %tmp18 = load i64, i64* %tmp17, align 8, !tbaa !138
  %tmp19 = getelementptr inbounds [1 x i64], [1 x i64]* %arg6, i64 0, i64 0
  %tmp20 = load i64, i64* %tmp19, align 8, !tbaa !138
  %tmp21 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0
  tail call void @init19(%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %tmp21, i64 %arg3, i8 %arg4, i64 %arg14, i32 %arg15)
  %tmp22 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 19, i32* %tmp22, align 4, !tbaa !170
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp23, align 8, !tbaa !99
  %tmp24 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %tmp20, i64* %tmp24, align 8, !tbaa !138
  %tmp25 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 %tmp18, i64* %tmp25, align 8, !tbaa !138
  %tmp26 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 %tmp16, i64* %tmp26, align 8, !tbaa !138
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 5
  store i64 %arg9, i64* %tmp27, align 8, !tbaa !243
  %tmp28 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 6
  store %chpl_localesSignal_object** %arg10, %chpl_localesSignal_object*** %tmp28, align 8, !tbaa !244
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 7
  store %chpl_localesSignal_object** %arg11, %chpl_localesSignal_object*** %tmp29, align 8, !tbaa !212
  %tmp30 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 8
  store i8 %arg12, i8* %tmp30, align 1, !tbaa !245
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 9, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg13, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 9, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg13, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 20, i32* %tmp31, align 4, !tbaa !170
  ret void
}

define internal void @init31(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 %arg3, i8 %arg4, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, [1 x i64]* nonnull %arg6, [1 x i64]* nonnull %arg7, [1 x i64]* nonnull %arg8, i64 %arg9, i64* %arg10, i64* %arg11, i8 %arg12, %range_int64_t_bounded_F %arg13, i64 %arg14, i32 %arg15) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [1 x i64], [1 x i64]* %arg8, i64 0, i64 0
  %tmp16 = load i64, i64* %tmp, align 8, !tbaa !138
  %tmp17 = getelementptr inbounds [1 x i64], [1 x i64]* %arg7, i64 0, i64 0
  %tmp18 = load i64, i64* %tmp17, align 8, !tbaa !138
  %tmp19 = getelementptr inbounds [1 x i64], [1 x i64]* %arg6, i64 0, i64 0
  %tmp20 = load i64, i64* %tmp19, align 8, !tbaa !138
  %tmp21 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 0
  tail call void @init15(%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %tmp21, i64 %arg3, i8 %arg4, i64 %arg14, i32 %arg15)
  %tmp22 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 15, i32* %tmp22, align 4, !tbaa !170
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 1
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg5, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp23, align 8, !tbaa !246
  %tmp24 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %tmp20, i64* %tmp24, align 8, !tbaa !138
  %tmp25 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 %tmp18, i64* %tmp25, align 8, !tbaa !138
  %tmp26 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 %tmp16, i64* %tmp26, align 8, !tbaa !138
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 5
  store i64 %arg9, i64* %tmp27, align 8, !tbaa !249
  %tmp28 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 6
  store i64* %arg10, i64** %tmp28, align 8, !tbaa !250
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 7
  store i64* %arg11, i64** %tmp29, align 8, !tbaa !251
  %tmp30 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 8
  store i8 %arg12, i8* %tmp30, align 1, !tbaa !252
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 9, i32 0
  %.elt = extractvalue %range_int64_t_bounded_F %arg13, 0
  store i64 %.elt, i64* %.repack, align 8
  %.repack1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 9, i32 1
  %.elt2 = extractvalue %range_int64_t_bounded_F %arg13, 1
  store i64 %.elt2, i64* %.repack1, align 8
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 16, i32* %tmp31, align 4, !tbaa !170
  ret void
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @dsiGetBaseDom2(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !99
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp3
}

define internal %chpl_DefaultRectangularDom_2_int64_t_F_object* @dsiGetBaseDom3(%ARRTY* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp, align 8, !tbaa !93
  ret %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp3
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @dsiGetBaseDom4(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !85
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp3
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @dsiGetBaseDom5(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !236
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp3
}

define internal %chpl_DefaultRectangularDom_1_int64_t_F_object* @dsiGetBaseDom6(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp3 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp, align 8, !tbaa !246
  ret %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp3
}

define internal void @dsiDestroyArr(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !85
  %tmp7 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp6)
  %tmp8 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !85
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp10 = insertvalue %range_int64_t_bounded_F %tmp9, i64 %.unpack2, 1
  %tmp11 = call i64 @length(%range_int64_t_bounded_F %tmp10)
  %tmp12 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 6
  %tmp13 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !138
  %tmp15 = mul nsw i64 %tmp14, %tmp11
  %tmp16 = bitcast %chpl_locale_object*** %tmp12 to i8**
  %tmp17 = load i8*, i8** %tmp16, align 8, !tbaa !234
  %tmp18 = trunc i64 %arg3 to i32
  call void @chpl_mem_array_free(i8* %tmp17, i64 %tmp15, i64 8, i32 %tmp18, i32 %arg4)
  ret void
}

define internal void @dsiDestroyArr2(%ARRTY* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp5, align 8, !tbaa !93
  %tmp7 = tail call i64 @dsiNumIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp6)
  %tmp8 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp5, align 8, !tbaa !93
  call void @dsiDim2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp8, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp10 = insertvalue %range_int64_t_bounded_F %tmp9, i64 %.unpack2, 1
  %tmp11 = call i64 @length(%range_int64_t_bounded_F %tmp10)
  %tmp12 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 6
  %tmp13 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !138
  %tmp15 = mul nsw i64 %tmp14, %tmp11
  %tmp16 = bitcast double** %tmp12 to i8**
  %tmp17 = load i8*, i8** %tmp16, align 8, !tbaa !230
  %tmp18 = trunc i64 %arg3 to i32
  call void @chpl_mem_array_free(i8* %tmp17, i64 %tmp15, i64 8, i32 %tmp18, i32 %arg4)
  ret void
}

define internal void @dsiDestroyArr3(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !236
  %tmp7 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp6)
  %tmp8 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !236
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp10 = insertvalue %range_int64_t_bounded_F %tmp9, i64 %.unpack2, 1
  %tmp11 = call i64 @length(%range_int64_t_bounded_F %tmp10)
  %tmp12 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 6
  %tmp13 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !138
  %tmp15 = mul nsw i64 %tmp14, %tmp11
  %tmp16 = bitcast i64** %tmp12 to i8**
  %tmp17 = load i8*, i8** %tmp16, align 8, !tbaa !240
  %tmp18 = trunc i64 %arg3 to i32
  call void @chpl_mem_array_free(i8* %tmp17, i64 %tmp15, i64 8, i32 %tmp18, i32 %arg4)
  ret void
}

define internal void @dsiDestroyArr4(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !246
  %tmp7 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp6)
  %tmp8 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !246
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp10 = insertvalue %range_int64_t_bounded_F %tmp9, i64 %.unpack2, 1
  %tmp11 = call i64 @length(%range_int64_t_bounded_F %tmp10)
  %tmp12 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 6
  %tmp13 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !138
  %tmp15 = mul nsw i64 %tmp14, %tmp11
  %tmp16 = bitcast i64** %tmp12 to i8**
  %tmp17 = load i8*, i8** %tmp16, align 8, !tbaa !250
  %tmp18 = trunc i64 %arg3 to i32
  call void @chpl_mem_array_free(i8* %tmp17, i64 %tmp15, i64 8, i32 %tmp18, i32 %arg4)
  ret void
}

define internal void @dsiDestroyArr5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 1
  %tmp6 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !99
  %tmp7 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp6)
  %tmp8 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp5, align 8, !tbaa !99
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp8, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp10 = insertvalue %range_int64_t_bounded_F %tmp9, i64 %.unpack2, 1
  %tmp11 = call i64 @length(%range_int64_t_bounded_F %tmp10)
  %tmp12 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 6
  %tmp13 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !138
  %tmp15 = mul nsw i64 %tmp14, %tmp11
  %tmp16 = bitcast %chpl_localesSignal_object*** %tmp12 to i8**
  %tmp17 = load i8*, i8** %tmp16, align 8, !tbaa !244
  %tmp18 = trunc i64 %arg3 to i32
  call void @chpl_mem_array_free(i8* %tmp17, i64 %tmp15, i64 8, i32 %tmp18, i32 %arg4)
  ret void
}

define internal void @computeFactoredOffs(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 5
  store i64 0, i64* %tmp, align 8, !tbaa !249
  %tmp1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp2 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp3 = load i64, i64* %tmp2, align 8, !tbaa !138
  %tmp4 = load i64, i64* %tmp1, align 8, !tbaa !138
  %tmp5 = mul nsw i64 %tmp4, %tmp3
  store i64 %tmp5, i64* %tmp, align 8, !tbaa !249
  ret void
}

define internal void @computeFactoredOffs2(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 5
  store i64 0, i64* %tmp, align 8, !tbaa !239
  %tmp1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp2 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp3 = load i64, i64* %tmp2, align 8, !tbaa !138
  %tmp4 = load i64, i64* %tmp1, align 8, !tbaa !138
  %tmp5 = mul nsw i64 %tmp4, %tmp3
  store i64 %tmp5, i64* %tmp, align 8, !tbaa !239
  ret void
}

define internal void @computeFactoredOffs3(%ARRTY* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 5
  store i64 0, i64* %tmp, align 8, !tbaa !229
  %tmp1 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 0
  %tmp2 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  %tmp3 = load i64, i64* %tmp2, align 8, !tbaa !138
  %tmp4 = load i64, i64* %tmp1, align 8, !tbaa !138
  %tmp5 = mul nsw i64 %tmp4, %tmp3
  store i64 %tmp5, i64* %tmp, align 8, !tbaa !229
  %tmp6 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 1
  %tmp7 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 1
  %tmp8 = load i64, i64* %tmp7, align 8, !tbaa !138
  %tmp9 = load i64, i64* %tmp6, align 8, !tbaa !138
  %tmp10 = mul nsw i64 %tmp9, %tmp8
  %tmp11 = add nsw i64 %tmp10, %tmp5
  store i64 %tmp11, i64* %tmp, align 8, !tbaa !229
  ret void
}

define internal void @computeFactoredOffs4(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 5
  store i64 0, i64* %tmp, align 8, !tbaa !243
  %tmp1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp2 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp3 = load i64, i64* %tmp2, align 8, !tbaa !138
  %tmp4 = load i64, i64* %tmp1, align 8, !tbaa !138
  %tmp5 = mul nsw i64 %tmp4, %tmp3
  store i64 %tmp5, i64* %tmp, align 8, !tbaa !243
  ret void
}

define internal void @computeFactoredOffs5(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 5
  store i64 0, i64* %tmp, align 8, !tbaa !233
  %tmp1 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp2 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp3 = load i64, i64* %tmp2, align 8, !tbaa !138
  %tmp4 = load i64, i64* %tmp1, align 8, !tbaa !138
  %tmp5 = mul nsw i64 %tmp4, %tmp3
  store i64 %tmp5, i64* %tmp, align 8, !tbaa !233
  ret void
}

define internal void @postinit(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 %arg17, i32 %arg18) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  %tmp20 = alloca %range_int64_t_bounded_F, align 8
  %tmp21 = alloca i8, align 1
  %tmp22 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 8
  %tmp24 = load i8, i8* %tmp23, align 1, !tbaa !252
  %tmp25 = icmp eq i8 %tmp24, 1
  br i1 %tmp25, label %bb66, label %bb26

bb26:                                             ; preds = %.split
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp28 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !246
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp28, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %.unpack, i64* %tmp29, align 8, !tbaa !138
  %tmp30 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !246
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp30, %range_int64_t_bounded_F* %tmp19)
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 1, i64* %tmp31, align 8, !tbaa !138
  %tmp32 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 1, i64* %tmp32, align 8, !tbaa !138
  call void @computeFactoredOffs(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg)
  %tmp33 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !246
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp33, %range_int64_t_bounded_F* %tmp20)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp34 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp35 = insertvalue %range_int64_t_bounded_F %tmp34, i64 %.unpack9, 1
  %tmp36 = call i64 @length(%range_int64_t_bounded_F %tmp35)
  %tmp37 = load i64, i64* %tmp32, align 8, !tbaa !138
  %tmp38 = mul nsw i64 %tmp37, %tmp36
  %tmp39 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 6
  %tmp40 = load i64*, i64** %tmp39, align 8, !tbaa !250
  %tmp41 = icmp eq i64* %tmp40, null
  br i1 %tmp41, label %bb42, label %bb53

bb42:                                             ; preds = %bb26
  store i8 0, i8* %tmp21, align 1, !tbaa !8
  %tmp43 = call i8* @c_pointer_return(i8* nonnull %tmp21)
  %tmp44 = trunc i64 %arg17 to i32
  %tmp45 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* %tmp43, i8* null, i32 %tmp44, i32 %arg18)
  %tmp46 = bitcast i8* %tmp45 to i64*
  call void @init_elts3(i64* %tmp46, i64 %tmp38, i64 %arg17, i32 %arg18)
  %tmp47 = load i8, i8* %tmp21, align 1, !tbaa !2
  %tmp48 = icmp eq i8 %tmp47, 0
  br i1 %tmp48, label %bb52, label %bb49

bb49:                                             ; preds = %bb42
  %tmp50 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* null, i8* %tmp45, i32 %tmp44, i32 %arg18)
  %tmp51 = bitcast i8* %tmp50 to i64*
  br label %bb52

bb52:                                             ; preds = %bb42, %bb49
  %.0 = phi i64* [ %tmp51, %bb49 ], [ %tmp46, %bb42 ]
  store i64* %.0, i64** %tmp39, align 8, !tbaa !250
  br label %bb53

bb53:                                             ; preds = %bb52, %bb26
  %tmp54 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !246
  %tmp55 = call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp54)
  %tmp56 = icmp sgt i64 %tmp55, 0
  br i1 %tmp56, label %bb57, label %bb64

bb57:                                             ; preds = %bb53
  %tmp58 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 5
  %tmp59 = load i64, i64* %tmp58, align 8, !tbaa !249
  %tmp60 = sub nsw i64 0, %tmp59
  %tmp61 = load i64*, i64** %tmp39, align 8, !tbaa !250
  %tmp62 = getelementptr inbounds i64, i64* %tmp61, i64 %tmp60
  %tmp63 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 7
  store i64* %tmp62, i64** %tmp63, align 8, !tbaa !251
  br label %bb64

bb64:                                             ; preds = %bb57, %bb53
  %tmp65 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !246
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp65, %range_int64_t_bounded_F* %tmp22)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack11, i64* %.repack, align 8
  %.repack15 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack13, i64* %.repack15, align 8
  br label %bb66

bb66:                                             ; preds = %.split, %bb64
  ret void
}

define internal void @postinit2(%ARRTY* %arg, i64 %arg21, i32 %arg22) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp23 = alloca %range_int64_t_bounded_F, align 8
  %tmp24 = alloca %range_int64_t_bounded_F, align 8
  %tmp25 = alloca %range_int64_t_bounded_F, align 8
  %tmp26 = alloca %range_int64_t_bounded_F, align 8
  %tmp27 = alloca %range_int64_t_bounded_F, align 8
  %tmp28 = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp29 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 8
  %tmp30 = load i8, i8* %tmp29, align 1, !tbaa !232
  %tmp31 = icmp eq i8 %tmp30, 1
  br i1 %tmp31, label %bb81, label %bb32

bb32:                                             ; preds = %.split
  %tmp33 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 1
  %tmp34 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  call void @dsiDim2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp34, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp35 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 0
  store i64 %.unpack, i64* %tmp35, align 8, !tbaa !138
  %tmp36 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  call void @dsiDim2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp36, %range_int64_t_bounded_F* %tmp23)
  %tmp37 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 4, i64 0
  store i64 1, i64* %tmp37, align 8, !tbaa !138
  %tmp38 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  call void @dsiDim4(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp38, %range_int64_t_bounded_F* %tmp24)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp39 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 1
  store i64 %.unpack7, i64* %tmp39, align 8, !tbaa !138
  %tmp40 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  call void @dsiDim4(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp40, %range_int64_t_bounded_F* %tmp25)
  %tmp41 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 4, i64 1
  store i64 1, i64* %tmp41, align 8, !tbaa !138
  %tmp42 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp42, align 8, !tbaa !138
  %tmp43 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  call void @dsiDim4(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp43, %range_int64_t_bounded_F* %tmp26)
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp26, i64 0, i32 0
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp44 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack14, 0
  %.elt15 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp26, i64 0, i32 1
  %.unpack16 = load i64, i64* %.elt15, align 8
  %tmp45 = insertvalue %range_int64_t_bounded_F %tmp44, i64 %.unpack16, 1
  %tmp46 = call i64 @length(%range_int64_t_bounded_F %tmp45)
  %tmp47 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  %tmp48 = load i64, i64* %tmp42, align 8, !tbaa !138
  %tmp49 = mul nsw i64 %tmp48, %tmp46
  store i64 %tmp49, i64* %tmp47, align 8, !tbaa !138
  call void @computeFactoredOffs3(%ARRTY* %arg)
  %tmp50 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  call void @dsiDim2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp50, %range_int64_t_bounded_F* %tmp27)
  %.elt17 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp27, i64 0, i32 0
  %.unpack18 = load i64, i64* %.elt17, align 8
  %tmp51 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack18, 0
  %.elt19 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp27, i64 0, i32 1
  %.unpack20 = load i64, i64* %.elt19, align 8
  %tmp52 = insertvalue %range_int64_t_bounded_F %tmp51, i64 %.unpack20, 1
  %tmp53 = call i64 @length(%range_int64_t_bounded_F %tmp52)
  %tmp54 = load i64, i64* %tmp47, align 8, !tbaa !138
  %tmp55 = mul nsw i64 %tmp54, %tmp53
  %tmp56 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 6
  %tmp57 = load double*, double** %tmp56, align 8, !tbaa !230
  %tmp58 = icmp eq double* %tmp57, null
  br i1 %tmp58, label %bb59, label %bb70

bb59:                                             ; preds = %bb32
  store i8 0, i8* %tmp28, align 1, !tbaa !8
  %tmp60 = call i8* @c_pointer_return(i8* nonnull %tmp28)
  %tmp61 = trunc i64 %arg21 to i32
  %tmp62 = call i8* @chpl_mem_array_alloc(i64 %tmp55, i64 8, i32 -1, i8* %tmp60, i8* null, i32 %tmp61, i32 %arg22)
  %tmp63 = bitcast i8* %tmp62 to double*
  call void @init_elts(double* %tmp63, i64 %tmp55, i64 %arg21, i32 %arg22)
  %tmp64 = load i8, i8* %tmp28, align 1, !tbaa !2
  %tmp65 = icmp eq i8 %tmp64, 0
  br i1 %tmp65, label %bb69, label %bb66

bb66:                                             ; preds = %bb59
  %tmp67 = call i8* @chpl_mem_array_alloc(i64 %tmp55, i64 8, i32 -1, i8* null, i8* %tmp62, i32 %tmp61, i32 %arg22)
  %tmp68 = bitcast i8* %tmp67 to double*
  br label %bb69

bb69:                                             ; preds = %bb59, %bb66
  %.0 = phi double* [ %tmp68, %bb66 ], [ %tmp63, %bb59 ]
  store double* %.0, double** %tmp56, align 8, !tbaa !230
  br label %bb70

bb70:                                             ; preds = %bb69, %bb32
  %tmp71 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp33, align 8, !tbaa !93
  %tmp72 = call i64 @dsiNumIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp71)
  %tmp73 = icmp sgt i64 %tmp72, 0
  br i1 %tmp73, label %bb74, label %bb81

bb74:                                             ; preds = %bb70
  %tmp75 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 5
  %tmp76 = load i64, i64* %tmp75, align 8, !tbaa !229
  %tmp77 = sub nsw i64 0, %tmp76
  %tmp78 = load double*, double** %tmp56, align 8, !tbaa !230
  %tmp79 = getelementptr inbounds double, double* %tmp78, i64 %tmp77
  %tmp80 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 7
  store double* %tmp79, double** %tmp80, align 8, !tbaa !231
  br label %bb81

bb81:                                             ; preds = %bb70, %bb74, %.split
  ret void
}

define internal void @postinit3(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg17, i32 %arg18) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  %tmp20 = alloca %range_int64_t_bounded_F, align 8
  %tmp21 = alloca i8, align 1
  %tmp22 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 8
  %tmp24 = load i8, i8* %tmp23, align 1, !tbaa !235
  %tmp25 = icmp eq i8 %tmp24, 1
  br i1 %tmp25, label %bb66, label %bb26

bb26:                                             ; preds = %.split
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 1
  %tmp28 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !85
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp28, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %.unpack, i64* %tmp29, align 8, !tbaa !138
  %tmp30 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !85
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp30, %range_int64_t_bounded_F* %tmp19)
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 1, i64* %tmp31, align 8, !tbaa !138
  %tmp32 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 1, i64* %tmp32, align 8, !tbaa !138
  call void @computeFactoredOffs5(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg)
  %tmp33 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !85
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp33, %range_int64_t_bounded_F* %tmp20)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp34 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp35 = insertvalue %range_int64_t_bounded_F %tmp34, i64 %.unpack9, 1
  %tmp36 = call i64 @length(%range_int64_t_bounded_F %tmp35)
  %tmp37 = load i64, i64* %tmp32, align 8, !tbaa !138
  %tmp38 = mul nsw i64 %tmp37, %tmp36
  %tmp39 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 6
  %tmp40 = load %chpl_locale_object**, %chpl_locale_object*** %tmp39, align 8, !tbaa !234
  %tmp41 = icmp eq %chpl_locale_object** %tmp40, null
  br i1 %tmp41, label %bb42, label %bb53

bb42:                                             ; preds = %bb26
  store i8 0, i8* %tmp21, align 1, !tbaa !8
  %tmp43 = call i8* @c_pointer_return(i8* nonnull %tmp21)
  %tmp44 = trunc i64 %arg17 to i32
  %tmp45 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* %tmp43, i8* null, i32 %tmp44, i32 %arg18)
  %tmp46 = bitcast i8* %tmp45 to %chpl_locale_object**
  call void @init_elts5(%chpl_locale_object** %tmp46, i64 %tmp38, i64 %arg17, i32 %arg18)
  %tmp47 = load i8, i8* %tmp21, align 1, !tbaa !2
  %tmp48 = icmp eq i8 %tmp47, 0
  br i1 %tmp48, label %bb52, label %bb49

bb49:                                             ; preds = %bb42
  %tmp50 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* null, i8* %tmp45, i32 %tmp44, i32 %arg18)
  %tmp51 = bitcast i8* %tmp50 to %chpl_locale_object**
  br label %bb52

bb52:                                             ; preds = %bb42, %bb49
  %.0 = phi %chpl_locale_object** [ %tmp51, %bb49 ], [ %tmp46, %bb42 ]
  store %chpl_locale_object** %.0, %chpl_locale_object*** %tmp39, align 8, !tbaa !234
  br label %bb53

bb53:                                             ; preds = %bb52, %bb26
  %tmp54 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !85
  %tmp55 = call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp54)
  %tmp56 = icmp sgt i64 %tmp55, 0
  br i1 %tmp56, label %bb57, label %bb64

bb57:                                             ; preds = %bb53
  %tmp58 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 5
  %tmp59 = load i64, i64* %tmp58, align 8, !tbaa !233
  %tmp60 = sub nsw i64 0, %tmp59
  %tmp61 = load %chpl_locale_object**, %chpl_locale_object*** %tmp39, align 8, !tbaa !234
  %tmp62 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp61, i64 %tmp60
  %tmp63 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 7
  store %chpl_locale_object** %tmp62, %chpl_locale_object*** %tmp63, align 8, !tbaa !213
  br label %bb64

bb64:                                             ; preds = %bb57, %bb53
  %tmp65 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !85
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp65, %range_int64_t_bounded_F* %tmp22)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack11, i64* %.repack, align 8
  %.repack15 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack13, i64* %.repack15, align 8
  br label %bb66

bb66:                                             ; preds = %.split, %bb64
  ret void
}

define internal void @postinit4(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 %arg17, i32 %arg18) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  %tmp20 = alloca %range_int64_t_bounded_F, align 8
  %tmp21 = alloca i8, align 1
  %tmp22 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 8
  %tmp24 = load i8, i8* %tmp23, align 1, !tbaa !242
  %tmp25 = icmp eq i8 %tmp24, 1
  br i1 %tmp25, label %bb66, label %bb26

bb26:                                             ; preds = %.split
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp28 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !236
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp28, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %.unpack, i64* %tmp29, align 8, !tbaa !138
  %tmp30 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !236
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp30, %range_int64_t_bounded_F* %tmp19)
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 1, i64* %tmp31, align 8, !tbaa !138
  %tmp32 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 1, i64* %tmp32, align 8, !tbaa !138
  call void @computeFactoredOffs2(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg)
  %tmp33 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !236
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp33, %range_int64_t_bounded_F* %tmp20)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp34 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp35 = insertvalue %range_int64_t_bounded_F %tmp34, i64 %.unpack9, 1
  %tmp36 = call i64 @length(%range_int64_t_bounded_F %tmp35)
  %tmp37 = load i64, i64* %tmp32, align 8, !tbaa !138
  %tmp38 = mul nsw i64 %tmp37, %tmp36
  %tmp39 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 6
  %tmp40 = load i64*, i64** %tmp39, align 8, !tbaa !240
  %tmp41 = icmp eq i64* %tmp40, null
  br i1 %tmp41, label %bb42, label %bb53

bb42:                                             ; preds = %bb26
  store i8 0, i8* %tmp21, align 1, !tbaa !8
  %tmp43 = call i8* @c_pointer_return(i8* nonnull %tmp21)
  %tmp44 = trunc i64 %arg17 to i32
  %tmp45 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* %tmp43, i8* null, i32 %tmp44, i32 %arg18)
  %tmp46 = bitcast i8* %tmp45 to i64*
  call void @init_elts2(i64* %tmp46, i64 %tmp38, i64 %arg17, i32 %arg18)
  %tmp47 = load i8, i8* %tmp21, align 1, !tbaa !2
  %tmp48 = icmp eq i8 %tmp47, 0
  br i1 %tmp48, label %bb52, label %bb49

bb49:                                             ; preds = %bb42
  %tmp50 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* null, i8* %tmp45, i32 %tmp44, i32 %arg18)
  %tmp51 = bitcast i8* %tmp50 to i64*
  br label %bb52

bb52:                                             ; preds = %bb42, %bb49
  %.0 = phi i64* [ %tmp51, %bb49 ], [ %tmp46, %bb42 ]
  store i64* %.0, i64** %tmp39, align 8, !tbaa !240
  br label %bb53

bb53:                                             ; preds = %bb52, %bb26
  %tmp54 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !236
  %tmp55 = call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp54)
  %tmp56 = icmp sgt i64 %tmp55, 0
  br i1 %tmp56, label %bb57, label %bb64

bb57:                                             ; preds = %bb53
  %tmp58 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 5
  %tmp59 = load i64, i64* %tmp58, align 8, !tbaa !239
  %tmp60 = sub nsw i64 0, %tmp59
  %tmp61 = load i64*, i64** %tmp39, align 8, !tbaa !240
  %tmp62 = getelementptr inbounds i64, i64* %tmp61, i64 %tmp60
  %tmp63 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 7
  store i64* %tmp62, i64** %tmp63, align 8, !tbaa !241
  br label %bb64

bb64:                                             ; preds = %bb57, %bb53
  %tmp65 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !236
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp65, %range_int64_t_bounded_F* %tmp22)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack11, i64* %.repack, align 8
  %.repack15 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack13, i64* %.repack15, align 8
  br label %bb66

bb66:                                             ; preds = %.split, %bb64
  ret void
}

define internal void @postinit5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg17, i32 %arg18) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  %tmp20 = alloca %range_int64_t_bounded_F, align 8
  %tmp21 = alloca i8, align 1
  %tmp22 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp23 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 8
  %tmp24 = load i8, i8* %tmp23, align 1, !tbaa !245
  %tmp25 = icmp eq i8 %tmp24, 1
  br i1 %tmp25, label %bb66, label %bb26

bb26:                                             ; preds = %.split
  %tmp27 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 1
  %tmp28 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !99
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp28, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp29 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 2, i64 0
  store i64 %.unpack, i64* %tmp29, align 8, !tbaa !138
  %tmp30 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !99
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp30, %range_int64_t_bounded_F* %tmp19)
  %tmp31 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 4, i64 0
  store i64 1, i64* %tmp31, align 8, !tbaa !138
  %tmp32 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 3, i64 0
  store i64 1, i64* %tmp32, align 8, !tbaa !138
  call void @computeFactoredOffs4(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg)
  %tmp33 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !99
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp33, %range_int64_t_bounded_F* %tmp20)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp34 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp20, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp35 = insertvalue %range_int64_t_bounded_F %tmp34, i64 %.unpack9, 1
  %tmp36 = call i64 @length(%range_int64_t_bounded_F %tmp35)
  %tmp37 = load i64, i64* %tmp32, align 8, !tbaa !138
  %tmp38 = mul nsw i64 %tmp37, %tmp36
  %tmp39 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 6
  %tmp40 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp39, align 8, !tbaa !244
  %tmp41 = icmp eq %chpl_localesSignal_object** %tmp40, null
  br i1 %tmp41, label %bb42, label %bb53

bb42:                                             ; preds = %bb26
  store i8 0, i8* %tmp21, align 1, !tbaa !8
  %tmp43 = call i8* @c_pointer_return(i8* nonnull %tmp21)
  %tmp44 = trunc i64 %arg17 to i32
  %tmp45 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* %tmp43, i8* null, i32 %tmp44, i32 %arg18)
  %tmp46 = bitcast i8* %tmp45 to %chpl_localesSignal_object**
  call void @init_elts4(%chpl_localesSignal_object** %tmp46, i64 %tmp38, i64 %arg17, i32 %arg18)
  %tmp47 = load i8, i8* %tmp21, align 1, !tbaa !2
  %tmp48 = icmp eq i8 %tmp47, 0
  br i1 %tmp48, label %bb52, label %bb49

bb49:                                             ; preds = %bb42
  %tmp50 = call i8* @chpl_mem_array_alloc(i64 %tmp38, i64 8, i32 -1, i8* null, i8* %tmp45, i32 %tmp44, i32 %arg18)
  %tmp51 = bitcast i8* %tmp50 to %chpl_localesSignal_object**
  br label %bb52

bb52:                                             ; preds = %bb42, %bb49
  %.0 = phi %chpl_localesSignal_object** [ %tmp51, %bb49 ], [ %tmp46, %bb42 ]
  store %chpl_localesSignal_object** %.0, %chpl_localesSignal_object*** %tmp39, align 8, !tbaa !244
  br label %bb53

bb53:                                             ; preds = %bb52, %bb26
  %tmp54 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !99
  %tmp55 = call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp54)
  %tmp56 = icmp sgt i64 %tmp55, 0
  br i1 %tmp56, label %bb57, label %bb64

bb57:                                             ; preds = %bb53
  %tmp58 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 5
  %tmp59 = load i64, i64* %tmp58, align 8, !tbaa !243
  %tmp60 = sub nsw i64 0, %tmp59
  %tmp61 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp39, align 8, !tbaa !244
  %tmp62 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp61, i64 %tmp60
  %tmp63 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 7
  store %chpl_localesSignal_object** %tmp62, %chpl_localesSignal_object*** %tmp63, align 8, !tbaa !212
  br label %bb64

bb64:                                             ; preds = %bb57, %bb53
  %tmp65 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp27, align 8, !tbaa !99
  call void @dsiDim3(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp65, %range_int64_t_bounded_F* %tmp22)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp22, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack11, i64* %.repack, align 8
  %.repack15 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack13, i64* %.repack15, align 8
  br label %bb66

bb66:                                             ; preds = %.split, %bb64
  ret void
}

define internal void @dsiReallocate3(%ARRTY* %arg, [2 x %range_int64_t_bounded_F]* nonnull %arg108, i64 %arg109, i32 %arg110) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp111 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp112 = alloca [2 x i64], align 8
  %tmp113 = alloca [2 x i64], align 8
  %tmp114 = alloca [2 x i64], align 8
  %tmp115 = alloca %range_int64_t_bounded_F, align 8
  %tmp116 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp117 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp118 = alloca [2 x i64], align 8
  %tmp119 = alloca %struct.chpl_localeID_t, align 8
  %tmp120 = alloca [2 x i64], align 8
  %tmp121 = alloca %range_int64_t_bounded_F, align 8
  %tmp122 = alloca %range_int64_t_bounded_F, align 8
  %tmp123 = alloca %range_int64_t_bounded_F, align 8
  %tmp124 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp125 = alloca %range_int64_t_bounded_F, align 8
  %tmp126 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp127 = alloca %range_int64_t_bounded_F, align 8
  %tmp128 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp129 = alloca %range_int64_t_bounded_F, align 8
  %tmp130 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp130, align 8
  %tmp131 = alloca %chpl__class_localscoforall_fn6_object, align 8
  %tmp132 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp133 = load i8, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp134 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %.elt = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg108, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp135 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt7 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg108, i64 0, i64 0, i32 1
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp136 = insertvalue %range_int64_t_bounded_F %tmp135, i64 %.unpack8, 1
  %.elt9 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg108, i64 0, i64 1, i32 0
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp137 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack10, 0
  %.elt11 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg108, i64 0, i64 1, i32 1
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp138 = insertvalue %range_int64_t_bounded_F %tmp137, i64 %.unpack12, 1
  call void @chpl__buildDomainExpr(%range_int64_t_bounded_F %tmp136, %range_int64_t_bounded_F %tmp138, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp111, i64 %arg109, i32 %arg110)
  %tmp139 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp111, i64 0, i32 2
  %tmp140 = load i8, i8* %tmp139, align 8, !tbaa !36
  %tmp141 = icmp eq i8 %tmp140, 0
  br i1 %tmp141, label %bb144, label %bb142

bb142:                                            ; preds = %.split
  %tmp143 = call %_domain_DefaultRectangularDom_2_int64_t_F @chpl__initCopy(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp111, i64 %arg109, i32 %arg110)
  br label %bb146

bb144:                                            ; preds = %.split
  %tmp145 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp111, align 8
  br label %bb146

bb146:                                            ; preds = %bb144, %bb142
  %.0 = phi %_domain_DefaultRectangularDom_2_int64_t_F [ %tmp143, %bb142 ], [ %tmp145, %bb144 ]
  store %_domain_DefaultRectangularDom_2_int64_t_F %.0, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, align 8
  %tmp147 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 0, i32 1
  %tmp148 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp147, align 8, !tbaa !35
  %tmp149 = call i8* @chpl_here_alloc(i64 128, i16 77, i64 %arg109, i32 %arg110)
  %tmp150 = bitcast i8* %tmp149 to %ARRTY*
  %tmp151 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp112, i64 0, i64 0
  store i64 0, i64* %tmp151, align 8, !tbaa !138
  %tmp152 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp112, i64 0, i64 1
  store i64 0, i64* %tmp152, align 8, !tbaa !138
  %tmp153 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp113, i64 0, i64 0
  store i64 0, i64* %tmp153, align 8, !tbaa !138
  %tmp154 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp113, i64 0, i64 1
  store i64 0, i64* %tmp154, align 8, !tbaa !138
  %tmp155 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp114, i64 0, i64 0
  store i64 0, i64* %tmp155, align 8, !tbaa !138
  %tmp156 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp114, i64 0, i64 1
  store i64 0, i64* %tmp156, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp115, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp115, i64 0, i32 0
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp157 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack14, 0
  %.elt15 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp115, i64 0, i32 1
  %.unpack16 = load i64, i64* %.elt15, align 8
  %tmp158 = insertvalue %range_int64_t_bounded_F %tmp157, i64 %.unpack16, 1
  call void @init27(%ARRTY* %tmp150, i64 -1, i8 0, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp148, [2 x i64]* %tmp112, [2 x i64]* %tmp113, [2 x i64]* %tmp114, i64 0, double* null, double* null, i8 0, %range_int64_t_bounded_F %tmp158, i64 %arg109, i32 %arg110)
  call void @postinit2(%ARRTY* %tmp150, i64 %arg109, i32 %arg110)
  %tmp159 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 1
  %tmp160 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp159, align 8, !tbaa !93
  %.elt17 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp160, i64 0, i32 2, i64 0, i32 0
  %.unpack18 = load i64, i64* %.elt17, align 8
  %tmp161 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack18, 0
  %.elt19 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp160, i64 0, i32 2, i64 0, i32 1
  %.unpack20 = load i64, i64* %.elt19, align 8
  %tmp162 = insertvalue %range_int64_t_bounded_F %tmp161, i64 %.unpack20, 1
  %.elt21 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp160, i64 0, i32 2, i64 1, i32 0
  %.unpack22 = load i64, i64* %.elt21, align 8
  %tmp163 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack22, 0
  %.elt23 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp160, i64 0, i32 2, i64 1, i32 1
  %.unpack24 = load i64, i64* %.elt23, align 8
  %tmp164 = insertvalue %range_int64_t_bounded_F %tmp163, i64 %.unpack24, 1
  call void @this3(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp, %range_int64_t_bounded_F %tmp162, %range_int64_t_bounded_F %tmp164, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp117, i64 %arg109, i32 %arg110)
  %tmp165 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp117, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp165, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp116, align 8
  %tmp166 = getelementptr inbounds %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp116, i64 0, i32 1
  %tmp167 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp166, align 8, !tbaa !35
  call void @createTuple_chpl2(i64 0, [2 x i64]* %tmp118)
  %tmp168 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp118, i64 0, i64 0
  %tmp169 = load i64, i64* %tmp168, align 8, !tbaa !138
  %tmp170 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp118, i64 0, i64 1
  %tmp171 = load i64, i64* %tmp170, align 8, !tbaa !138
  %tmp172 = icmp eq i64 %tmp134, 0
  br i1 %tmp172, label %bb173, label %bb180

bb173:                                            ; preds = %bb146
  %tmp174 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp175 = call i32 @chpl_rt_buildLocaleID(i32 %tmp174, i32 -2)
  %tmp176 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp119, i64 0, i32 0
  store i32 %tmp175, i32* %tmp176, align 8, !tbaa !110
  %tmp177 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp119, i64 %arg109, i32 %arg110)
  %tmp178 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp177, i64 0, i32 6
  %tmp179 = load i64, i64* %tmp178, align 8, !tbaa !210
  br label %bb180

bb180:                                            ; preds = %bb146, %bb173
  %.02 = phi i64 [ %tmp179, %bb173 ], [ %tmp134, %bb146 ]
  %tmp181 = call i8 @chpl_task_getSerial()
  %tmp182 = icmp eq i8 %tmp181, 0
  br i1 %tmp182, label %bb183, label %bb189

bb183:                                            ; preds = %bb180
  %tmp184 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2
  call void @_computeChunkStuff_chpl2(i64 %.02, i8 %tmp133, i64 %tmp132, [2 x %range_int64_t_bounded_F]* %tmp184, [2 x i64]* %tmp120, i64 %arg109, i32 %arg110)
  %tmp185 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp120, i64 0, i64 0
  %tmp186 = load i64, i64* %tmp185, align 8, !tbaa !138
  %tmp187 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp120, i64 0, i64 1
  %tmp188 = load i64, i64* %tmp187, align 8, !tbaa !138
  br label %bb189

bb189:                                            ; preds = %bb183, %bb180
  %.04 = phi i64 [ %tmp188, %bb183 ], [ -1, %bb180 ]
  %.03 = phi i64 [ %tmp186, %bb183 ], [ 1, %bb180 ]
  %tmp190 = icmp slt i64 %.03, 2
  br i1 %tmp190, label %bb191, label %bb225

bb191:                                            ; preds = %bb189
  %.elt80 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 0, i32 0
  %.unpack81 = load i64, i64* %.elt80, align 8
  %.elt82 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 0, i32 1
  %.unpack83 = load i64, i64* %.elt82, align 8
  %tmp192 = icmp sgt i64 %.unpack81, %.unpack83
  br i1 %tmp192, label %bb273, label %.preheader104

.preheader104:                                    ; preds = %bb191
  br label %bb193

bb193:                                            ; preds = %.preheader104, %bb222
  %.05 = phi i64 [ %tmp223, %bb222 ], [ %.unpack81, %.preheader104 ]
  %.elt92 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 1, i32 0
  %.unpack93 = load i64, i64* %.elt92, align 8
  %.elt94 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 1, i32 1
  %.unpack95 = load i64, i64* %.elt94, align 8
  %.repack96 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp121, i64 0, i32 0
  store i64 %.unpack93, i64* %.repack96, align 8
  %.repack98 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp121, i64 0, i32 1
  store i64 %.unpack95, i64* %.repack98, align 8
  %tmp194 = bitcast %range_int64_t_bounded_F* %tmp121 to i8*
  %tmp195 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp194)
  %tmp196 = getelementptr inbounds i8, i8* %tmp149, i64 96
  %tmp197 = bitcast i8* %tmp196 to double**
  %tmp198 = load double*, double** %tmp197, align 8, !tbaa !231
  %tmp199 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 7
  %tmp200 = load double*, double** %tmp199, align 8, !tbaa !231
  %tmp201 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp121, i64 0, i32 0
  %tmp202 = load i64, i64* %tmp201, align 8, !tbaa !219
  %tmp203 = icmp sgt i64 %tmp202, %.unpack95
  br i1 %tmp203, label %bb222, label %.preheader

.preheader:                                       ; preds = %bb193
  br label %bb204

bb204:                                            ; preds = %.preheader, %bb204
  %.06 = phi i64 [ %tmp220, %bb204 ], [ %tmp202, %.preheader ]
  %tmp205 = getelementptr inbounds i8, i8* %tmp149, i64 48
  %tmp206 = getelementptr inbounds i8, i8* %tmp149, i64 56
  %tmp207 = bitcast i8* %tmp206 to i64*
  store i64 1, i64* %tmp207, align 8, !tbaa !138
  %tmp208 = bitcast i8* %tmp205 to i64*
  %tmp209 = load i64, i64* %tmp208, align 8, !tbaa !138
  %tmp210 = call i64 @polly_array_index_2(i64 0, i64 %tmp209, i64 1, i64 %.05, i64 %.06)
  %tmp211 = getelementptr inbounds double, double* %tmp198, i64 %tmp210
  %tmp212 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp212, align 8, !tbaa !138
  %tmp213 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  %tmp214 = load i64, i64* %tmp213, align 8, !tbaa !138
  %tmp215 = call i64 @polly_array_index_2(i64 0, i64 %tmp214, i64 1, i64 %.05, i64 %.06)
  %tmp216 = getelementptr inbounds double, double* %tmp200, i64 %tmp215
  %tmp217 = bitcast double* %tmp216 to i64*
  %tmp218 = load i64, i64* %tmp217, align 8, !tbaa !111
  %tmp219 = bitcast double* %tmp211 to i64*
  store i64 %tmp218, i64* %tmp219, align 8, !tbaa !111
  %tmp220 = add nsw i64 %.06, 1
  %tmp221 = icmp slt i64 %.06, %.unpack95
  br i1 %tmp221, label %bb204, label %.loopexit

.loopexit:                                        ; preds = %bb204
  br label %bb222

bb222:                                            ; preds = %.loopexit, %bb193
  %tmp223 = add nsw i64 %.05, 1
  %tmp224 = icmp slt i64 %.05, %.unpack83
  br i1 %tmp224, label %bb193, label %.loopexit105

bb225:                                            ; preds = %bb189
  call void @init22(%range_int64_t_bounded_F* %tmp122, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @init22(%range_int64_t_bounded_F* %tmp123, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @chpl_build_low_bounded_range(i64 %tmp169, %range_int64_t_boundedLow_F* %tmp124)
  %.elt25 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp124, i64 0, i32 0
  %.unpack26 = load i64, i64* %.elt25, align 8
  %tmp226 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack26, 0
  %.elt27 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp124, i64 0, i32 1
  %.unpack28 = load i64, i64* %.elt27, align 8
  %tmp227 = insertvalue %range_int64_t_boundedLow_F %tmp226, i64 %.unpack28, 1
  %.elt29 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 0, i32 0
  %.unpack30 = load i64, i64* %.elt29, align 8
  %tmp228 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack30, 0
  %.elt31 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 0, i32 1
  %.unpack32 = load i64, i64* %.elt31, align 8
  %tmp229 = insertvalue %range_int64_t_bounded_F %tmp228, i64 %.unpack32, 1
  %tmp230 = call i64 @length(%range_int64_t_bounded_F %tmp229)
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp227, i64 %tmp230, %range_int64_t_bounded_F* %tmp125, i64 %arg109, i32 %arg110)
  %.elt33 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp125, i64 0, i32 0
  %.unpack34 = load i64, i64* %.elt33, align 8
  %.elt35 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp125, i64 0, i32 1
  %.unpack36 = load i64, i64* %.elt35, align 8
  call void @chpl_build_low_bounded_range(i64 %tmp171, %range_int64_t_boundedLow_F* %tmp126)
  %.elt37 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp126, i64 0, i32 0
  %.unpack38 = load i64, i64* %.elt37, align 8
  %tmp231 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack38, 0
  %.elt39 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp126, i64 0, i32 1
  %.unpack40 = load i64, i64* %.elt39, align 8
  %tmp232 = insertvalue %range_int64_t_boundedLow_F %tmp231, i64 %.unpack40, 1
  %.elt41 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 1, i32 0
  %.unpack42 = load i64, i64* %.elt41, align 8
  %tmp233 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack42, 0
  %.elt43 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, i64 0, i32 2, i64 1, i32 1
  %.unpack44 = load i64, i64* %.elt43, align 8
  %tmp234 = insertvalue %range_int64_t_bounded_F %tmp233, i64 %.unpack44, 1
  %tmp235 = call i64 @length(%range_int64_t_bounded_F %tmp234)
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp232, i64 %tmp235, %range_int64_t_bounded_F* %tmp127, i64 %arg109, i32 %arg110)
  %.elt45 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp127, i64 0, i32 0
  %.unpack46 = load i64, i64* %.elt45, align 8
  %.elt47 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp127, i64 0, i32 1
  %.unpack48 = load i64, i64* %.elt47, align 8
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp128)
  %.elt49 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp128, i64 0, i32 0
  %.unpack50 = load i64, i64* %.elt49, align 8
  %tmp236 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack50, 0
  %.elt51 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp128, i64 0, i32 1
  %.unpack52 = load i64, i64* %.elt51, align 8
  %tmp237 = insertvalue %range_int64_t_boundedLow_F %tmp236, i64 %.unpack52, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp237, i64 %.03, %range_int64_t_bounded_F* %tmp129, i64 %arg109, i32 %arg110)
  %.elt53 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp129, i64 0, i32 0
  %.unpack54 = load i64, i64* %.elt53, align 8
  %tmp238 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack54, 0
  %.elt55 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp129, i64 0, i32 1
  %.unpack56 = load i64, i64* %.elt55, align 8
  %tmp239 = insertvalue %range_int64_t_bounded_F %tmp238, i64 %.unpack56, 1
  %tmp240 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg109, i32 %arg110)
  %tmp241 = bitcast i8* %tmp240 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp241, i64 %arg109, i32 %arg110)
  %tmp242 = call i64 @length(%range_int64_t_bounded_F %tmp239)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp241, i64 %tmp242, i64 %arg109, i32 %arg110)
  %tmp243 = icmp sgt i64 %.unpack54, %.unpack56
  br i1 %tmp243, label %bb263, label %.preheader106

.preheader106:                                    ; preds = %bb225
  br label %bb244

bb244:                                            ; preds = %.preheader106, %bb244
  %.01 = phi i64 [ %tmp261, %bb244 ], [ %.unpack54, %.preheader106 ]
  %.repack72 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 1, i64 0, i32 0
  store i64 %.unpack34, i64* %.repack72, align 8
  %.repack74 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 1, i64 0, i32 1
  store i64 %.unpack36, i64* %.repack74, align 8
  %.repack76 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 1, i64 1, i32 0
  store i64 %.unpack46, i64* %.repack76, align 8
  %.repack78 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 1, i64 1, i32 1
  store i64 %.unpack48, i64* %.repack78, align 8
  %tmp245 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 2
  store i64 %.04, i64* %tmp245, align 8, !tbaa !253
  %tmp246 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 3
  store i64 %.03, i64* %tmp246, align 8, !tbaa !255
  %tmp247 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 4
  store i64 %.01, i64* %tmp247, align 8, !tbaa !256
  %tmp248 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 5
  store %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp167, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp248, align 8, !tbaa !257
  %tmp249 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 6
  %tmp250 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp249 to i8**
  store i8* %tmp240, i8** %tmp250, align 8, !tbaa !258
  %tmp251 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 7
  %tmp252 = bitcast %ARRTY** %tmp251 to i8**
  store i8* %tmp149, i8** %tmp252, align 8, !tbaa !259
  %tmp253 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 8
  store %ARRTY* %arg, %ARRTY** %tmp253, align 8, !tbaa !260
  %tmp254 = getelementptr inbounds i8, i8* %tmp240, i64 24
  %tmp255 = bitcast i8* %tmp254 to i8**
  %tmp256 = load i32, i32* @chpl_nodeID, align 4
  %tmp257 = sext i32 %tmp256 to i64
  %tmp258 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 9
  store i64 %arg109, i64* %tmp258, align 8, !tbaa !261
  %tmp259 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 10
  store i32 %arg110, i32* %tmp259, align 8, !tbaa !262
  %tmp260 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %tmp131, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 8, %struct.chpl_task_bundle_t* nonnull %tmp260, i64 176, i8** %tmp255, i64 %tmp257, i64 1276, i32 29)
  %tmp261 = add nsw i64 %.01, 1
  %tmp262 = icmp slt i64 %.01, %.unpack56
  br i1 %tmp262, label %bb244, label %.loopexit107

.loopexit107:                                     ; preds = %bb244
  br label %bb263

bb263:                                            ; preds = %.loopexit107, %bb225
  store %chpl_Error_object* null, %chpl_Error_object** %tmp130, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp241, i64 %tmp242, %chpl_Error_object** %tmp130, i64 %arg109, i32 %arg110)
  %tmp264 = load %chpl_Error_object*, %chpl_Error_object** %tmp130, align 8, !tbaa !125
  %tmp265 = icmp eq %chpl_Error_object* %tmp264, null
  br i1 %tmp265, label %bb267, label %bb266

bb266:                                            ; preds = %bb263
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp264, i64 %arg109, i32 %arg110)
  br label %bb267

bb267:                                            ; preds = %bb266, %bb263
  %tmp268 = icmp eq i8* %tmp240, null
  br i1 %tmp268, label %bb273, label %bb269

bb269:                                            ; preds = %bb267
  %tmp270 = getelementptr inbounds i8, i8* %tmp240, i64 32
  %tmp271 = bitcast i8* %tmp270 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp271)
  %tmp272 = getelementptr inbounds i8, i8* %tmp240, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp272)
  call void @chpl_here_free(i8* nonnull %tmp240, i64 %arg109, i32 %arg110)
  br label %bb273

.loopexit105:                                     ; preds = %bb222
  br label %bb273

bb273:                                            ; preds = %.loopexit105, %bb269, %bb267, %bb191
  %tmp274 = getelementptr inbounds i8, i8* %tmp149, i64 32
  %tmp275 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 0
  %tmp276 = bitcast i8* %tmp274 to i64*
  %tmp277 = load i64, i64* %tmp276, align 8, !tbaa !138
  store i64 %tmp277, i64* %tmp275, align 8, !tbaa !138
  %tmp278 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 2, i64 1
  %tmp279 = getelementptr inbounds i8, i8* %tmp149, i64 40
  %tmp280 = bitcast i8* %tmp279 to i64*
  %tmp281 = load i64, i64* %tmp280, align 8, !tbaa !138
  store i64 %tmp281, i64* %tmp278, align 8, !tbaa !138
  %tmp282 = getelementptr inbounds i8, i8* %tmp149, i64 48
  %tmp283 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  %tmp284 = bitcast i8* %tmp282 to i64*
  %tmp285 = load i64, i64* %tmp284, align 8, !tbaa !138
  store i64 %tmp285, i64* %tmp283, align 8, !tbaa !138
  %tmp286 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 1
  %tmp287 = getelementptr inbounds i8, i8* %tmp149, i64 56
  %tmp288 = bitcast i8* %tmp287 to i64*
  %tmp289 = load i64, i64* %tmp288, align 8, !tbaa !138
  store i64 %tmp289, i64* %tmp286, align 8, !tbaa !138
  %tmp290 = getelementptr inbounds i8, i8* %tmp149, i64 64
  %tmp291 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 4, i64 0
  %tmp292 = bitcast i8* %tmp290 to i64*
  %tmp293 = load i64, i64* %tmp292, align 8, !tbaa !138
  store i64 %tmp293, i64* %tmp291, align 8, !tbaa !138
  %tmp294 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 4, i64 1
  %tmp295 = getelementptr inbounds i8, i8* %tmp149, i64 72
  %tmp296 = bitcast i8* %tmp295 to i64*
  %tmp297 = load i64, i64* %tmp296, align 8, !tbaa !138
  store i64 %tmp297, i64* %tmp294, align 8, !tbaa !138
  %tmp298 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 5
  %tmp299 = getelementptr inbounds i8, i8* %tmp149, i64 80
  %tmp300 = bitcast i8* %tmp299 to i64*
  %tmp301 = load i64, i64* %tmp300, align 8, !tbaa !229
  store i64 %tmp301, i64* %tmp298, align 8, !tbaa !229
  call void @dsiDestroyArr2(%ARRTY* %arg, i64 %arg109, i32 %arg110)
  %tmp302 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 6
  %tmp303 = getelementptr inbounds i8, i8* %tmp149, i64 88
  %tmp304 = bitcast i8* %tmp303 to i64*
  %tmp305 = load i64, i64* %tmp304, align 8, !tbaa !230
  %tmp306 = bitcast double** %tmp302 to i64*
  store i64 %tmp305, i64* %tmp306, align 8, !tbaa !230
  %tmp307 = call i64 @numIndices(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp)
  %tmp308 = icmp sgt i64 %tmp307, 0
  br i1 %tmp308, label %bb309, label %bb315

bb309:                                            ; preds = %bb273
  %tmp310 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 7
  %tmp311 = getelementptr inbounds i8, i8* %tmp149, i64 96
  %tmp312 = bitcast i8* %tmp311 to i64*
  %tmp313 = load i64, i64* %tmp312, align 8, !tbaa !231
  %tmp314 = bitcast double** %tmp310 to i64*
  store i64 %tmp313, i64* %tmp314, align 8, !tbaa !231
  br label %bb315

bb315:                                            ; preds = %bb309, %bb273
  %tmp316 = getelementptr inbounds i8, i8* %tmp149, i64 112
  %.elt64 = bitcast i8* %tmp316 to i64*
  %.unpack65 = load i64, i64* %.elt64, align 8
  %.elt66 = getelementptr inbounds i8, i8* %tmp149, i64 120
  %tmp317 = bitcast i8* %.elt66 to i64*
  %.unpack67 = load i64, i64* %tmp317, align 8
  %.repack68 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack65, i64* %.repack68, align 8
  %.repack70 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack67, i64* %.repack70, align 8
  %tmp318 = icmp eq i8* %tmp149, null
  br i1 %tmp318, label %bb321, label %bb319

bb319:                                            ; preds = %bb315
  %tmp320 = bitcast i8* %tmp149 to %chpl_BaseRectangularArr_2_int64_t_F__real64_object*
  call void @deinit18(%chpl_BaseRectangularArr_2_int64_t_F__real64_object* %tmp320, i64 %arg109, i32 %arg110)
  call void @chpl_here_free(i8* nonnull %tmp149, i64 %arg109, i32 %arg110)
  br label %bb321

bb321:                                            ; preds = %bb315, %bb319
  call void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp116, i64 %arg109, i32 %arg110)
  call void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp, i64 %arg109, i32 %arg110)
  ret void
}

define internal void @dsiReallocate4(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg69, i64 %arg70, i32 %arg71) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp72 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp73 = alloca [1 x i64], align 8
  %tmp74 = alloca [1 x i64], align 8
  %tmp75 = alloca [1 x i64], align 8
  %tmp76 = alloca %range_int64_t_bounded_F, align 8
  %tmp77 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp78 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp79 = alloca [1 x i64], align 8
  %tmp80 = alloca %struct.chpl_localeID_t, align 8
  %tmp81 = alloca [2 x i64], align 8
  %tmp82 = alloca %range_int64_t_bounded_F, align 8
  %tmp83 = alloca %range_int64_t_bounded_F, align 8
  %tmp84 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp85 = alloca %range_int64_t_bounded_F, align 8
  %tmp86 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp87 = alloca %range_int64_t_bounded_F, align 8
  %tmp88 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8
  %tmp89 = alloca %chpl__class_localscoforall_fn7_object, align 8
  %tmp90 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp91 = load i8, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp92 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp93 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt6 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 1
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp94 = insertvalue %range_int64_t_bounded_F %tmp93, i64 %.unpack7, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp94, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  %tmp95 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 0, i32 2
  %tmp96 = load i8, i8* %tmp95, align 8, !tbaa !42
  %tmp97 = icmp eq i8 %tmp96, 0
  br i1 %tmp97, label %bb100, label %bb98

bb98:                                             ; preds = %.split
  %tmp99 = call %_domain_DefaultRectangularDom_1_int64_t_F @chpl__initCopy2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  br label %bb102

bb100:                                            ; preds = %.split
  %tmp101 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, align 8
  br label %bb102

bb102:                                            ; preds = %bb100, %bb98
  %.0 = phi %_domain_DefaultRectangularDom_1_int64_t_F [ %tmp99, %bb98 ], [ %tmp101, %bb100 ]
  store %_domain_DefaultRectangularDom_1_int64_t_F %.0, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp103 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 1
  %tmp104 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp103, align 8, !tbaa !41
  %tmp105 = call i8* @chpl_here_alloc(i64 104, i16 55, i64 %arg70, i32 %arg71)
  %tmp106 = bitcast i8* %tmp105 to %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*
  %tmp107 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp73, i64 0, i64 0
  store i64 0, i64* %tmp107, align 8, !tbaa !138
  %tmp108 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp74, i64 0, i64 0
  store i64 0, i64* %tmp108, align 8, !tbaa !138
  %tmp109 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp75, i64 0, i64 0
  store i64 0, i64* %tmp109, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp76, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 0
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp110 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack9, 0
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %tmp111 = insertvalue %range_int64_t_bounded_F %tmp110, i64 %.unpack11, 1
  call void @init28(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp106, i64 -1, i8 0, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp104, [1 x i64]* %tmp73, [1 x i64]* %tmp74, [1 x i64]* %tmp75, i64 0, %chpl_locale_object** null, %chpl_locale_object** null, i8 0, %range_int64_t_bounded_F %tmp111, i64 %arg70, i32 %arg71)
  call void @postinit3(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp106, i64 %arg70, i32 %arg71)
  %tmp112 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 1
  %tmp113 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp112, align 8, !tbaa !85
  %.elt12 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp114 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp115 = insertvalue %range_int64_t_bounded_F %tmp114, i64 %.unpack15, 1
  call void @this2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, %range_int64_t_bounded_F %tmp115, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, i64 %arg70, i32 %arg71)
  %tmp116 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp116, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, align 8
  %tmp117 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 0, i32 1
  %tmp118 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp117, align 8, !tbaa !41
  call void @createTuple_chpl(i64 0, [1 x i64]* %tmp79)
  %tmp119 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp79, i64 0, i64 0
  %tmp120 = load i64, i64* %tmp119, align 8, !tbaa !138
  %tmp121 = icmp eq i64 %tmp92, 0
  br i1 %tmp121, label %bb122, label %bb129

bb122:                                            ; preds = %bb102
  %tmp123 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp124 = call i32 @chpl_rt_buildLocaleID(i32 %tmp123, i32 -2)
  %tmp125 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp80, i64 0, i32 0
  store i32 %tmp124, i32* %tmp125, align 8, !tbaa !110
  %tmp126 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp80, i64 %arg70, i32 %arg71)
  %tmp127 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp126, i64 0, i32 6
  %tmp128 = load i64, i64* %tmp127, align 8, !tbaa !210
  br label %bb129

bb129:                                            ; preds = %bb102, %bb122
  %.01 = phi i64 [ %tmp128, %bb122 ], [ %tmp92, %bb102 ]
  %tmp130 = call i8 @chpl_task_getSerial()
  %tmp131 = icmp eq i8 %tmp130, 0
  br i1 %tmp131, label %bb132, label %bb138

bb132:                                            ; preds = %bb129
  %tmp133 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2
  call void @_computeChunkStuff_chpl(i64 %.01, i8 %tmp91, i64 %tmp90, [1 x %range_int64_t_bounded_F]* %tmp133, [2 x i64]* %tmp81, i64 %arg70, i32 %arg71)
  %tmp134 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 0
  %tmp135 = load i64, i64* %tmp134, align 8, !tbaa !138
  %tmp136 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 1
  %tmp137 = load i64, i64* %tmp136, align 8, !tbaa !138
  br label %bb138

bb138:                                            ; preds = %bb132, %bb129
  %.04 = phi i64 [ %tmp137, %bb132 ], [ -1, %bb129 ]
  %.03 = phi i64 [ %tmp135, %bb132 ], [ 1, %bb129 ]
  %tmp139 = icmp slt i64 %.03, 2
  br i1 %tmp139, label %bb140, label %bb159

bb140:                                            ; preds = %bb138
  %.elt55 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack56 = load i64, i64* %.elt55, align 8
  %.elt57 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack58 = load i64, i64* %.elt57, align 8
  %.repack59 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  store i64 %.unpack56, i64* %.repack59, align 8
  %.repack61 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 1
  store i64 %.unpack58, i64* %.repack61, align 8
  %tmp141 = bitcast %range_int64_t_bounded_F* %tmp82 to i8*
  %tmp142 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp141)
  %tmp143 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp144 = bitcast i8* %tmp143 to %chpl_locale_object***
  %tmp145 = load %chpl_locale_object**, %chpl_locale_object*** %tmp144, align 8, !tbaa !213
  %tmp146 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 7
  %tmp147 = load %chpl_locale_object**, %chpl_locale_object*** %tmp146, align 8, !tbaa !213
  %tmp148 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  %tmp149 = load i64, i64* %tmp148, align 8, !tbaa !219
  %tmp150 = icmp sgt i64 %tmp149, %.unpack58
  br i1 %tmp150, label %bb202, label %.preheader

.preheader:                                       ; preds = %bb140
  br label %bb151

bb151:                                            ; preds = %.preheader, %bb151
  %.05 = phi i64 [ %tmp157, %bb151 ], [ %tmp149, %.preheader ]
  %tmp152 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp145, i64 %.05
  %tmp153 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp147, i64 %.05
  %tmp154 = bitcast %chpl_locale_object** %tmp153 to i64*
  %tmp155 = load i64, i64* %tmp154, align 8, !tbaa !158
  %tmp156 = bitcast %chpl_locale_object** %tmp152 to i64*
  store i64 %tmp155, i64* %tmp156, align 8, !tbaa !158
  %tmp157 = add nsw i64 %.05, 1
  %tmp158 = icmp slt i64 %.05, %.unpack58
  br i1 %tmp158, label %bb151, label %.loopexit

bb159:                                            ; preds = %bb138
  call void @init22(%range_int64_t_bounded_F* %tmp83, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @chpl_build_low_bounded_range(i64 %tmp120, %range_int64_t_boundedLow_F* %tmp84)
  %.elt16 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 0
  %.unpack17 = load i64, i64* %.elt16, align 8
  %tmp160 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack17, 0
  %.elt18 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 1
  %.unpack19 = load i64, i64* %.elt18, align 8
  %tmp161 = insertvalue %range_int64_t_boundedLow_F %tmp160, i64 %.unpack19, 1
  %.elt20 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack21 = load i64, i64* %.elt20, align 8
  %tmp162 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack21, 0
  %.elt22 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack23 = load i64, i64* %.elt22, align 8
  %tmp163 = insertvalue %range_int64_t_bounded_F %tmp162, i64 %.unpack23, 1
  %tmp164 = call i64 @length(%range_int64_t_bounded_F %tmp163)
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp161, i64 %tmp164, %range_int64_t_bounded_F* %tmp85, i64 %arg70, i32 %arg71)
  %.elt24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 0
  %.unpack25 = load i64, i64* %.elt24, align 8
  %.elt26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 1
  %.unpack27 = load i64, i64* %.elt26, align 8
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp86)
  %.elt28 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 0
  %.unpack29 = load i64, i64* %.elt28, align 8
  %tmp165 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack29, 0
  %.elt30 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 1
  %.unpack31 = load i64, i64* %.elt30, align 8
  %tmp166 = insertvalue %range_int64_t_boundedLow_F %tmp165, i64 %.unpack31, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp166, i64 %.03, %range_int64_t_bounded_F* %tmp87, i64 %arg70, i32 %arg71)
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 0
  %.unpack33 = load i64, i64* %.elt32, align 8
  %tmp167 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack33, 0
  %.elt34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 1
  %.unpack35 = load i64, i64* %.elt34, align 8
  %tmp168 = insertvalue %range_int64_t_bounded_F %tmp167, i64 %.unpack35, 1
  %tmp169 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg70, i32 %arg71)
  %tmp170 = bitcast i8* %tmp169 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp170, i64 %arg70, i32 %arg71)
  %tmp171 = call i64 @length(%range_int64_t_bounded_F %tmp168)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp170, i64 %tmp171, i64 %arg70, i32 %arg71)
  %tmp172 = icmp sgt i64 %.unpack33, %.unpack35
  br i1 %tmp172, label %bb192, label %.preheader67

.preheader67:                                     ; preds = %bb159
  br label %bb173

bb173:                                            ; preds = %.preheader67, %bb173
  %.02 = phi i64 [ %tmp190, %bb173 ], [ %.unpack33, %.preheader67 ]
  %.repack51 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 1, i64 0, i32 0
  store i64 %.unpack25, i64* %.repack51, align 8
  %.repack53 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 1, i64 0, i32 1
  store i64 %.unpack27, i64* %.repack53, align 8
  %tmp174 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 2
  store i64 %.04, i64* %tmp174, align 8, !tbaa !263
  %tmp175 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 3
  store i64 %.03, i64* %tmp175, align 8, !tbaa !265
  %tmp176 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 4
  store i64 %.02, i64* %tmp176, align 8, !tbaa !266
  %tmp177 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 5
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp177, align 8, !tbaa !267
  %tmp178 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 6
  %tmp179 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp178 to i8**
  store i8* %tmp169, i8** %tmp179, align 8, !tbaa !268
  %tmp180 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 7
  %tmp181 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp180 to i8**
  store i8* %tmp105, i8** %tmp181, align 8, !tbaa !269
  %tmp182 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 8
  store %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp182, align 8, !tbaa !270
  %tmp183 = getelementptr inbounds i8, i8* %tmp169, i64 24
  %tmp184 = bitcast i8* %tmp183 to i8**
  %tmp185 = load i32, i32* @chpl_nodeID, align 4
  %tmp186 = sext i32 %tmp185 to i64
  %tmp187 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 9
  store i64 %arg70, i64* %tmp187, align 8, !tbaa !271
  %tmp188 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 10
  store i32 %arg71, i32* %tmp188, align 8, !tbaa !272
  %tmp189 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %tmp89, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 6, %struct.chpl_task_bundle_t* nonnull %tmp189, i64 160, i8** %tmp184, i64 %tmp186, i64 1276, i32 29)
  %tmp190 = add nsw i64 %.02, 1
  %tmp191 = icmp slt i64 %.02, %.unpack35
  br i1 %tmp191, label %bb173, label %.loopexit68

.loopexit68:                                      ; preds = %bb173
  br label %bb192

bb192:                                            ; preds = %.loopexit68, %bb159
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp170, i64 %tmp171, %chpl_Error_object** %tmp88, i64 %arg70, i32 %arg71)
  %tmp193 = load %chpl_Error_object*, %chpl_Error_object** %tmp88, align 8, !tbaa !125
  %tmp194 = icmp eq %chpl_Error_object* %tmp193, null
  br i1 %tmp194, label %bb196, label %bb195

bb195:                                            ; preds = %bb192
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp193, i64 %arg70, i32 %arg71)
  br label %bb196

bb196:                                            ; preds = %bb195, %bb192
  %tmp197 = icmp eq i8* %tmp169, null
  br i1 %tmp197, label %bb202, label %bb198

bb198:                                            ; preds = %bb196
  %tmp199 = getelementptr inbounds i8, i8* %tmp169, i64 32
  %tmp200 = bitcast i8* %tmp199 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp200)
  %tmp201 = getelementptr inbounds i8, i8* %tmp169, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp201)
  call void @chpl_here_free(i8* nonnull %tmp169, i64 %arg70, i32 %arg71)
  br label %bb202

.loopexit:                                        ; preds = %bb151
  br label %bb202

bb202:                                            ; preds = %.loopexit, %bb198, %bb196, %bb140
  %tmp203 = getelementptr inbounds i8, i8* %tmp105, i64 32
  %tmp204 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp205 = bitcast i8* %tmp203 to i64*
  %tmp206 = load i64, i64* %tmp205, align 8, !tbaa !138
  store i64 %tmp206, i64* %tmp204, align 8, !tbaa !138
  %tmp207 = getelementptr inbounds i8, i8* %tmp105, i64 40
  %tmp208 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp209 = bitcast i8* %tmp207 to i64*
  %tmp210 = load i64, i64* %tmp209, align 8, !tbaa !138
  store i64 %tmp210, i64* %tmp208, align 8, !tbaa !138
  %tmp211 = getelementptr inbounds i8, i8* %tmp105, i64 48
  %tmp212 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 4, i64 0
  %tmp213 = bitcast i8* %tmp211 to i64*
  %tmp214 = load i64, i64* %tmp213, align 8, !tbaa !138
  store i64 %tmp214, i64* %tmp212, align 8, !tbaa !138
  %tmp215 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 5
  %tmp216 = getelementptr inbounds i8, i8* %tmp105, i64 56
  %tmp217 = bitcast i8* %tmp216 to i64*
  %tmp218 = load i64, i64* %tmp217, align 8, !tbaa !233
  store i64 %tmp218, i64* %tmp215, align 8, !tbaa !233
  call void @dsiDestroyArr(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 %arg70, i32 %arg71)
  %tmp219 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 6
  %tmp220 = getelementptr inbounds i8, i8* %tmp105, i64 64
  %tmp221 = bitcast i8* %tmp220 to i64*
  %tmp222 = load i64, i64* %tmp221, align 8, !tbaa !234
  %tmp223 = bitcast %chpl_locale_object*** %tmp219 to i64*
  store i64 %tmp222, i64* %tmp223, align 8, !tbaa !234
  %tmp224 = call i64 @numIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp225 = icmp sgt i64 %tmp224, 0
  br i1 %tmp225, label %bb226, label %bb232

bb226:                                            ; preds = %bb202
  %tmp227 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 7
  %tmp228 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp229 = bitcast i8* %tmp228 to i64*
  %tmp230 = load i64, i64* %tmp229, align 8, !tbaa !213
  %tmp231 = bitcast %chpl_locale_object*** %tmp227 to i64*
  store i64 %tmp230, i64* %tmp231, align 8, !tbaa !213
  br label %bb232

bb232:                                            ; preds = %bb226, %bb202
  %tmp233 = getelementptr inbounds i8, i8* %tmp105, i64 88
  %.elt43 = bitcast i8* %tmp233 to i64*
  %.unpack44 = load i64, i64* %.elt43, align 8
  %.elt45 = getelementptr inbounds i8, i8* %tmp105, i64 96
  %tmp234 = bitcast i8* %.elt45 to i64*
  %.unpack46 = load i64, i64* %tmp234, align 8
  %.repack47 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack44, i64* %.repack47, align 8
  %.repack49 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack46, i64* %.repack49, align 8
  %tmp235 = icmp eq i8* %tmp105, null
  br i1 %tmp235, label %bb238, label %bb236

bb236:                                            ; preds = %bb232
  %tmp237 = bitcast i8* %tmp105 to %chpl_BaseRectangularArr_1_int64_t_F_locale_object*
  call void @deinit14(%chpl_BaseRectangularArr_1_int64_t_F_locale_object* %tmp237, i64 %arg70, i32 %arg71)
  call void @chpl_here_free(i8* nonnull %tmp105, i64 %arg70, i32 %arg71)
  br label %bb238

bb238:                                            ; preds = %bb232, %bb236
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 %arg70, i32 %arg71)
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg70, i32 %arg71)
  ret void
}

define internal void @dsiReallocate5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg69, i64 %arg70, i32 %arg71) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp72 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp73 = alloca [1 x i64], align 8
  %tmp74 = alloca [1 x i64], align 8
  %tmp75 = alloca [1 x i64], align 8
  %tmp76 = alloca %range_int64_t_bounded_F, align 8
  %tmp77 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp78 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp79 = alloca [1 x i64], align 8
  %tmp80 = alloca %struct.chpl_localeID_t, align 8
  %tmp81 = alloca [2 x i64], align 8
  %tmp82 = alloca %range_int64_t_bounded_F, align 8
  %tmp83 = alloca %range_int64_t_bounded_F, align 8
  %tmp84 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp85 = alloca %range_int64_t_bounded_F, align 8
  %tmp86 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp87 = alloca %range_int64_t_bounded_F, align 8
  %tmp88 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8
  %tmp89 = alloca %chpl__class_localscoforall_fn8_object, align 8
  %tmp90 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp91 = load i8, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp92 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp93 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt6 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 1
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp94 = insertvalue %range_int64_t_bounded_F %tmp93, i64 %.unpack7, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp94, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  %tmp95 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 0, i32 2
  %tmp96 = load i8, i8* %tmp95, align 8, !tbaa !42
  %tmp97 = icmp eq i8 %tmp96, 0
  br i1 %tmp97, label %bb100, label %bb98

bb98:                                             ; preds = %.split
  %tmp99 = call %_domain_DefaultRectangularDom_1_int64_t_F @chpl__initCopy2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  br label %bb102

bb100:                                            ; preds = %.split
  %tmp101 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, align 8
  br label %bb102

bb102:                                            ; preds = %bb100, %bb98
  %.0 = phi %_domain_DefaultRectangularDom_1_int64_t_F [ %tmp99, %bb98 ], [ %tmp101, %bb100 ]
  store %_domain_DefaultRectangularDom_1_int64_t_F %.0, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp103 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 1
  %tmp104 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp103, align 8, !tbaa !41
  %tmp105 = call i8* @chpl_here_alloc(i64 104, i16 70, i64 %arg70, i32 %arg71)
  %tmp106 = bitcast i8* %tmp105 to %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*
  %tmp107 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp73, i64 0, i64 0
  store i64 0, i64* %tmp107, align 8, !tbaa !138
  %tmp108 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp74, i64 0, i64 0
  store i64 0, i64* %tmp108, align 8, !tbaa !138
  %tmp109 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp75, i64 0, i64 0
  store i64 0, i64* %tmp109, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp76, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 0
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp110 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack9, 0
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %tmp111 = insertvalue %range_int64_t_bounded_F %tmp110, i64 %.unpack11, 1
  call void @init30(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp106, i64 -1, i8 0, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp104, [1 x i64]* %tmp73, [1 x i64]* %tmp74, [1 x i64]* %tmp75, i64 0, %chpl_localesSignal_object** null, %chpl_localesSignal_object** null, i8 0, %range_int64_t_bounded_F %tmp111, i64 %arg70, i32 %arg71)
  call void @postinit5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp106, i64 %arg70, i32 %arg71)
  %tmp112 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 1
  %tmp113 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp112, align 8, !tbaa !99
  %.elt12 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp114 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp115 = insertvalue %range_int64_t_bounded_F %tmp114, i64 %.unpack15, 1
  call void @this2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, %range_int64_t_bounded_F %tmp115, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, i64 %arg70, i32 %arg71)
  %tmp116 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp116, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, align 8
  %tmp117 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 0, i32 1
  %tmp118 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp117, align 8, !tbaa !41
  call void @createTuple_chpl(i64 0, [1 x i64]* %tmp79)
  %tmp119 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp79, i64 0, i64 0
  %tmp120 = load i64, i64* %tmp119, align 8, !tbaa !138
  %tmp121 = icmp eq i64 %tmp92, 0
  br i1 %tmp121, label %bb122, label %bb129

bb122:                                            ; preds = %bb102
  %tmp123 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp124 = call i32 @chpl_rt_buildLocaleID(i32 %tmp123, i32 -2)
  %tmp125 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp80, i64 0, i32 0
  store i32 %tmp124, i32* %tmp125, align 8, !tbaa !110
  %tmp126 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp80, i64 %arg70, i32 %arg71)
  %tmp127 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp126, i64 0, i32 6
  %tmp128 = load i64, i64* %tmp127, align 8, !tbaa !210
  br label %bb129

bb129:                                            ; preds = %bb102, %bb122
  %.01 = phi i64 [ %tmp128, %bb122 ], [ %tmp92, %bb102 ]
  %tmp130 = call i8 @chpl_task_getSerial()
  %tmp131 = icmp eq i8 %tmp130, 0
  br i1 %tmp131, label %bb132, label %bb138

bb132:                                            ; preds = %bb129
  %tmp133 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2
  call void @_computeChunkStuff_chpl(i64 %.01, i8 %tmp91, i64 %tmp90, [1 x %range_int64_t_bounded_F]* %tmp133, [2 x i64]* %tmp81, i64 %arg70, i32 %arg71)
  %tmp134 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 0
  %tmp135 = load i64, i64* %tmp134, align 8, !tbaa !138
  %tmp136 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 1
  %tmp137 = load i64, i64* %tmp136, align 8, !tbaa !138
  br label %bb138

bb138:                                            ; preds = %bb132, %bb129
  %.04 = phi i64 [ %tmp137, %bb132 ], [ -1, %bb129 ]
  %.03 = phi i64 [ %tmp135, %bb132 ], [ 1, %bb129 ]
  %tmp139 = icmp slt i64 %.03, 2
  br i1 %tmp139, label %bb140, label %bb159

bb140:                                            ; preds = %bb138
  %.elt55 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack56 = load i64, i64* %.elt55, align 8
  %.elt57 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack58 = load i64, i64* %.elt57, align 8
  %.repack59 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  store i64 %.unpack56, i64* %.repack59, align 8
  %.repack61 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 1
  store i64 %.unpack58, i64* %.repack61, align 8
  %tmp141 = bitcast %range_int64_t_bounded_F* %tmp82 to i8*
  %tmp142 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp141)
  %tmp143 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp144 = bitcast i8* %tmp143 to %chpl_localesSignal_object***
  %tmp145 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp144, align 8, !tbaa !212
  %tmp146 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 7
  %tmp147 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp146, align 8, !tbaa !212
  %tmp148 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  %tmp149 = load i64, i64* %tmp148, align 8, !tbaa !219
  %tmp150 = icmp sgt i64 %tmp149, %.unpack58
  br i1 %tmp150, label %bb202, label %.preheader

.preheader:                                       ; preds = %bb140
  br label %bb151

bb151:                                            ; preds = %.preheader, %bb151
  %.05 = phi i64 [ %tmp157, %bb151 ], [ %tmp149, %.preheader ]
  %tmp152 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp145, i64 %.05
  %tmp153 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp147, i64 %.05
  %tmp154 = bitcast %chpl_localesSignal_object** %tmp153 to i64*
  %tmp155 = load i64, i64* %tmp154, align 8, !tbaa !148
  %tmp156 = bitcast %chpl_localesSignal_object** %tmp152 to i64*
  store i64 %tmp155, i64* %tmp156, align 8, !tbaa !148
  %tmp157 = add nsw i64 %.05, 1
  %tmp158 = icmp slt i64 %.05, %.unpack58
  br i1 %tmp158, label %bb151, label %.loopexit

bb159:                                            ; preds = %bb138
  call void @init22(%range_int64_t_bounded_F* %tmp83, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @chpl_build_low_bounded_range(i64 %tmp120, %range_int64_t_boundedLow_F* %tmp84)
  %.elt16 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 0
  %.unpack17 = load i64, i64* %.elt16, align 8
  %tmp160 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack17, 0
  %.elt18 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 1
  %.unpack19 = load i64, i64* %.elt18, align 8
  %tmp161 = insertvalue %range_int64_t_boundedLow_F %tmp160, i64 %.unpack19, 1
  %.elt20 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack21 = load i64, i64* %.elt20, align 8
  %tmp162 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack21, 0
  %.elt22 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack23 = load i64, i64* %.elt22, align 8
  %tmp163 = insertvalue %range_int64_t_bounded_F %tmp162, i64 %.unpack23, 1
  %tmp164 = call i64 @length(%range_int64_t_bounded_F %tmp163)
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp161, i64 %tmp164, %range_int64_t_bounded_F* %tmp85, i64 %arg70, i32 %arg71)
  %.elt24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 0
  %.unpack25 = load i64, i64* %.elt24, align 8
  %.elt26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 1
  %.unpack27 = load i64, i64* %.elt26, align 8
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp86)
  %.elt28 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 0
  %.unpack29 = load i64, i64* %.elt28, align 8
  %tmp165 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack29, 0
  %.elt30 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 1
  %.unpack31 = load i64, i64* %.elt30, align 8
  %tmp166 = insertvalue %range_int64_t_boundedLow_F %tmp165, i64 %.unpack31, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp166, i64 %.03, %range_int64_t_bounded_F* %tmp87, i64 %arg70, i32 %arg71)
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 0
  %.unpack33 = load i64, i64* %.elt32, align 8
  %tmp167 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack33, 0
  %.elt34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 1
  %.unpack35 = load i64, i64* %.elt34, align 8
  %tmp168 = insertvalue %range_int64_t_bounded_F %tmp167, i64 %.unpack35, 1
  %tmp169 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg70, i32 %arg71)
  %tmp170 = bitcast i8* %tmp169 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp170, i64 %arg70, i32 %arg71)
  %tmp171 = call i64 @length(%range_int64_t_bounded_F %tmp168)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp170, i64 %tmp171, i64 %arg70, i32 %arg71)
  %tmp172 = icmp sgt i64 %.unpack33, %.unpack35
  br i1 %tmp172, label %bb192, label %.preheader67

.preheader67:                                     ; preds = %bb159
  br label %bb173

bb173:                                            ; preds = %.preheader67, %bb173
  %.02 = phi i64 [ %tmp190, %bb173 ], [ %.unpack33, %.preheader67 ]
  %.repack51 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 1, i64 0, i32 0
  store i64 %.unpack25, i64* %.repack51, align 8
  %.repack53 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 1, i64 0, i32 1
  store i64 %.unpack27, i64* %.repack53, align 8
  %tmp174 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 2
  store i64 %.04, i64* %tmp174, align 8, !tbaa !273
  %tmp175 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 3
  store i64 %.03, i64* %tmp175, align 8, !tbaa !275
  %tmp176 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 4
  store i64 %.02, i64* %tmp176, align 8, !tbaa !276
  %tmp177 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 5
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp177, align 8, !tbaa !277
  %tmp178 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 6
  %tmp179 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp178 to i8**
  store i8* %tmp169, i8** %tmp179, align 8, !tbaa !278
  %tmp180 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 7
  %tmp181 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp180 to i8**
  store i8* %tmp105, i8** %tmp181, align 8, !tbaa !279
  %tmp182 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 8
  store %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp182, align 8, !tbaa !280
  %tmp183 = getelementptr inbounds i8, i8* %tmp169, i64 24
  %tmp184 = bitcast i8* %tmp183 to i8**
  %tmp185 = load i32, i32* @chpl_nodeID, align 4
  %tmp186 = sext i32 %tmp185 to i64
  %tmp187 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 9
  store i64 %arg70, i64* %tmp187, align 8, !tbaa !281
  %tmp188 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 10
  store i32 %arg71, i32* %tmp188, align 8, !tbaa !282
  %tmp189 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %tmp89, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 7, %struct.chpl_task_bundle_t* nonnull %tmp189, i64 160, i8** %tmp184, i64 %tmp186, i64 1276, i32 29)
  %tmp190 = add nsw i64 %.02, 1
  %tmp191 = icmp slt i64 %.02, %.unpack35
  br i1 %tmp191, label %bb173, label %.loopexit68

.loopexit68:                                      ; preds = %bb173
  br label %bb192

bb192:                                            ; preds = %.loopexit68, %bb159
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp170, i64 %tmp171, %chpl_Error_object** %tmp88, i64 %arg70, i32 %arg71)
  %tmp193 = load %chpl_Error_object*, %chpl_Error_object** %tmp88, align 8, !tbaa !125
  %tmp194 = icmp eq %chpl_Error_object* %tmp193, null
  br i1 %tmp194, label %bb196, label %bb195

bb195:                                            ; preds = %bb192
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp193, i64 %arg70, i32 %arg71)
  br label %bb196

bb196:                                            ; preds = %bb195, %bb192
  %tmp197 = icmp eq i8* %tmp169, null
  br i1 %tmp197, label %bb202, label %bb198

bb198:                                            ; preds = %bb196
  %tmp199 = getelementptr inbounds i8, i8* %tmp169, i64 32
  %tmp200 = bitcast i8* %tmp199 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp200)
  %tmp201 = getelementptr inbounds i8, i8* %tmp169, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp201)
  call void @chpl_here_free(i8* nonnull %tmp169, i64 %arg70, i32 %arg71)
  br label %bb202

.loopexit:                                        ; preds = %bb151
  br label %bb202

bb202:                                            ; preds = %.loopexit, %bb198, %bb196, %bb140
  %tmp203 = getelementptr inbounds i8, i8* %tmp105, i64 32
  %tmp204 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp205 = bitcast i8* %tmp203 to i64*
  %tmp206 = load i64, i64* %tmp205, align 8, !tbaa !138
  store i64 %tmp206, i64* %tmp204, align 8, !tbaa !138
  %tmp207 = getelementptr inbounds i8, i8* %tmp105, i64 40
  %tmp208 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp209 = bitcast i8* %tmp207 to i64*
  %tmp210 = load i64, i64* %tmp209, align 8, !tbaa !138
  store i64 %tmp210, i64* %tmp208, align 8, !tbaa !138
  %tmp211 = getelementptr inbounds i8, i8* %tmp105, i64 48
  %tmp212 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 4, i64 0
  %tmp213 = bitcast i8* %tmp211 to i64*
  %tmp214 = load i64, i64* %tmp213, align 8, !tbaa !138
  store i64 %tmp214, i64* %tmp212, align 8, !tbaa !138
  %tmp215 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 5
  %tmp216 = getelementptr inbounds i8, i8* %tmp105, i64 56
  %tmp217 = bitcast i8* %tmp216 to i64*
  %tmp218 = load i64, i64* %tmp217, align 8, !tbaa !243
  store i64 %tmp218, i64* %tmp215, align 8, !tbaa !243
  call void @dsiDestroyArr5(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 %arg70, i32 %arg71)
  %tmp219 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 6
  %tmp220 = getelementptr inbounds i8, i8* %tmp105, i64 64
  %tmp221 = bitcast i8* %tmp220 to i64*
  %tmp222 = load i64, i64* %tmp221, align 8, !tbaa !244
  %tmp223 = bitcast %chpl_localesSignal_object*** %tmp219 to i64*
  store i64 %tmp222, i64* %tmp223, align 8, !tbaa !244
  %tmp224 = call i64 @numIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp225 = icmp sgt i64 %tmp224, 0
  br i1 %tmp225, label %bb226, label %bb232

bb226:                                            ; preds = %bb202
  %tmp227 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 7
  %tmp228 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp229 = bitcast i8* %tmp228 to i64*
  %tmp230 = load i64, i64* %tmp229, align 8, !tbaa !212
  %tmp231 = bitcast %chpl_localesSignal_object*** %tmp227 to i64*
  store i64 %tmp230, i64* %tmp231, align 8, !tbaa !212
  br label %bb232

bb232:                                            ; preds = %bb226, %bb202
  %tmp233 = getelementptr inbounds i8, i8* %tmp105, i64 88
  %.elt43 = bitcast i8* %tmp233 to i64*
  %.unpack44 = load i64, i64* %.elt43, align 8
  %.elt45 = getelementptr inbounds i8, i8* %tmp105, i64 96
  %tmp234 = bitcast i8* %.elt45 to i64*
  %.unpack46 = load i64, i64* %tmp234, align 8
  %.repack47 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack44, i64* %.repack47, align 8
  %.repack49 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack46, i64* %.repack49, align 8
  %tmp235 = icmp eq i8* %tmp105, null
  br i1 %tmp235, label %bb238, label %bb236

bb236:                                            ; preds = %bb232
  %tmp237 = bitcast i8* %tmp105 to %chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object*
  call void @deinit15(%chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object* %tmp237, i64 %arg70, i32 %arg71)
  call void @chpl_here_free(i8* nonnull %tmp105, i64 %arg70, i32 %arg71)
  br label %bb238

bb238:                                            ; preds = %bb232, %bb236
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 %arg70, i32 %arg71)
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg70, i32 %arg71)
  ret void
}

define internal void @dsiReallocate6(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg69, i64 %arg70, i32 %arg71) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp72 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp73 = alloca [1 x i64], align 8
  %tmp74 = alloca [1 x i64], align 8
  %tmp75 = alloca [1 x i64], align 8
  %tmp76 = alloca %range_int64_t_bounded_F, align 8
  %tmp77 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp78 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp79 = alloca [1 x i64], align 8
  %tmp80 = alloca %struct.chpl_localeID_t, align 8
  %tmp81 = alloca [2 x i64], align 8
  %tmp82 = alloca %range_int64_t_bounded_F, align 8
  %tmp83 = alloca %range_int64_t_bounded_F, align 8
  %tmp84 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp85 = alloca %range_int64_t_bounded_F, align 8
  %tmp86 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp87 = alloca %range_int64_t_bounded_F, align 8
  %tmp88 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8
  %tmp89 = alloca %chpl__class_localscoforall_fn9_object, align 8
  %tmp90 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp91 = load i8, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp92 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp93 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt6 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 1
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp94 = insertvalue %range_int64_t_bounded_F %tmp93, i64 %.unpack7, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp94, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  %tmp95 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 0, i32 2
  %tmp96 = load i8, i8* %tmp95, align 8, !tbaa !42
  %tmp97 = icmp eq i8 %tmp96, 0
  br i1 %tmp97, label %bb100, label %bb98

bb98:                                             ; preds = %.split
  %tmp99 = call %_domain_DefaultRectangularDom_1_int64_t_F @chpl__initCopy2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  br label %bb102

bb100:                                            ; preds = %.split
  %tmp101 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, align 8
  br label %bb102

bb102:                                            ; preds = %bb100, %bb98
  %.0 = phi %_domain_DefaultRectangularDom_1_int64_t_F [ %tmp99, %bb98 ], [ %tmp101, %bb100 ]
  store %_domain_DefaultRectangularDom_1_int64_t_F %.0, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp103 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 1
  %tmp104 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp103, align 8, !tbaa !41
  %tmp105 = call i8* @chpl_here_alloc(i64 104, i16 102, i64 %arg70, i32 %arg71)
  %tmp106 = bitcast i8* %tmp105 to %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*
  %tmp107 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp73, i64 0, i64 0
  store i64 0, i64* %tmp107, align 8, !tbaa !138
  %tmp108 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp74, i64 0, i64 0
  store i64 0, i64* %tmp108, align 8, !tbaa !138
  %tmp109 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp75, i64 0, i64 0
  store i64 0, i64* %tmp109, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp76, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 0
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp110 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack9, 0
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %tmp111 = insertvalue %range_int64_t_bounded_F %tmp110, i64 %.unpack11, 1
  call void @init29(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %tmp106, i64 -1, i8 0, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp104, [1 x i64]* %tmp73, [1 x i64]* %tmp74, [1 x i64]* %tmp75, i64 0, i64* null, i64* null, i8 0, %range_int64_t_bounded_F %tmp111, i64 %arg70, i32 %arg71)
  call void @postinit4(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %tmp106, i64 %arg70, i32 %arg71)
  %tmp112 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp113 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp112, align 8, !tbaa !236
  %.elt12 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp114 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp115 = insertvalue %range_int64_t_bounded_F %tmp114, i64 %.unpack15, 1
  call void @this2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, %range_int64_t_bounded_F %tmp115, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, i64 %arg70, i32 %arg71)
  %tmp116 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp116, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, align 8
  %tmp117 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 0, i32 1
  %tmp118 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp117, align 8, !tbaa !41
  call void @createTuple_chpl(i64 0, [1 x i64]* %tmp79)
  %tmp119 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp79, i64 0, i64 0
  %tmp120 = load i64, i64* %tmp119, align 8, !tbaa !138
  %tmp121 = icmp eq i64 %tmp92, 0
  br i1 %tmp121, label %bb122, label %bb129

bb122:                                            ; preds = %bb102
  %tmp123 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp124 = call i32 @chpl_rt_buildLocaleID(i32 %tmp123, i32 -2)
  %tmp125 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp80, i64 0, i32 0
  store i32 %tmp124, i32* %tmp125, align 8, !tbaa !110
  %tmp126 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp80, i64 %arg70, i32 %arg71)
  %tmp127 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp126, i64 0, i32 6
  %tmp128 = load i64, i64* %tmp127, align 8, !tbaa !210
  br label %bb129

bb129:                                            ; preds = %bb102, %bb122
  %.01 = phi i64 [ %tmp128, %bb122 ], [ %tmp92, %bb102 ]
  %tmp130 = call i8 @chpl_task_getSerial()
  %tmp131 = icmp eq i8 %tmp130, 0
  br i1 %tmp131, label %bb132, label %bb138

bb132:                                            ; preds = %bb129
  %tmp133 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2
  call void @_computeChunkStuff_chpl(i64 %.01, i8 %tmp91, i64 %tmp90, [1 x %range_int64_t_bounded_F]* %tmp133, [2 x i64]* %tmp81, i64 %arg70, i32 %arg71)
  %tmp134 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 0
  %tmp135 = load i64, i64* %tmp134, align 8, !tbaa !138
  %tmp136 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 1
  %tmp137 = load i64, i64* %tmp136, align 8, !tbaa !138
  br label %bb138

bb138:                                            ; preds = %bb132, %bb129
  %.04 = phi i64 [ %tmp137, %bb132 ], [ -1, %bb129 ]
  %.03 = phi i64 [ %tmp135, %bb132 ], [ 1, %bb129 ]
  %tmp139 = icmp slt i64 %.03, 2
  br i1 %tmp139, label %bb140, label %bb157

bb140:                                            ; preds = %bb138
  %.elt55 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack56 = load i64, i64* %.elt55, align 8
  %.elt57 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack58 = load i64, i64* %.elt57, align 8
  %.repack59 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  store i64 %.unpack56, i64* %.repack59, align 8
  %.repack61 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 1
  store i64 %.unpack58, i64* %.repack61, align 8
  %tmp141 = bitcast %range_int64_t_bounded_F* %tmp82 to i8*
  %tmp142 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp141)
  %tmp143 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp144 = bitcast i8* %tmp143 to i64**
  %tmp145 = load i64*, i64** %tmp144, align 8, !tbaa !241
  %tmp146 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 7
  %tmp147 = load i64*, i64** %tmp146, align 8, !tbaa !241
  %tmp148 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  %tmp149 = load i64, i64* %tmp148, align 8, !tbaa !219
  %tmp150 = icmp sgt i64 %tmp149, %.unpack58
  br i1 %tmp150, label %bb200, label %.preheader

.preheader:                                       ; preds = %bb140
  br label %bb151

bb151:                                            ; preds = %.preheader, %bb151
  %.05 = phi i64 [ %tmp155, %bb151 ], [ %tmp149, %.preheader ]
  %tmp152 = getelementptr inbounds i64, i64* %tmp145, i64 %.05
  %tmp153 = getelementptr inbounds i64, i64* %tmp147, i64 %.05
  %tmp154 = load i64, i64* %tmp153, align 8, !tbaa !127
  store i64 %tmp154, i64* %tmp152, align 8, !tbaa !127
  %tmp155 = add nsw i64 %.05, 1
  %tmp156 = icmp slt i64 %.05, %.unpack58
  br i1 %tmp156, label %bb151, label %.loopexit

bb157:                                            ; preds = %bb138
  call void @init22(%range_int64_t_bounded_F* %tmp83, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @chpl_build_low_bounded_range(i64 %tmp120, %range_int64_t_boundedLow_F* %tmp84)
  %.elt16 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 0
  %.unpack17 = load i64, i64* %.elt16, align 8
  %tmp158 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack17, 0
  %.elt18 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 1
  %.unpack19 = load i64, i64* %.elt18, align 8
  %tmp159 = insertvalue %range_int64_t_boundedLow_F %tmp158, i64 %.unpack19, 1
  %.elt20 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack21 = load i64, i64* %.elt20, align 8
  %tmp160 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack21, 0
  %.elt22 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack23 = load i64, i64* %.elt22, align 8
  %tmp161 = insertvalue %range_int64_t_bounded_F %tmp160, i64 %.unpack23, 1
  %tmp162 = call i64 @length(%range_int64_t_bounded_F %tmp161)
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp159, i64 %tmp162, %range_int64_t_bounded_F* %tmp85, i64 %arg70, i32 %arg71)
  %.elt24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 0
  %.unpack25 = load i64, i64* %.elt24, align 8
  %.elt26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 1
  %.unpack27 = load i64, i64* %.elt26, align 8
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp86)
  %.elt28 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 0
  %.unpack29 = load i64, i64* %.elt28, align 8
  %tmp163 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack29, 0
  %.elt30 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 1
  %.unpack31 = load i64, i64* %.elt30, align 8
  %tmp164 = insertvalue %range_int64_t_boundedLow_F %tmp163, i64 %.unpack31, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp164, i64 %.03, %range_int64_t_bounded_F* %tmp87, i64 %arg70, i32 %arg71)
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 0
  %.unpack33 = load i64, i64* %.elt32, align 8
  %tmp165 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack33, 0
  %.elt34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 1
  %.unpack35 = load i64, i64* %.elt34, align 8
  %tmp166 = insertvalue %range_int64_t_bounded_F %tmp165, i64 %.unpack35, 1
  %tmp167 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg70, i32 %arg71)
  %tmp168 = bitcast i8* %tmp167 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp168, i64 %arg70, i32 %arg71)
  %tmp169 = call i64 @length(%range_int64_t_bounded_F %tmp166)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp168, i64 %tmp169, i64 %arg70, i32 %arg71)
  %tmp170 = icmp sgt i64 %.unpack33, %.unpack35
  br i1 %tmp170, label %bb190, label %.preheader67

.preheader67:                                     ; preds = %bb157
  br label %bb171

bb171:                                            ; preds = %.preheader67, %bb171
  %.02 = phi i64 [ %tmp188, %bb171 ], [ %.unpack33, %.preheader67 ]
  %.repack51 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 1, i64 0, i32 0
  store i64 %.unpack25, i64* %.repack51, align 8
  %.repack53 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 1, i64 0, i32 1
  store i64 %.unpack27, i64* %.repack53, align 8
  %tmp172 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 2
  store i64 %.04, i64* %tmp172, align 8, !tbaa !283
  %tmp173 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 3
  store i64 %.03, i64* %tmp173, align 8, !tbaa !287
  %tmp174 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 4
  store i64 %.02, i64* %tmp174, align 8, !tbaa !288
  %tmp175 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 5
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp175, align 8, !tbaa !289
  %tmp176 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 6
  %tmp177 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp176 to i8**
  store i8* %tmp167, i8** %tmp177, align 8, !tbaa !290
  %tmp178 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 7
  %tmp179 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object** %tmp178 to i8**
  store i8* %tmp105, i8** %tmp179, align 8, !tbaa !291
  %tmp180 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 8
  store %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object** %tmp180, align 8, !tbaa !292
  %tmp181 = getelementptr inbounds i8, i8* %tmp167, i64 24
  %tmp182 = bitcast i8* %tmp181 to i8**
  %tmp183 = load i32, i32* @chpl_nodeID, align 4
  %tmp184 = sext i32 %tmp183 to i64
  %tmp185 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 9
  store i64 %arg70, i64* %tmp185, align 8, !tbaa !293
  %tmp186 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 10
  store i32 %arg71, i32* %tmp186, align 8, !tbaa !294
  %tmp187 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %tmp89, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 5, %struct.chpl_task_bundle_t* nonnull %tmp187, i64 160, i8** %tmp182, i64 %tmp184, i64 1276, i32 29)
  %tmp188 = add nsw i64 %.02, 1
  %tmp189 = icmp slt i64 %.02, %.unpack35
  br i1 %tmp189, label %bb171, label %.loopexit68

.loopexit68:                                      ; preds = %bb171
  br label %bb190

bb190:                                            ; preds = %.loopexit68, %bb157
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp168, i64 %tmp169, %chpl_Error_object** %tmp88, i64 %arg70, i32 %arg71)
  %tmp191 = load %chpl_Error_object*, %chpl_Error_object** %tmp88, align 8, !tbaa !125
  %tmp192 = icmp eq %chpl_Error_object* %tmp191, null
  br i1 %tmp192, label %bb194, label %bb193

bb193:                                            ; preds = %bb190
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp191, i64 %arg70, i32 %arg71)
  br label %bb194

bb194:                                            ; preds = %bb193, %bb190
  %tmp195 = icmp eq i8* %tmp167, null
  br i1 %tmp195, label %bb200, label %bb196

bb196:                                            ; preds = %bb194
  %tmp197 = getelementptr inbounds i8, i8* %tmp167, i64 32
  %tmp198 = bitcast i8* %tmp197 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp198)
  %tmp199 = getelementptr inbounds i8, i8* %tmp167, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp199)
  call void @chpl_here_free(i8* nonnull %tmp167, i64 %arg70, i32 %arg71)
  br label %bb200

.loopexit:                                        ; preds = %bb151
  br label %bb200

bb200:                                            ; preds = %.loopexit, %bb196, %bb194, %bb140
  %tmp201 = getelementptr inbounds i8, i8* %tmp105, i64 32
  %tmp202 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp203 = bitcast i8* %tmp201 to i64*
  %tmp204 = load i64, i64* %tmp203, align 8, !tbaa !138
  store i64 %tmp204, i64* %tmp202, align 8, !tbaa !138
  %tmp205 = getelementptr inbounds i8, i8* %tmp105, i64 40
  %tmp206 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp207 = bitcast i8* %tmp205 to i64*
  %tmp208 = load i64, i64* %tmp207, align 8, !tbaa !138
  store i64 %tmp208, i64* %tmp206, align 8, !tbaa !138
  %tmp209 = getelementptr inbounds i8, i8* %tmp105, i64 48
  %tmp210 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 4, i64 0
  %tmp211 = bitcast i8* %tmp209 to i64*
  %tmp212 = load i64, i64* %tmp211, align 8, !tbaa !138
  store i64 %tmp212, i64* %tmp210, align 8, !tbaa !138
  %tmp213 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 5
  %tmp214 = getelementptr inbounds i8, i8* %tmp105, i64 56
  %tmp215 = bitcast i8* %tmp214 to i64*
  %tmp216 = load i64, i64* %tmp215, align 8, !tbaa !239
  store i64 %tmp216, i64* %tmp213, align 8, !tbaa !239
  call void @dsiDestroyArr3(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 %arg70, i32 %arg71)
  %tmp217 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 6
  %tmp218 = getelementptr inbounds i8, i8* %tmp105, i64 64
  %tmp219 = bitcast i8* %tmp218 to i64*
  %tmp220 = load i64, i64* %tmp219, align 8, !tbaa !240
  %tmp221 = bitcast i64** %tmp217 to i64*
  store i64 %tmp220, i64* %tmp221, align 8, !tbaa !240
  %tmp222 = call i64 @numIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp223 = icmp sgt i64 %tmp222, 0
  br i1 %tmp223, label %bb224, label %bb230

bb224:                                            ; preds = %bb200
  %tmp225 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 7
  %tmp226 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp227 = bitcast i8* %tmp226 to i64*
  %tmp228 = load i64, i64* %tmp227, align 8, !tbaa !241
  %tmp229 = bitcast i64** %tmp225 to i64*
  store i64 %tmp228, i64* %tmp229, align 8, !tbaa !241
  br label %bb230

bb230:                                            ; preds = %bb224, %bb200
  %tmp231 = getelementptr inbounds i8, i8* %tmp105, i64 88
  %.elt43 = bitcast i8* %tmp231 to i64*
  %.unpack44 = load i64, i64* %.elt43, align 8
  %.elt45 = getelementptr inbounds i8, i8* %tmp105, i64 96
  %tmp232 = bitcast i8* %.elt45 to i64*
  %.unpack46 = load i64, i64* %tmp232, align 8
  %.repack47 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack44, i64* %.repack47, align 8
  %.repack49 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack46, i64* %.repack49, align 8
  %tmp233 = icmp eq i8* %tmp105, null
  br i1 %tmp233, label %bb236, label %bb234

bb234:                                            ; preds = %bb230
  %tmp235 = bitcast i8* %tmp105 to %chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object*
  call void @deinit17(%chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object* %tmp235, i64 %arg70, i32 %arg71)
  call void @chpl_here_free(i8* nonnull %tmp105, i64 %arg70, i32 %arg71)
  br label %bb236

bb236:                                            ; preds = %bb230, %bb234
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 %arg70, i32 %arg71)
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg70, i32 %arg71)
  ret void
}

define internal void @dsiReallocate7(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, [1 x %range_int64_t_bounded_F]* nonnull %arg69, i64 %arg70, i32 %arg71) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp72 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp73 = alloca [1 x i64], align 8
  %tmp74 = alloca [1 x i64], align 8
  %tmp75 = alloca [1 x i64], align 8
  %tmp76 = alloca %range_int64_t_bounded_F, align 8
  %tmp77 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp78 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp79 = alloca [1 x i64], align 8
  %tmp80 = alloca %struct.chpl_localeID_t, align 8
  %tmp81 = alloca [2 x i64], align 8
  %tmp82 = alloca %range_int64_t_bounded_F, align 8
  %tmp83 = alloca %range_int64_t_bounded_F, align 8
  %tmp84 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp85 = alloca %range_int64_t_bounded_F, align 8
  %tmp86 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp87 = alloca %range_int64_t_bounded_F, align 8
  %tmp88 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8
  %tmp89 = alloca %chpl__class_localscoforall_fn10_object, align 8
  %tmp90 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp91 = load i8, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp92 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp93 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt6 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg69, i64 0, i64 0, i32 1
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp94 = insertvalue %range_int64_t_bounded_F %tmp93, i64 %.unpack7, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp94, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  %tmp95 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 0, i32 2
  %tmp96 = load i8, i8* %tmp95, align 8, !tbaa !42
  %tmp97 = icmp eq i8 %tmp96, 0
  br i1 %tmp97, label %bb100, label %bb98

bb98:                                             ; preds = %.split
  %tmp99 = call %_domain_DefaultRectangularDom_1_int64_t_F @chpl__initCopy2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, i64 %arg70, i32 %arg71)
  br label %bb102

bb100:                                            ; preds = %.split
  %tmp101 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp72, align 8
  br label %bb102

bb102:                                            ; preds = %bb100, %bb98
  %.0 = phi %_domain_DefaultRectangularDom_1_int64_t_F [ %tmp99, %bb98 ], [ %tmp101, %bb100 ]
  store %_domain_DefaultRectangularDom_1_int64_t_F %.0, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp103 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 1
  %tmp104 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp103, align 8, !tbaa !41
  %tmp105 = call i8* @chpl_here_alloc(i64 104, i16 94, i64 %arg70, i32 %arg71)
  %tmp106 = bitcast i8* %tmp105 to %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*
  %tmp107 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp73, i64 0, i64 0
  store i64 0, i64* %tmp107, align 8, !tbaa !138
  %tmp108 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp74, i64 0, i64 0
  store i64 0, i64* %tmp108, align 8, !tbaa !138
  %tmp109 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp75, i64 0, i64 0
  store i64 0, i64* %tmp109, align 8, !tbaa !138
  call void @init22(%range_int64_t_bounded_F* %tmp76, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 0
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp110 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack9, 0
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp76, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %tmp111 = insertvalue %range_int64_t_bounded_F %tmp110, i64 %.unpack11, 1
  call void @init31(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %tmp106, i64 -1, i8 0, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp104, [1 x i64]* %tmp73, [1 x i64]* %tmp74, [1 x i64]* %tmp75, i64 0, i64* null, i64* null, i8 0, %range_int64_t_bounded_F %tmp111, i64 %arg70, i32 %arg71)
  call void @postinit(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %tmp106, i64 %arg70, i32 %arg71)
  %tmp112 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 1
  %tmp113 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp112, align 8, !tbaa !246
  %.elt12 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp114 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp113, i64 0, i32 2, i64 0, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp115 = insertvalue %range_int64_t_bounded_F %tmp114, i64 %.unpack15, 1
  call void @this2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, %range_int64_t_bounded_F %tmp115, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, i64 %arg70, i32 %arg71)
  %tmp116 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp78, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp116, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, align 8
  %tmp117 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 0, i32 1
  %tmp118 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp117, align 8, !tbaa !41
  call void @createTuple_chpl(i64 0, [1 x i64]* %tmp79)
  %tmp119 = getelementptr inbounds [1 x i64], [1 x i64]* %tmp79, i64 0, i64 0
  %tmp120 = load i64, i64* %tmp119, align 8, !tbaa !138
  %tmp121 = icmp eq i64 %tmp92, 0
  br i1 %tmp121, label %bb122, label %bb129

bb122:                                            ; preds = %bb102
  %tmp123 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp124 = call i32 @chpl_rt_buildLocaleID(i32 %tmp123, i32 -2)
  %tmp125 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp80, i64 0, i32 0
  store i32 %tmp124, i32* %tmp125, align 8, !tbaa !110
  %tmp126 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp80, i64 %arg70, i32 %arg71)
  %tmp127 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp126, i64 0, i32 6
  %tmp128 = load i64, i64* %tmp127, align 8, !tbaa !210
  br label %bb129

bb129:                                            ; preds = %bb102, %bb122
  %.01 = phi i64 [ %tmp128, %bb122 ], [ %tmp92, %bb102 ]
  %tmp130 = call i8 @chpl_task_getSerial()
  %tmp131 = icmp eq i8 %tmp130, 0
  br i1 %tmp131, label %bb132, label %bb138

bb132:                                            ; preds = %bb129
  %tmp133 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2
  call void @_computeChunkStuff_chpl(i64 %.01, i8 %tmp91, i64 %tmp90, [1 x %range_int64_t_bounded_F]* %tmp133, [2 x i64]* %tmp81, i64 %arg70, i32 %arg71)
  %tmp134 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 0
  %tmp135 = load i64, i64* %tmp134, align 8, !tbaa !138
  %tmp136 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp81, i64 0, i64 1
  %tmp137 = load i64, i64* %tmp136, align 8, !tbaa !138
  br label %bb138

bb138:                                            ; preds = %bb132, %bb129
  %.04 = phi i64 [ %tmp137, %bb132 ], [ -1, %bb129 ]
  %.03 = phi i64 [ %tmp135, %bb132 ], [ 1, %bb129 ]
  %tmp139 = icmp slt i64 %.03, 2
  br i1 %tmp139, label %bb140, label %bb157

bb140:                                            ; preds = %bb138
  %.elt55 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack56 = load i64, i64* %.elt55, align 8
  %.elt57 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack58 = load i64, i64* %.elt57, align 8
  %.repack59 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  store i64 %.unpack56, i64* %.repack59, align 8
  %.repack61 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 1
  store i64 %.unpack58, i64* %.repack61, align 8
  %tmp141 = bitcast %range_int64_t_bounded_F* %tmp82 to i8*
  %tmp142 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp141)
  %tmp143 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp144 = bitcast i8* %tmp143 to i64**
  %tmp145 = load i64*, i64** %tmp144, align 8, !tbaa !251
  %tmp146 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 7
  %tmp147 = load i64*, i64** %tmp146, align 8, !tbaa !251
  %tmp148 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp82, i64 0, i32 0
  %tmp149 = load i64, i64* %tmp148, align 8, !tbaa !219
  %tmp150 = icmp sgt i64 %tmp149, %.unpack58
  br i1 %tmp150, label %bb200, label %.preheader

.preheader:                                       ; preds = %bb140
  br label %bb151

bb151:                                            ; preds = %.preheader, %bb151
  %.05 = phi i64 [ %tmp155, %bb151 ], [ %tmp149, %.preheader ]
  %tmp152 = getelementptr inbounds i64, i64* %tmp145, i64 %.05
  %tmp153 = getelementptr inbounds i64, i64* %tmp147, i64 %.05
  %tmp154 = load i64, i64* %tmp153, align 8, !tbaa !138
  store i64 %tmp154, i64* %tmp152, align 8, !tbaa !138
  %tmp155 = add nsw i64 %.05, 1
  %tmp156 = icmp slt i64 %.05, %.unpack58
  br i1 %tmp156, label %bb151, label %.loopexit

bb157:                                            ; preds = %bb138
  call void @init22(%range_int64_t_bounded_F* %tmp83, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @chpl_build_low_bounded_range(i64 %tmp120, %range_int64_t_boundedLow_F* %tmp84)
  %.elt16 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 0
  %.unpack17 = load i64, i64* %.elt16, align 8
  %tmp158 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack17, 0
  %.elt18 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp84, i64 0, i32 1
  %.unpack19 = load i64, i64* %.elt18, align 8
  %tmp159 = insertvalue %range_int64_t_boundedLow_F %tmp158, i64 %.unpack19, 1
  %.elt20 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 0
  %.unpack21 = load i64, i64* %.elt20, align 8
  %tmp160 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack21, 0
  %.elt22 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, i64 0, i32 2, i64 0, i32 1
  %.unpack23 = load i64, i64* %.elt22, align 8
  %tmp161 = insertvalue %range_int64_t_bounded_F %tmp160, i64 %.unpack23, 1
  %tmp162 = call i64 @length(%range_int64_t_bounded_F %tmp161)
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp159, i64 %tmp162, %range_int64_t_bounded_F* %tmp85, i64 %arg70, i32 %arg71)
  %.elt24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 0
  %.unpack25 = load i64, i64* %.elt24, align 8
  %.elt26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 1
  %.unpack27 = load i64, i64* %.elt26, align 8
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp86)
  %.elt28 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 0
  %.unpack29 = load i64, i64* %.elt28, align 8
  %tmp163 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack29, 0
  %.elt30 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp86, i64 0, i32 1
  %.unpack31 = load i64, i64* %.elt30, align 8
  %tmp164 = insertvalue %range_int64_t_boundedLow_F %tmp163, i64 %.unpack31, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp164, i64 %.03, %range_int64_t_bounded_F* %tmp87, i64 %arg70, i32 %arg71)
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 0
  %.unpack33 = load i64, i64* %.elt32, align 8
  %tmp165 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack33, 0
  %.elt34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 1
  %.unpack35 = load i64, i64* %.elt34, align 8
  %tmp166 = insertvalue %range_int64_t_bounded_F %tmp165, i64 %.unpack35, 1
  %tmp167 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg70, i32 %arg71)
  %tmp168 = bitcast i8* %tmp167 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp168, i64 %arg70, i32 %arg71)
  %tmp169 = call i64 @length(%range_int64_t_bounded_F %tmp166)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp168, i64 %tmp169, i64 %arg70, i32 %arg71)
  %tmp170 = icmp sgt i64 %.unpack33, %.unpack35
  br i1 %tmp170, label %bb190, label %.preheader67

.preheader67:                                     ; preds = %bb157
  br label %bb171

bb171:                                            ; preds = %.preheader67, %bb171
  %.02 = phi i64 [ %tmp188, %bb171 ], [ %.unpack33, %.preheader67 ]
  %.repack51 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 1, i64 0, i32 0
  store i64 %.unpack25, i64* %.repack51, align 8
  %.repack53 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 1, i64 0, i32 1
  store i64 %.unpack27, i64* %.repack53, align 8
  %tmp172 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 2
  store i64 %.04, i64* %tmp172, align 8, !tbaa !295
  %tmp173 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 3
  store i64 %.03, i64* %tmp173, align 8, !tbaa !299
  %tmp174 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 4
  store i64 %.02, i64* %tmp174, align 8, !tbaa !300
  %tmp175 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 5
  store %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp118, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp175, align 8, !tbaa !301
  %tmp176 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 6
  %tmp177 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp176 to i8**
  store i8* %tmp167, i8** %tmp177, align 8, !tbaa !302
  %tmp178 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 7
  %tmp179 = bitcast %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object** %tmp178 to i8**
  store i8* %tmp105, i8** %tmp179, align 8, !tbaa !303
  %tmp180 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 8
  store %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object** %tmp180, align 8, !tbaa !304
  %tmp181 = getelementptr inbounds i8, i8* %tmp167, i64 24
  %tmp182 = bitcast i8* %tmp181 to i8**
  %tmp183 = load i32, i32* @chpl_nodeID, align 4
  %tmp184 = sext i32 %tmp183 to i64
  %tmp185 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 9
  store i64 %arg70, i64* %tmp185, align 8, !tbaa !305
  %tmp186 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 10
  store i32 %arg71, i32* %tmp186, align 8, !tbaa !306
  %tmp187 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %tmp89, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 9, %struct.chpl_task_bundle_t* nonnull %tmp187, i64 160, i8** %tmp182, i64 %tmp184, i64 1276, i32 29)
  %tmp188 = add nsw i64 %.02, 1
  %tmp189 = icmp slt i64 %.02, %.unpack35
  br i1 %tmp189, label %bb171, label %.loopexit68

.loopexit68:                                      ; preds = %bb171
  br label %bb190

bb190:                                            ; preds = %.loopexit68, %bb157
  store %chpl_Error_object* null, %chpl_Error_object** %tmp88, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp168, i64 %tmp169, %chpl_Error_object** %tmp88, i64 %arg70, i32 %arg71)
  %tmp191 = load %chpl_Error_object*, %chpl_Error_object** %tmp88, align 8, !tbaa !125
  %tmp192 = icmp eq %chpl_Error_object* %tmp191, null
  br i1 %tmp192, label %bb194, label %bb193

bb193:                                            ; preds = %bb190
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp191, i64 %arg70, i32 %arg71)
  br label %bb194

bb194:                                            ; preds = %bb193, %bb190
  %tmp195 = icmp eq i8* %tmp167, null
  br i1 %tmp195, label %bb200, label %bb196

bb196:                                            ; preds = %bb194
  %tmp197 = getelementptr inbounds i8, i8* %tmp167, i64 32
  %tmp198 = bitcast i8* %tmp197 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp198)
  %tmp199 = getelementptr inbounds i8, i8* %tmp167, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp199)
  call void @chpl_here_free(i8* nonnull %tmp167, i64 %arg70, i32 %arg71)
  br label %bb200

.loopexit:                                        ; preds = %bb151
  br label %bb200

bb200:                                            ; preds = %.loopexit, %bb196, %bb194, %bb140
  %tmp201 = getelementptr inbounds i8, i8* %tmp105, i64 32
  %tmp202 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 2, i64 0
  %tmp203 = bitcast i8* %tmp201 to i64*
  %tmp204 = load i64, i64* %tmp203, align 8, !tbaa !138
  store i64 %tmp204, i64* %tmp202, align 8, !tbaa !138
  %tmp205 = getelementptr inbounds i8, i8* %tmp105, i64 40
  %tmp206 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 3, i64 0
  %tmp207 = bitcast i8* %tmp205 to i64*
  %tmp208 = load i64, i64* %tmp207, align 8, !tbaa !138
  store i64 %tmp208, i64* %tmp206, align 8, !tbaa !138
  %tmp209 = getelementptr inbounds i8, i8* %tmp105, i64 48
  %tmp210 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 4, i64 0
  %tmp211 = bitcast i8* %tmp209 to i64*
  %tmp212 = load i64, i64* %tmp211, align 8, !tbaa !138
  store i64 %tmp212, i64* %tmp210, align 8, !tbaa !138
  %tmp213 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 5
  %tmp214 = getelementptr inbounds i8, i8* %tmp105, i64 56
  %tmp215 = bitcast i8* %tmp214 to i64*
  %tmp216 = load i64, i64* %tmp215, align 8, !tbaa !249
  store i64 %tmp216, i64* %tmp213, align 8, !tbaa !249
  call void @dsiDestroyArr4(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 %arg70, i32 %arg71)
  %tmp217 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 6
  %tmp218 = getelementptr inbounds i8, i8* %tmp105, i64 64
  %tmp219 = bitcast i8* %tmp218 to i64*
  %tmp220 = load i64, i64* %tmp219, align 8, !tbaa !250
  %tmp221 = bitcast i64** %tmp217 to i64*
  store i64 %tmp220, i64* %tmp221, align 8, !tbaa !250
  %tmp222 = call i64 @numIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp223 = icmp sgt i64 %tmp222, 0
  br i1 %tmp223, label %bb224, label %bb230

bb224:                                            ; preds = %bb200
  %tmp225 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 7
  %tmp226 = getelementptr inbounds i8, i8* %tmp105, i64 72
  %tmp227 = bitcast i8* %tmp226 to i64*
  %tmp228 = load i64, i64* %tmp227, align 8, !tbaa !251
  %tmp229 = bitcast i64** %tmp225 to i64*
  store i64 %tmp228, i64* %tmp229, align 8, !tbaa !251
  br label %bb230

bb230:                                            ; preds = %bb224, %bb200
  %tmp231 = getelementptr inbounds i8, i8* %tmp105, i64 88
  %.elt43 = bitcast i8* %tmp231 to i64*
  %.unpack44 = load i64, i64* %.elt43, align 8
  %.elt45 = getelementptr inbounds i8, i8* %tmp105, i64 96
  %tmp232 = bitcast i8* %.elt45 to i64*
  %.unpack46 = load i64, i64* %tmp232, align 8
  %.repack47 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 9, i32 0
  store i64 %.unpack44, i64* %.repack47, align 8
  %.repack49 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg, i64 0, i32 9, i32 1
  store i64 %.unpack46, i64* %.repack49, align 8
  %tmp233 = icmp eq i8* %tmp105, null
  br i1 %tmp233, label %bb236, label %bb234

bb234:                                            ; preds = %bb230
  %tmp235 = bitcast i8* %tmp105 to %chpl_BaseRectangularArr_1_int64_t_F_int64_t_object*
  call void @deinit16(%chpl_BaseRectangularArr_1_int64_t_F_int64_t_object* %tmp235, i64 %arg70, i32 %arg71)
  call void @chpl_here_free(i8* nonnull %tmp105, i64 %arg70, i32 %arg71)
  br label %bb236

bb236:                                            ; preds = %bb230, %bb234
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp77, i64 %arg70, i32 %arg71)
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg70, i32 %arg71)
  ret void
}

define internal void @coforall_fn6([1 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg42, i64 %arg43, i64 %arg44, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg46, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg47, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg48, i64 %arg49, i32 %arg50) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp51 = alloca [2 x i64], align 8
  %tmp52 = alloca %range_int64_t_bounded_F, align 8
  %tmp53 = alloca %range_int64_t_bounded_F, align 8
  %tmp54 = alloca %range_int64_t_bounded_F, align 8
  %tmp55 = alloca %range_int64_t_bounded_F, align 8
  %tmp56 = alloca %range_int64_t_bounded_F, align 8
  %tmp57 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp58 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp59 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp60 = insertvalue %range_int64_t_bounded_F %tmp59, i64 %.unpack9, 1
  %tmp61 = tail call i64 @length(%range_int64_t_bounded_F %tmp60)
  %tmp62 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp63 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp64 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp65 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp62, i64 0, i32 1
  %tmp66 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp63, i64 0, i32 0
  %tmp67 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp64, i64 0, i32 0
  %tmp68 = load i64, i64* %tmp65, align 8, !tbaa !220
  %tmp69 = load i64, i64* %tmp66, align 8, !tbaa !219
  %tmp70 = load i64, i64* %tmp67, align 8, !tbaa !219
  call void @_computeBlock_chpl(i64 %tmp61, i64 %arg43, i64 %arg44, i64 %tmp68, i64 %tmp69, i64 %tmp70, [2 x i64]* %tmp51, i64 %arg49, i32 %arg50)
  %tmp71 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 0
  %tmp72 = load i64, i64* %tmp71, align 8, !tbaa !138
  %tmp73 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 1
  %tmp74 = load i64, i64* %tmp73, align 8, !tbaa !138
  %tmp75 = call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %tmp, i64 %arg42)
  call void @chpl_build_bounded_range(i64 %tmp72, i64 %tmp74, %range_int64_t_bounded_F* %tmp52)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 0
  store i64 %.unpack11, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 1
  store i64 %.unpack13, i64* %.repack16, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp53, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt18 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack19 = load i64, i64* %.elt18, align 8
  %.elt20 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack21 = load i64, i64* %.elt20, align 8
  %.repack22 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack24, align 8
  %.repack26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack26, align 8
  %.repack28 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack28, align 8
  %tmp76 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  %tmp77 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, i64 0, i32 2, i64 0, i32 0
  %tmp78 = load i64, i64* %tmp77, align 8, !tbaa !219
  %tmp79 = load i64, i64* %tmp76, align 8, !tbaa !219
  %tmp80 = add nsw i64 %tmp79, %tmp78
  %tmp81 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  %tmp82 = load i64, i64* %tmp81, align 8, !tbaa !220
  %tmp83 = add nsw i64 %tmp82, %tmp78
  call void @chpl_build_bounded_range(i64 %tmp80, i64 %tmp83, %range_int64_t_bounded_F* %tmp56)
  %.elt30 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 0
  %.unpack31 = load i64, i64* %.elt30, align 8
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 1
  %.unpack33 = load i64, i64* %.elt32, align 8
  %.repack34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  store i64 %.unpack31, i64* %.repack34, align 8
  %.repack36 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 1
  store i64 %.unpack33, i64* %.repack36, align 8
  %tmp84 = bitcast %range_int64_t_bounded_F* %tmp57 to i8*
  %tmp85 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp84)
  %tmp86 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg47, i64 0, i32 7
  %tmp87 = load %chpl_locale_object**, %chpl_locale_object*** %tmp86, align 8, !tbaa !213
  %tmp88 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg48, i64 0, i32 7
  %tmp89 = load %chpl_locale_object**, %chpl_locale_object*** %tmp88, align 8, !tbaa !213
  %tmp90 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  %tmp91 = load i64, i64* %tmp90, align 8, !tbaa !219
  %tmp92 = icmp sgt i64 %tmp91, %.unpack33
  br i1 %tmp92, label %bb101, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb93

bb93:                                             ; preds = %.preheader, %bb93
  %.0 = phi i64 [ %tmp99, %bb93 ], [ %tmp91, %.preheader ]
  %tmp94 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp87, i64 %.0
  %tmp95 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp89, i64 %.0
  %tmp96 = bitcast %chpl_locale_object** %tmp95 to i64*
  %tmp97 = load i64, i64* %tmp96, align 8, !tbaa !158
  %tmp98 = bitcast %chpl_locale_object** %tmp94 to i64*
  store i64 %tmp97, i64* %tmp98, align 8, !tbaa !158
  %tmp99 = add nsw i64 %.0, 1
  %tmp100 = icmp slt i64 %.0, %.unpack33
  br i1 %tmp100, label %bb93, label %.loopexit

.loopexit:                                        ; preds = %bb93
  br label %bb101

bb101:                                            ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn7([1 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg42, i64 %arg43, i64 %arg44, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg46, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg47, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg48, i64 %arg49, i32 %arg50) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp51 = alloca [2 x i64], align 8
  %tmp52 = alloca %range_int64_t_bounded_F, align 8
  %tmp53 = alloca %range_int64_t_bounded_F, align 8
  %tmp54 = alloca %range_int64_t_bounded_F, align 8
  %tmp55 = alloca %range_int64_t_bounded_F, align 8
  %tmp56 = alloca %range_int64_t_bounded_F, align 8
  %tmp57 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp58 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp59 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp60 = insertvalue %range_int64_t_bounded_F %tmp59, i64 %.unpack9, 1
  %tmp61 = tail call i64 @length(%range_int64_t_bounded_F %tmp60)
  %tmp62 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp63 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp64 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp65 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp62, i64 0, i32 1
  %tmp66 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp63, i64 0, i32 0
  %tmp67 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp64, i64 0, i32 0
  %tmp68 = load i64, i64* %tmp65, align 8, !tbaa !220
  %tmp69 = load i64, i64* %tmp66, align 8, !tbaa !219
  %tmp70 = load i64, i64* %tmp67, align 8, !tbaa !219
  call void @_computeBlock_chpl(i64 %tmp61, i64 %arg43, i64 %arg44, i64 %tmp68, i64 %tmp69, i64 %tmp70, [2 x i64]* %tmp51, i64 %arg49, i32 %arg50)
  %tmp71 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 0
  %tmp72 = load i64, i64* %tmp71, align 8, !tbaa !138
  %tmp73 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 1
  %tmp74 = load i64, i64* %tmp73, align 8, !tbaa !138
  %tmp75 = call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %tmp, i64 %arg42)
  call void @chpl_build_bounded_range(i64 %tmp72, i64 %tmp74, %range_int64_t_bounded_F* %tmp52)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 0
  store i64 %.unpack11, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 1
  store i64 %.unpack13, i64* %.repack16, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp53, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt18 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack19 = load i64, i64* %.elt18, align 8
  %.elt20 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack21 = load i64, i64* %.elt20, align 8
  %.repack22 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack24, align 8
  %.repack26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack26, align 8
  %.repack28 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack28, align 8
  %tmp76 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  %tmp77 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, i64 0, i32 2, i64 0, i32 0
  %tmp78 = load i64, i64* %tmp77, align 8, !tbaa !219
  %tmp79 = load i64, i64* %tmp76, align 8, !tbaa !219
  %tmp80 = add nsw i64 %tmp79, %tmp78
  %tmp81 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  %tmp82 = load i64, i64* %tmp81, align 8, !tbaa !220
  %tmp83 = add nsw i64 %tmp82, %tmp78
  call void @chpl_build_bounded_range(i64 %tmp80, i64 %tmp83, %range_int64_t_bounded_F* %tmp56)
  %.elt30 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 0
  %.unpack31 = load i64, i64* %.elt30, align 8
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 1
  %.unpack33 = load i64, i64* %.elt32, align 8
  %.repack34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  store i64 %.unpack31, i64* %.repack34, align 8
  %.repack36 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 1
  store i64 %.unpack33, i64* %.repack36, align 8
  %tmp84 = bitcast %range_int64_t_bounded_F* %tmp57 to i8*
  %tmp85 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp84)
  %tmp86 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg47, i64 0, i32 7
  %tmp87 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp86, align 8, !tbaa !212
  %tmp88 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg48, i64 0, i32 7
  %tmp89 = load %chpl_localesSignal_object**, %chpl_localesSignal_object*** %tmp88, align 8, !tbaa !212
  %tmp90 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  %tmp91 = load i64, i64* %tmp90, align 8, !tbaa !219
  %tmp92 = icmp sgt i64 %tmp91, %.unpack33
  br i1 %tmp92, label %bb101, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb93

bb93:                                             ; preds = %.preheader, %bb93
  %.0 = phi i64 [ %tmp99, %bb93 ], [ %tmp91, %.preheader ]
  %tmp94 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp87, i64 %.0
  %tmp95 = getelementptr inbounds %chpl_localesSignal_object*, %chpl_localesSignal_object** %tmp89, i64 %.0
  %tmp96 = bitcast %chpl_localesSignal_object** %tmp95 to i64*
  %tmp97 = load i64, i64* %tmp96, align 8, !tbaa !148
  %tmp98 = bitcast %chpl_localesSignal_object** %tmp94 to i64*
  store i64 %tmp97, i64* %tmp98, align 8, !tbaa !148
  %tmp99 = add nsw i64 %.0, 1
  %tmp100 = icmp slt i64 %.0, %.unpack33
  br i1 %tmp100, label %bb93, label %.loopexit

.loopexit:                                        ; preds = %bb93
  br label %bb101

bb101:                                            ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn8([1 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg42, i64 %arg43, i64 %arg44, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg46, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg47, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg48, i64 %arg49, i32 %arg50) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp51 = alloca [2 x i64], align 8
  %tmp52 = alloca %range_int64_t_bounded_F, align 8
  %tmp53 = alloca %range_int64_t_bounded_F, align 8
  %tmp54 = alloca %range_int64_t_bounded_F, align 8
  %tmp55 = alloca %range_int64_t_bounded_F, align 8
  %tmp56 = alloca %range_int64_t_bounded_F, align 8
  %tmp57 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp58 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp59 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp60 = insertvalue %range_int64_t_bounded_F %tmp59, i64 %.unpack9, 1
  %tmp61 = tail call i64 @length(%range_int64_t_bounded_F %tmp60)
  %tmp62 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp63 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp64 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp65 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp62, i64 0, i32 1
  %tmp66 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp63, i64 0, i32 0
  %tmp67 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp64, i64 0, i32 0
  %tmp68 = load i64, i64* %tmp65, align 8, !tbaa !220
  %tmp69 = load i64, i64* %tmp66, align 8, !tbaa !219
  %tmp70 = load i64, i64* %tmp67, align 8, !tbaa !219
  call void @_computeBlock_chpl(i64 %tmp61, i64 %arg43, i64 %arg44, i64 %tmp68, i64 %tmp69, i64 %tmp70, [2 x i64]* %tmp51, i64 %arg49, i32 %arg50)
  %tmp71 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 0
  %tmp72 = load i64, i64* %tmp71, align 8, !tbaa !138
  %tmp73 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 1
  %tmp74 = load i64, i64* %tmp73, align 8, !tbaa !138
  %tmp75 = call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %tmp, i64 %arg42)
  call void @chpl_build_bounded_range(i64 %tmp72, i64 %tmp74, %range_int64_t_bounded_F* %tmp52)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 0
  store i64 %.unpack11, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 1
  store i64 %.unpack13, i64* %.repack16, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp53, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt18 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack19 = load i64, i64* %.elt18, align 8
  %.elt20 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack21 = load i64, i64* %.elt20, align 8
  %.repack22 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack24, align 8
  %.repack26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack26, align 8
  %.repack28 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack28, align 8
  %tmp76 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  %tmp77 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, i64 0, i32 2, i64 0, i32 0
  %tmp78 = load i64, i64* %tmp77, align 8, !tbaa !219
  %tmp79 = load i64, i64* %tmp76, align 8, !tbaa !219
  %tmp80 = add nsw i64 %tmp79, %tmp78
  %tmp81 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  %tmp82 = load i64, i64* %tmp81, align 8, !tbaa !220
  %tmp83 = add nsw i64 %tmp82, %tmp78
  call void @chpl_build_bounded_range(i64 %tmp80, i64 %tmp83, %range_int64_t_bounded_F* %tmp56)
  %.elt30 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 0
  %.unpack31 = load i64, i64* %.elt30, align 8
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 1
  %.unpack33 = load i64, i64* %.elt32, align 8
  %.repack34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  store i64 %.unpack31, i64* %.repack34, align 8
  %.repack36 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 1
  store i64 %.unpack33, i64* %.repack36, align 8
  %tmp84 = bitcast %range_int64_t_bounded_F* %tmp57 to i8*
  %tmp85 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp84)
  %tmp86 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg47, i64 0, i32 7
  %tmp87 = load i64*, i64** %tmp86, align 8, !tbaa !241
  %tmp88 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg48, i64 0, i32 7
  %tmp89 = load i64*, i64** %tmp88, align 8, !tbaa !241
  %tmp90 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  %tmp91 = load i64, i64* %tmp90, align 8, !tbaa !219
  %tmp92 = icmp sgt i64 %tmp91, %.unpack33
  br i1 %tmp92, label %bb99, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb93

bb93:                                             ; preds = %.preheader, %bb93
  %.0 = phi i64 [ %tmp97, %bb93 ], [ %tmp91, %.preheader ]
  %tmp94 = getelementptr inbounds i64, i64* %tmp87, i64 %.0
  %tmp95 = getelementptr inbounds i64, i64* %tmp89, i64 %.0
  %tmp96 = load i64, i64* %tmp95, align 8, !tbaa !127
  store i64 %tmp96, i64* %tmp94, align 8, !tbaa !127
  %tmp97 = add nsw i64 %.0, 1
  %tmp98 = icmp slt i64 %.0, %.unpack33
  br i1 %tmp98, label %bb93, label %.loopexit

.loopexit:                                        ; preds = %bb93
  br label %bb99

bb99:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn9([1 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg42, i64 %arg43, i64 %arg44, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg46, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg47, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg48, i64 %arg49, i32 %arg50) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  %tmp51 = alloca [2 x i64], align 8
  %tmp52 = alloca %range_int64_t_bounded_F, align 8
  %tmp53 = alloca %range_int64_t_bounded_F, align 8
  %tmp54 = alloca %range_int64_t_bounded_F, align 8
  %tmp55 = alloca %range_int64_t_bounded_F, align 8
  %tmp56 = alloca %range_int64_t_bounded_F, align 8
  %tmp57 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp58 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp59 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack7, 0
  %.elt8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp58, i64 0, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %tmp60 = insertvalue %range_int64_t_bounded_F %tmp59, i64 %.unpack9, 1
  %tmp61 = tail call i64 @length(%range_int64_t_bounded_F %tmp60)
  %tmp62 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp63 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp64 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg, i64 %arg42)
  %tmp65 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp62, i64 0, i32 1
  %tmp66 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp63, i64 0, i32 0
  %tmp67 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp64, i64 0, i32 0
  %tmp68 = load i64, i64* %tmp65, align 8, !tbaa !220
  %tmp69 = load i64, i64* %tmp66, align 8, !tbaa !219
  %tmp70 = load i64, i64* %tmp67, align 8, !tbaa !219
  call void @_computeBlock_chpl(i64 %tmp61, i64 %arg43, i64 %arg44, i64 %tmp68, i64 %tmp69, i64 %tmp70, [2 x i64]* %tmp51, i64 %arg49, i32 %arg50)
  %tmp71 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 0
  %tmp72 = load i64, i64* %tmp71, align 8, !tbaa !138
  %tmp73 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp51, i64 0, i64 1
  %tmp74 = load i64, i64* %tmp73, align 8, !tbaa !138
  %tmp75 = call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %tmp, i64 %arg42)
  call void @chpl_build_bounded_range(i64 %tmp72, i64 %tmp74, %range_int64_t_bounded_F* %tmp52)
  %.elt10 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp52, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %.repack14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 0
  store i64 %.unpack11, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp75, i64 0, i32 1
  store i64 %.unpack13, i64* %.repack16, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp53, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt18 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack19 = load i64, i64* %.elt18, align 8
  %.elt20 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack21 = load i64, i64* %.elt20, align 8
  %.repack22 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack22, align 8
  %.repack24 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack24, align 8
  %.repack26 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 0
  store i64 %.unpack19, i64* %.repack26, align 8
  %.repack28 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  store i64 %.unpack21, i64* %.repack28, align 8
  %tmp76 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp54, i64 0, i32 0
  %tmp77 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %arg45, i64 0, i32 2, i64 0, i32 0
  %tmp78 = load i64, i64* %tmp77, align 8, !tbaa !219
  %tmp79 = load i64, i64* %tmp76, align 8, !tbaa !219
  %tmp80 = add nsw i64 %tmp79, %tmp78
  %tmp81 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp55, i64 0, i32 1
  %tmp82 = load i64, i64* %tmp81, align 8, !tbaa !220
  %tmp83 = add nsw i64 %tmp82, %tmp78
  call void @chpl_build_bounded_range(i64 %tmp80, i64 %tmp83, %range_int64_t_bounded_F* %tmp56)
  %.elt30 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 0
  %.unpack31 = load i64, i64* %.elt30, align 8
  %.elt32 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp56, i64 0, i32 1
  %.unpack33 = load i64, i64* %.elt32, align 8
  %.repack34 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  store i64 %.unpack31, i64* %.repack34, align 8
  %.repack36 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 1
  store i64 %.unpack33, i64* %.repack36, align 8
  %tmp84 = bitcast %range_int64_t_bounded_F* %tmp57 to i8*
  %tmp85 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp84)
  %tmp86 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg47, i64 0, i32 7
  %tmp87 = load i64*, i64** %tmp86, align 8, !tbaa !251
  %tmp88 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg48, i64 0, i32 7
  %tmp89 = load i64*, i64** %tmp88, align 8, !tbaa !251
  %tmp90 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp57, i64 0, i32 0
  %tmp91 = load i64, i64* %tmp90, align 8, !tbaa !219
  %tmp92 = icmp sgt i64 %tmp91, %.unpack33
  br i1 %tmp92, label %bb99, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb93

bb93:                                             ; preds = %.preheader, %bb93
  %.0 = phi i64 [ %tmp97, %bb93 ], [ %tmp91, %.preheader ]
  %tmp94 = getelementptr inbounds i64, i64* %tmp87, i64 %.0
  %tmp95 = getelementptr inbounds i64, i64* %tmp89, i64 %.0
  %tmp96 = load i64, i64* %tmp95, align 8, !tbaa !138
  store i64 %tmp96, i64* %tmp94, align 8, !tbaa !138
  %tmp97 = add nsw i64 %.0, 1
  %tmp98 = icmp slt i64 %.0, %.unpack33
  br i1 %tmp98, label %bb93, label %.loopexit

.loopexit:                                        ; preds = %bb93
  br label %bb99

bb99:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @coforall_fn10([2 x %range_int64_t_bounded_F]* nonnull %arg, i64 %arg77, i64 %arg78, i64 %arg79, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg80, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg81, %ARRTY* %arg82, %ARRTY* %arg83, i64 %arg84, i32 %arg85) {
bb:
  %tmp = alloca [2 x %range_int64_t_bounded_F], align 8
  %tmp86 = alloca [2 x i64], align 8
  %tmp87 = alloca %range_int64_t_bounded_F, align 8
  %tmp88 = alloca %range_int64_t_bounded_F, align 8
  %tmp89 = alloca %range_int64_t_bounded_F, align 8
  %tmp90 = alloca %range_int64_t_bounded_F, align 8
  %tmp91 = alloca %range_int64_t_bounded_F, align 8
  %tmp92 = alloca %range_int64_t_bounded_F, align 8
  %tmp93 = alloca %range_int64_t_bounded_F, align 8
  %tmp94 = alloca %range_int64_t_bounded_F, align 8
  %tmp95 = alloca %range_int64_t_bounded_F, align 8
  %tmp96 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt2 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg, i64 0, i64 0, i32 1
  %.unpack3 = load i64, i64* %.elt2, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack5 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack3, i64* %.repack5, align 8
  %tmp97 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1
  %.elt7 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg, i64 0, i64 1, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %.elt9 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg, i64 0, i64 1, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %.repack11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp97, i64 0, i32 0
  store i64 %.unpack8, i64* %.repack11, align 8
  %.repack13 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  store i64 %.unpack10, i64* %.repack13, align 8
  %tmp98 = tail call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %arg, i64 %arg77)
  %.elt15 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp98, i64 0, i32 0
  %.unpack16 = load i64, i64* %.elt15, align 8
  %tmp99 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack16, 0
  %.elt17 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp98, i64 0, i32 1
  %.unpack18 = load i64, i64* %.elt17, align 8
  %tmp100 = insertvalue %range_int64_t_bounded_F %tmp99, i64 %.unpack18, 1
  %tmp101 = tail call i64 @length(%range_int64_t_bounded_F %tmp100)
  %tmp102 = tail call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %arg, i64 %arg77)
  %tmp103 = tail call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %arg, i64 %arg77)
  %tmp104 = tail call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %arg, i64 %arg77)
  %tmp105 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp102, i64 0, i32 1
  %tmp106 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp103, i64 0, i32 0
  %tmp107 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp104, i64 0, i32 0
  %tmp108 = load i64, i64* %tmp105, align 8, !tbaa !220
  %tmp109 = load i64, i64* %tmp106, align 8, !tbaa !219
  %tmp110 = load i64, i64* %tmp107, align 8, !tbaa !219
  call void @_computeBlock_chpl(i64 %tmp101, i64 %arg78, i64 %arg79, i64 %tmp108, i64 %tmp109, i64 %tmp110, [2 x i64]* %tmp86, i64 %arg84, i32 %arg85)
  %tmp111 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp86, i64 0, i64 0
  %tmp112 = load i64, i64* %tmp111, align 8, !tbaa !138
  %tmp113 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp86, i64 0, i64 1
  %tmp114 = load i64, i64* %tmp113, align 8, !tbaa !138
  %tmp115 = call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %tmp, i64 %arg77)
  call void @chpl_build_bounded_range(i64 %tmp112, i64 %tmp114, %range_int64_t_bounded_F* %tmp87)
  %.elt19 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 0
  %.unpack20 = load i64, i64* %.elt19, align 8
  %.elt21 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp87, i64 0, i32 1
  %.unpack22 = load i64, i64* %.elt21, align 8
  %.repack23 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp115, i64 0, i32 0
  store i64 %.unpack20, i64* %.repack23, align 8
  %.repack25 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp115, i64 0, i32 1
  store i64 %.unpack22, i64* %.repack25, align 8
  call void @init22(%range_int64_t_bounded_F* %tmp88, i64 1, i64 0, i64 1, i64 0, i8 0)
  call void @init22(%range_int64_t_bounded_F* %tmp89, i64 1, i64 0, i64 1, i64 0, i8 0)
  %.elt27 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  %.unpack28 = load i64, i64* %.elt27, align 8
  %.elt29 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  %.unpack30 = load i64, i64* %.elt29, align 8
  %.repack31 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp90, i64 0, i32 0
  store i64 %.unpack28, i64* %.repack31, align 8
  %.repack33 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp90, i64 0, i32 1
  store i64 %.unpack30, i64* %.repack33, align 8
  %.repack35 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp91, i64 0, i32 0
  store i64 %.unpack28, i64* %.repack35, align 8
  %.repack37 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp91, i64 0, i32 1
  store i64 %.unpack30, i64* %.repack37, align 8
  %tmp116 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp90, i64 0, i32 0
  %tmp117 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg80, i64 0, i32 2, i64 0, i32 0
  %tmp118 = load i64, i64* %tmp117, align 8, !tbaa !219
  %tmp119 = load i64, i64* %tmp116, align 8, !tbaa !219
  %tmp120 = add nsw i64 %tmp119, %tmp118
  %tmp121 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp91, i64 0, i32 1
  %tmp122 = load i64, i64* %tmp121, align 8, !tbaa !220
  %tmp123 = add nsw i64 %tmp122, %tmp118
  call void @chpl_build_bounded_range(i64 %tmp120, i64 %tmp123, %range_int64_t_bounded_F* %tmp92)
  %.elt39 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp92, i64 0, i32 0
  %.unpack40 = load i64, i64* %.elt39, align 8
  %.elt41 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp92, i64 0, i32 1
  %.unpack42 = load i64, i64* %.elt41, align 8
  %.elt43 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp97, i64 0, i32 0
  %.unpack44 = load i64, i64* %.elt43, align 8
  %.elt45 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  %.unpack46 = load i64, i64* %.elt45, align 8
  %.repack47 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp93, i64 0, i32 0
  store i64 %.unpack44, i64* %.repack47, align 8
  %.repack49 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp93, i64 0, i32 1
  store i64 %.unpack46, i64* %.repack49, align 8
  %.repack51 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp94, i64 0, i32 0
  store i64 %.unpack44, i64* %.repack51, align 8
  %.repack53 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp94, i64 0, i32 1
  store i64 %.unpack46, i64* %.repack53, align 8
  %tmp124 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp93, i64 0, i32 0
  %tmp125 = getelementptr inbounds %chpl_DefaultRectangularDom_2_int64_t_F_object, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg80, i64 0, i32 2, i64 1, i32 0
  %tmp126 = load i64, i64* %tmp125, align 8, !tbaa !219
  %tmp127 = load i64, i64* %tmp124, align 8, !tbaa !219
  %tmp128 = add nsw i64 %tmp127, %tmp126
  %tmp129 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp94, i64 0, i32 1
  %tmp130 = load i64, i64* %tmp129, align 8, !tbaa !220
  %tmp131 = add nsw i64 %tmp130, %tmp126
  call void @chpl_build_bounded_range(i64 %tmp128, i64 %tmp131, %range_int64_t_bounded_F* %tmp95)
  %.elt55 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp95, i64 0, i32 0
  %.unpack56 = load i64, i64* %.elt55, align 8
  %.elt57 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp95, i64 0, i32 1
  %.unpack58 = load i64, i64* %.elt57, align 8
  %tmp132 = icmp sgt i64 %.unpack40, %.unpack42
  br i1 %tmp132, label %bb162, label %.preheader75

.preheader75:                                     ; preds = %.split
  br label %bb133

bb133:                                            ; preds = %.preheader75, %bb159
  %.01 = phi i64 [ %tmp160, %bb159 ], [ %.unpack40, %.preheader75 ]
  %.repack67 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp96, i64 0, i32 0
  store i64 %.unpack56, i64* %.repack67, align 8
  %.repack69 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp96, i64 0, i32 1
  store i64 %.unpack58, i64* %.repack69, align 8
  %tmp134 = bitcast %range_int64_t_bounded_F* %tmp96 to i8*
  %tmp135 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp134)
  %tmp136 = getelementptr inbounds %ARRTY, %ARRTY* %arg82, i64 0, i32 7
  %tmp137 = load double*, double** %tmp136, align 8, !tbaa !231
  %tmp138 = getelementptr inbounds %ARRTY, %ARRTY* %arg83, i64 0, i32 7
  %tmp139 = load double*, double** %tmp138, align 8, !tbaa !231
  %tmp140 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp96, i64 0, i32 0
  %tmp141 = load i64, i64* %tmp140, align 8, !tbaa !219
  %tmp142 = icmp sgt i64 %tmp141, %.unpack58
  br i1 %tmp142, label %bb159, label %.preheader

.preheader:                                       ; preds = %bb133
  br label %bb143

bb143:                                            ; preds = %.preheader, %bb143
  %.0 = phi i64 [ %tmp157, %bb143 ], [ %tmp141, %.preheader ]
  %tmp144 = getelementptr inbounds %ARRTY, %ARRTY* %arg82, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp144, align 8, !tbaa !138
  %tmp145 = getelementptr inbounds %ARRTY, %ARRTY* %arg82, i64 0, i32 3, i64 0
  %tmp146 = load i64, i64* %tmp145, align 8, !tbaa !138
  %tmp147 = call i64 @polly_array_index_2(i64 0, i64 %tmp146, i64 1, i64 %.01, i64 %.0)
  %tmp148 = getelementptr inbounds double, double* %tmp137, i64 %tmp147
  %tmp149 = getelementptr inbounds %ARRTY, %ARRTY* %arg83, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp149, align 8, !tbaa !138
  %tmp150 = getelementptr inbounds %ARRTY, %ARRTY* %arg83, i64 0, i32 3, i64 0
  %tmp151 = load i64, i64* %tmp150, align 8, !tbaa !138
  %tmp152 = call i64 @polly_array_index_2(i64 0, i64 %tmp151, i64 1, i64 %.01, i64 %.0)
  %tmp153 = getelementptr inbounds double, double* %tmp139, i64 %tmp152
  %tmp154 = bitcast double* %tmp153 to i64*
  %tmp155 = load i64, i64* %tmp154, align 8, !tbaa !111
  %tmp156 = bitcast double* %tmp148 to i64*
  store i64 %tmp155, i64* %tmp156, align 8, !tbaa !111
  %tmp157 = add nsw i64 %.0, 1
  %tmp158 = icmp slt i64 %.0, %.unpack58
  br i1 %tmp158, label %bb143, label %.loopexit

.loopexit:                                        ; preds = %bb143
  br label %bb159

bb159:                                            ; preds = %.loopexit, %bb133
  %tmp160 = add nsw i64 %.01, 1
  %tmp161 = icmp slt i64 %.01, %.unpack42
  br i1 %tmp161, label %bb133, label %.loopexit76

.loopexit76:                                      ; preds = %bb159
  br label %bb162

bb162:                                            ; preds = %.loopexit76, %.split
  ret void
}

define internal void @wrapcoforall_fn6(%chpl__class_localscoforall_fn9_object* %arg) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 10
  %tmp7 = load i32, i32* %tmp6, align 4, !tbaa !294
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 9
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !293
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 2
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 3
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 4
  %tmp13 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 5
  %tmp14 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 6
  %tmp15 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 7
  %tmp16 = getelementptr inbounds %chpl__class_localscoforall_fn9_object, %chpl__class_localscoforall_fn9_object* %arg, i64 0, i32 8
  %tmp17 = load i64, i64* %tmp10, align 8, !tbaa !283
  %tmp18 = load i64, i64* %tmp11, align 8, !tbaa !287
  %tmp19 = load i64, i64* %tmp12, align 8, !tbaa !288
  %tmp20 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp13, align 8, !tbaa !289
  %tmp21 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !290
  %tmp22 = load %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object** %tmp15, align 8, !tbaa !291
  %tmp23 = load %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object** %tmp16, align 8, !tbaa !292
  call void @coforall_fn8([1 x %range_int64_t_bounded_F]* %tmp, i64 %tmp17, i64 %tmp18, i64 %tmp19, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp20, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp21, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %tmp22, %chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %tmp23, i64 %tmp9, i32 %tmp7)
  %tmp24 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !290
  call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp24, %chpl_Error_object* null, i64 %tmp9, i32 %tmp7)
  ret void
}

define internal void @wrapcoforall_fn7(%chpl__class_localscoforall_fn7_object* %arg) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 10
  %tmp7 = load i32, i32* %tmp6, align 4, !tbaa !272
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 9
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !271
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 2
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 3
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 4
  %tmp13 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 5
  %tmp14 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 6
  %tmp15 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 7
  %tmp16 = getelementptr inbounds %chpl__class_localscoforall_fn7_object, %chpl__class_localscoforall_fn7_object* %arg, i64 0, i32 8
  %tmp17 = load i64, i64* %tmp10, align 8, !tbaa !263
  %tmp18 = load i64, i64* %tmp11, align 8, !tbaa !265
  %tmp19 = load i64, i64* %tmp12, align 8, !tbaa !266
  %tmp20 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp13, align 8, !tbaa !267
  %tmp21 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !268
  %tmp22 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp15, align 8, !tbaa !269
  %tmp23 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp16, align 8, !tbaa !270
  call void @coforall_fn6([1 x %range_int64_t_bounded_F]* %tmp, i64 %tmp17, i64 %tmp18, i64 %tmp19, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp20, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp21, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp22, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp23, i64 %tmp9, i32 %tmp7)
  %tmp24 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !268
  call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp24, %chpl_Error_object* null, i64 %tmp9, i32 %tmp7)
  ret void
}

define internal void @wrapcoforall_fn8(%chpl__class_localscoforall_fn8_object* %arg) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 10
  %tmp7 = load i32, i32* %tmp6, align 4, !tbaa !282
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 9
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !281
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 2
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 3
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 4
  %tmp13 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 5
  %tmp14 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 6
  %tmp15 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 7
  %tmp16 = getelementptr inbounds %chpl__class_localscoforall_fn8_object, %chpl__class_localscoforall_fn8_object* %arg, i64 0, i32 8
  %tmp17 = load i64, i64* %tmp10, align 8, !tbaa !273
  %tmp18 = load i64, i64* %tmp11, align 8, !tbaa !275
  %tmp19 = load i64, i64* %tmp12, align 8, !tbaa !276
  %tmp20 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp13, align 8, !tbaa !277
  %tmp21 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !278
  %tmp22 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp15, align 8, !tbaa !279
  %tmp23 = load %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object** %tmp16, align 8, !tbaa !280
  call void @coforall_fn7([1 x %range_int64_t_bounded_F]* %tmp, i64 %tmp17, i64 %tmp18, i64 %tmp19, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp20, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp21, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp22, %chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %tmp23, i64 %tmp9, i32 %tmp7)
  %tmp24 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !278
  call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp24, %chpl_Error_object* null, i64 %tmp9, i32 %tmp7)
  ret void
}

define internal void @wrapcoforall_fn9(%chpl__class_localscoforall_fn6_object* %arg) {
bb:
  %tmp = alloca [2 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp14 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 10
  %tmp15 = load i32, i32* %tmp14, align 4, !tbaa !262
  %tmp16 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 9
  %tmp17 = load i64, i64* %tmp16, align 8, !tbaa !261
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %.elt6 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 1, i64 1, i32 0
  %.unpack7 = load i64, i64* %.elt6, align 8
  %.elt8 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 1, i64 1, i32 1
  %.unpack9 = load i64, i64* %.elt8, align 8
  %.repack10 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 0
  store i64 %.unpack7, i64* %.repack10, align 8
  %.repack12 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 1, i32 1
  store i64 %.unpack9, i64* %.repack12, align 8
  %tmp18 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 2
  %tmp19 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 3
  %tmp20 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 4
  %tmp21 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 5
  %tmp22 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 6
  %tmp23 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 7
  %tmp24 = getelementptr inbounds %chpl__class_localscoforall_fn6_object, %chpl__class_localscoforall_fn6_object* %arg, i64 0, i32 8
  %tmp25 = load i64, i64* %tmp18, align 8, !tbaa !253
  %tmp26 = load i64, i64* %tmp19, align 8, !tbaa !255
  %tmp27 = load i64, i64* %tmp20, align 8, !tbaa !256
  %tmp28 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp21, align 8, !tbaa !257
  %tmp29 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp22, align 8, !tbaa !258
  %tmp30 = load %ARRTY*, %ARRTY** %tmp23, align 8, !tbaa !259
  %tmp31 = load %ARRTY*, %ARRTY** %tmp24, align 8, !tbaa !260
  call void @coforall_fn10([2 x %range_int64_t_bounded_F]* %tmp, i64 %tmp25, i64 %tmp26, i64 %tmp27, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp28, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp29, %ARRTY* %tmp30, %ARRTY* %tmp31, i64 %tmp17, i32 %tmp15)
  %tmp32 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp22, align 8, !tbaa !258
  call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp32, %chpl_Error_object* null, i64 %tmp17, i32 %tmp15)
  ret void
}

define internal void @wrapcoforall_fn10(%chpl__class_localscoforall_fn10_object* %arg) {
bb:
  %tmp = alloca [1 x %range_int64_t_bounded_F], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 10
  %tmp7 = load i32, i32* %tmp6, align 4, !tbaa !306
  %tmp8 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 9
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !305
  %.elt = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 1, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt1 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 1, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %.repack = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack4 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %tmp, i64 0, i64 0, i32 1
  store i64 %.unpack2, i64* %.repack4, align 8
  %tmp10 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 2
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 3
  %tmp12 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 4
  %tmp13 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 5
  %tmp14 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 6
  %tmp15 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 7
  %tmp16 = getelementptr inbounds %chpl__class_localscoforall_fn10_object, %chpl__class_localscoforall_fn10_object* %arg, i64 0, i32 8
  %tmp17 = load i64, i64* %tmp10, align 8, !tbaa !295
  %tmp18 = load i64, i64* %tmp11, align 8, !tbaa !299
  %tmp19 = load i64, i64* %tmp12, align 8, !tbaa !300
  %tmp20 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp13, align 8, !tbaa !301
  %tmp21 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !302
  %tmp22 = load %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object** %tmp15, align 8, !tbaa !303
  %tmp23 = load %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object** %tmp16, align 8, !tbaa !304
  call void @coforall_fn9([1 x %range_int64_t_bounded_F]* %tmp, i64 %tmp17, i64 %tmp18, i64 %tmp19, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp20, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp21, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %tmp22, %chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %tmp23, i64 %tmp9, i32 %tmp7)
  %tmp24 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !302
  call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp24, %chpl_Error_object* null, i64 %tmp9, i32 %tmp7)
  ret void
}

define internal void @dsiPostReallocate3(%chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @dsiPostReallocate4(%ARRTY* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @dsiPostReallocate5(%chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @dsiPostReallocate6(%chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @dsiPostReallocate7(%chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @dsiSerialReadWrite(%ARRTY* %arg, %channel_T_dynamic_F_chpl* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl_serialReadWriteRectangular(%channel_T_dynamic_F_chpl* %arg1, %ARRTY* %arg, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @chpl_serialReadWriteRectangular(%channel_T_dynamic_F_chpl* nonnull %arg, %ARRTY* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ARRTY, %ARRTY* %arg1, i64 0, i32 1
  %tmp4 = load %chpl_DefaultRectangularDom_2_int64_t_F_object*, %chpl_DefaultRectangularDom_2_int64_t_F_object** %tmp, align 8, !tbaa !93
  tail call void @chpl_serialReadWriteRectangular2(%channel_T_dynamic_F_chpl* %arg, %ARRTY* %arg1, %chpl_DefaultRectangularDom_2_int64_t_F_object* %tmp4, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @chpl_serialReadWriteRectangular2(%channel_T_dynamic_F_chpl* nonnull %arg, %ARRTY* %arg1, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl_serialReadWriteRectangularHelper(%channel_T_dynamic_F_chpl* %arg, %ARRTY* %arg1, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg2, i64 %arg3, i32 %arg4)
  ret void
}

define internal void @chpl_serialReadWriteRectangularHelper(%channel_T_dynamic_F_chpl* nonnull %arg, %ARRTY* %arg3, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg4, i64 %arg5, i32 %arg6) {
bb:
  %tmp = alloca [2 x i64], align 8
  %tmp7 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp7, align 8
  %tmp8 = alloca [2 x i64], align 8
  %tmp9 = tail call i64 @styleElement_chpl(%channel_T_dynamic_F_chpl* %arg, i64 7)
  %tmp10 = icmp eq i64 %tmp9, 0
  %tmp11 = tail call i8 @binary_chpl(%channel_T_dynamic_F_chpl* %arg, i64 %arg5, i32 %arg6)
  %tmp12 = icmp eq i8 %tmp11, 0
  %tmp13 = or i1 %tmp12, %tmp10
  br i1 %tmp13, label %bb16, label %bb14

bb14:                                             ; preds = %.split
  %tmp15 = tail call i8 @isDataContiguous(%ARRTY* %arg3, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg4)
  %phitmp = icmp eq i8 %tmp15, 0
  br label %bb16

bb16:                                             ; preds = %bb14, %.split
  %.02 = phi i1 [ %phitmp, %bb14 ], [ true, %.split ]
  br i1 %.02, label %bb48, label %bb17

bb17:                                             ; preds = %bb16
  %tmp18 = tail call i64 @dsiNumIndices2(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg4)
  %tmp19 = getelementptr inbounds %ARRTY, %ARRTY* %arg3, i64 0, i32 7
  %tmp20 = load double*, double** %tmp19, align 8, !tbaa !231
  call void @dsiLow(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg4, [2 x i64]* %tmp)
  %tmp21 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp22 = load i64, i64* %tmp21, align 8, !tbaa !138
  %tmp23 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp24 = load i64, i64* %tmp23, align 8, !tbaa !138
  %tmp25 = getelementptr inbounds %ARRTY, %ARRTY* %arg3, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp25, align 8, !tbaa !138
  %tmp26 = getelementptr inbounds %ARRTY, %ARRTY* %arg3, i64 0, i32 3, i64 0
  %tmp27 = load i64, i64* %tmp26, align 8, !tbaa !138
  %tmp28 = call i64 @polly_array_index_2(i64 0, i64 %tmp27, i64 1, i64 %tmp22, i64 %tmp24)
  %tmp29 = shl nsw i64 %tmp18, 3
  store %chpl_Error_object* null, %chpl_Error_object** %tmp7, align 8, !tbaa !123
  %tmp30 = getelementptr inbounds double, double* %tmp20, i64 %tmp28
  %tmp31 = call i8 @writeBytes_chpl(%channel_T_dynamic_F_chpl* %arg, double* %tmp30, i64 %tmp29, %chpl_Error_object** %tmp7, i64 %arg5, i32 %arg6)
  %tmp32 = load %chpl_Error_object*, %chpl_Error_object** %tmp7, align 8, !tbaa !125
  %tmp33 = icmp eq %chpl_Error_object* %tmp32, null
  br i1 %tmp33, label %bb51, label %bb34

bb34:                                             ; preds = %bb17
  %tmp35 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %tmp32, i64 0, i32 0, i32 0
  %tmp36 = load i32, i32* %tmp35, align 4, !tbaa !170
  %tmp37 = icmp slt i32 %tmp36, 30
  %tmp38 = icmp ugt i32 %tmp36, 49
  %not. = or i1 %tmp38, %tmp37
  br i1 %not., label %bb43, label %bb39

bb39:                                             ; preds = %bb34
  %tmp40 = getelementptr inbounds %chpl_Error_object, %chpl_Error_object* %tmp32, i64 1
  %tmp41 = bitcast %chpl_Error_object* %tmp40 to %struct.qio_err_s**
  %tmp42 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp41, align 8, !tbaa !307
  call void @setError_chpl(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp42, i64 %arg5, i32 %arg6)
  call void @chpl_delete_error(%chpl_Error_object* nonnull %tmp32, i64 %arg5, i32 %arg6)
  br label %bb51

bb43:                                             ; preds = %bb34
  %tmp44 = call %struct.qio_err_s* @qio_int_to_err(i32 22)
  call void @setError_chpl(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp44, i64 %arg5, i32 %arg6)
  %tmp45 = load %chpl_Error_object*, %chpl_Error_object** %tmp7, align 8, !tbaa !125
  %tmp46 = icmp eq %chpl_Error_object* %tmp45, null
  br i1 %tmp46, label %bb51, label %bb47

bb47:                                             ; preds = %bb43
  call void @chpl_delete_error(%chpl_Error_object* nonnull %tmp45, i64 %arg5, i32 %arg6)
  br label %bb51

bb48:                                             ; preds = %bb16
  %tmp49 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp8, i64 0, i64 0
  store i64 0, i64* %tmp49, align 8, !tbaa !138
  %tmp50 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp8, i64 0, i64 1
  store i64 0, i64* %tmp50, align 8, !tbaa !138
  call void @recursiveArrayWriter([2 x i64]* %tmp8, i64 1, i8 0, %channel_T_dynamic_F_chpl* %arg, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg4, %ARRTY* %arg3, i64 %arg5, i32 %arg6)
  br label %bb51

bb51:                                             ; preds = %bb17, %bb47, %bb43, %bb39, %bb48
  ret void
}

define internal void @writeSpaces(i64 %arg, %channel_T_dynamic_F_chpl* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %ioLiteral_chpl, align 8
  %tmp4 = alloca %ioLiteral_chpl, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = load %string, %string* @_str_literal_413, align 16
  %tmp9 = icmp sgt i64 %arg, 0
  br i1 %tmp9, label %.preheader, label %bb16

.preheader:                                       ; preds = %.split
  %tmp10 = add i64 %arg, 1
  br label %bb11

bb11:                                             ; preds = %.preheader, %bb11
  %.0 = phi i64 [ %tmp15, %bb11 ], [ 1, %.preheader ]
  store %string %tmp8, %string* %tmp6, align 8
  call void @init35(%string* %tmp7, %string* %tmp6, i8 1, i64 %arg2, i32 %arg3)
  %tmp12 = load %string, %string* %tmp7, align 8
  store %string %tmp12, %string* %tmp5, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp4, %string* %tmp5, i8 1)
  %tmp13 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp4, align 8
  store %ioLiteral_chpl %tmp13, %ioLiteral_chpl* %tmp, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg1, %ioLiteral_chpl* %tmp, i64 %arg2, i32 %arg3)
  %tmp14 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp, i64 0, i32 0
  call void @deinit23(%string* %tmp14, i64 %arg2, i32 %arg3)
  %tmp15 = add nuw nsw i64 %.0, 1
  %exitcond = icmp ne i64 %tmp15, %tmp10
  br i1 %exitcond, label %bb11, label %.loopexit

.loopexit:                                        ; preds = %bb11
  br label %bb16

bb16:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @recursiveArrayWriter([2 x i64]* nonnull %arg, i64 %arg49, i8 %arg50, %channel_T_dynamic_F_chpl* nonnull %arg51, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, %ARRTY* %arg53, i64 %arg54, i32 %arg55) {
bb:
  %tmp = alloca [2 x i64], align 8
  %tmp56 = alloca %range_int64_t_bounded_F, align 8
  %tmp57 = alloca %ioLiteral_chpl, align 8
  %tmp58 = alloca %ioLiteral_chpl, align 8
  %tmp59 = alloca %string, align 8
  %tmp60 = alloca %string, align 8
  %tmp61 = alloca %string, align 8
  %tmp62 = alloca %ioLiteral_chpl, align 8
  %tmp63 = alloca %ioLiteral_chpl, align 8
  %tmp64 = alloca %string, align 8
  %tmp65 = alloca %string, align 8
  %tmp66 = alloca %string, align 8
  %tmp67 = alloca %range_int64_t_bounded_F, align 8
  %tmp68 = alloca %range_int64_t_bounded_T, align 8
  %tmp69 = alloca %range_int64_t_bounded_T, align 8
  %tmp70 = alloca %range_int64_t_bounded_T, align 8
  %tmp71 = alloca %range_int64_t_bounded_T, align 8
  %tmp72 = alloca %range_int64_t_bounded_T, align 8
  %tmp73 = alloca %range_int64_t_bounded_T, align 8
  %tmp74 = alloca %range_int64_t_bounded_T, align 8
  %tmp75 = alloca %ioLiteral_chpl, align 8
  %tmp76 = alloca %ioLiteral_chpl, align 8
  %tmp77 = alloca %string, align 8
  %tmp78 = alloca %string, align 8
  %tmp79 = alloca %string, align 8
  %tmp80 = alloca %ioLiteral_chpl, align 8
  %tmp81 = alloca %ioLiteral_chpl, align 8
  %tmp82 = alloca %string, align 8
  %tmp83 = alloca %string, align 8
  %tmp84 = alloca %string, align 8
  %tmp85 = alloca %range_int64_t_bounded_F, align 8
  %tmp86 = alloca %range_int64_t_bounded_T, align 8
  %tmp87 = alloca %range_int64_t_bounded_T, align 8
  %tmp88 = alloca %range_int64_t_bounded_T, align 8
  %tmp89 = alloca %range_int64_t_bounded_T, align 8
  %tmp90 = alloca %range_int64_t_bounded_T, align 8
  %tmp91 = alloca %range_int64_t_bounded_T, align 8
  %tmp92 = alloca %range_int64_t_bounded_T, align 8
  %tmp93 = alloca %range_int64_t_bounded_F, align 8
  %tmp94 = alloca %range_int64_t_bounded_F, align 8
  %tmp95 = alloca [2 x i64], align 8
  %tmp96 = alloca %ioLiteral_chpl, align 8
  %tmp97 = alloca %ioLiteral_chpl, align 8
  %tmp98 = alloca %string, align 8
  %tmp99 = alloca %string, align 8
  %tmp100 = alloca %string, align 8
  %tmp101 = alloca %ioLiteral_chpl, align 8
  %tmp102 = alloca %ioLiteral_chpl, align 8
  %tmp103 = alloca %string, align 8
  %tmp104 = alloca %string, align 8
  %tmp105 = alloca %string, align 8
  %tmp106 = alloca %ioLiteral_chpl, align 8
  %tmp107 = alloca %ioLiteral_chpl, align 8
  %tmp108 = alloca %string, align 8
  %tmp109 = alloca %string, align 8
  %tmp110 = alloca %string, align 8
  %tmp111 = alloca %ioLiteral_chpl, align 8
  %tmp112 = alloca %ioLiteral_chpl, align 8
  %tmp113 = alloca %string, align 8
  %tmp114 = alloca %string, align 8
  %tmp115 = alloca %string, align 8
  %tmp116 = alloca %ioLiteral_chpl, align 8
  %tmp117 = alloca %ioLiteral_chpl, align 8
  %tmp118 = alloca %string, align 8
  %tmp119 = alloca %string, align 8
  %tmp120 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp121 = load %string, %string* @_str_literal_617, align 16
  %tmp122 = load %string, %string* @_str_literal_417, align 16
  %tmp123 = load %string, %string* @_str_literal_1080, align 16
  %tmp124 = load %string, %string* @_str_literal_615, align 16
  %tmp125 = load %string, %string* @_str_literal_413, align 16
  %tmp126 = load %string, %string* @_str_literal_613, align 16
  %tmp127 = load %string, %string* @_str_literal_1077, align 16
  %tmp128 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp129 = getelementptr inbounds [2 x i64], [2 x i64]* %arg, i64 0, i64 0
  %tmp130 = load i64, i64* %tmp129, align 8, !tbaa !138
  store i64 %tmp130, i64* %tmp128, align 8, !tbaa !138
  %tmp131 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp132 = getelementptr inbounds [2 x i64], [2 x i64]* %arg, i64 0, i64 1
  %tmp133 = load i64, i64* %tmp132, align 8, !tbaa !138
  store i64 %tmp133, i64* %tmp131, align 8, !tbaa !138
  %tmp134 = tail call i8 @binary_chpl(%channel_T_dynamic_F_chpl* %arg51, i64 %arg54, i32 %arg55)
  %tmp135 = tail call i64 @styleElement_chpl(%channel_T_dynamic_F_chpl* %arg51, i64 3)
  %tmp136 = icmp eq i64 %tmp135, 0
  %tmp137 = icmp eq i8 %tmp134, 0
  %narrow = and i1 %tmp136, %tmp137
  %tmp138 = icmp eq i64 %tmp135, 2
  %tmp139 = icmp eq i8 %tmp134, 0
  %narrow41 = and i1 %tmp138, %tmp139
  %tmp140 = icmp eq i64 %tmp135, 1
  %tmp141 = icmp eq i8 %tmp134, 0
  %narrow42 = and i1 %tmp140, %tmp141
  call void @dsiDim(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, i64 %arg49, %range_int64_t_bounded_F* %tmp56)
  %narrow43 = or i1 %narrow41, %narrow42
  br i1 %narrow43, label %bb142, label %bb152

bb142:                                            ; preds = %.split
  %tmp143 = icmp eq i64 %arg49, 2
  br i1 %tmp143, label %bb148, label %bb144

bb144:                                            ; preds = %bb142
  store %string %tmp127, %string* %tmp60, align 8
  call void @init35(%string* %tmp61, %string* %tmp60, i8 1, i64 %arg54, i32 %arg55)
  %tmp145 = load %string, %string* %tmp61, align 8
  store %string %tmp145, %string* %tmp59, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp58, %string* %tmp59, i8 1)
  %tmp146 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp58, align 8
  store %ioLiteral_chpl %tmp146, %ioLiteral_chpl* %tmp57, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp57, i64 %arg54, i32 %arg55)
  call void @writeSpaces(i64 %arg49, %channel_T_dynamic_F_chpl* %arg51, i64 %arg54, i32 %arg55)
  %tmp147 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp57, i64 0, i32 0
  call void @deinit23(%string* %tmp147, i64 %arg54, i32 %arg55)
  br label %bb152

bb148:                                            ; preds = %bb142
  store %string %tmp126, %string* %tmp65, align 8
  call void @init35(%string* %tmp66, %string* %tmp65, i8 1, i64 %arg54, i32 %arg55)
  %tmp149 = load %string, %string* %tmp66, align 8
  store %string %tmp149, %string* %tmp64, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp63, %string* %tmp64, i8 1)
  %tmp150 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp63, align 8
  store %ioLiteral_chpl %tmp150, %ioLiteral_chpl* %tmp62, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp62, i64 %arg54, i32 %arg55)
  %tmp151 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp62, i64 0, i32 0
  call void @deinit23(%string* %tmp151, i64 %arg54, i32 %arg55)
  br label %bb152

bb152:                                            ; preds = %.split, %bb148, %bb144
  %tmp153 = icmp eq i64 %arg49, 2
  br i1 %tmp153, label %bb154, label %bb250

bb154:                                            ; preds = %bb152
  call void @dsiDim(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, i64 %arg49, %range_int64_t_bounded_F* %tmp67)
  %.elt35 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp67, i64 0, i32 0
  %.unpack36 = load i64, i64* %.elt35, align 8
  %tmp155 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack36, 0
  %.elt37 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp67, i64 0, i32 1
  %.unpack38 = load i64, i64* %.elt37, align 8
  %tmp156 = insertvalue %range_int64_t_bounded_F %tmp155, i64 %.unpack38, 1
  call void @chpl_by_help(%range_int64_t_bounded_F %tmp156, i64 1, %range_int64_t_bounded_T* %tmp68)
  %tmp157 = load %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp68, align 8
  %tmp158 = call i8 @isAmbiguous(%range_int64_t_bounded_T %tmp157)
  %tmp159 = icmp eq i8 %tmp158, 0
  br i1 %tmp159, label %bb162, label %bb160

bb160:                                            ; preds = %bb154
  %tmp161 = trunc i64 %arg54 to i32
  call void @chpl_error(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @227, i64 0, i64 0), i32 %tmp161, i32 %arg55)
  br label %bb162

bb162:                                            ; preds = %bb154, %bb160
  store %range_int64_t_bounded_T %tmp157, %range_int64_t_bounded_T* %tmp69, align 8
  %tmp163 = bitcast %range_int64_t_bounded_T* %tmp69 to i8*
  %tmp164 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp163)
  %tmp165 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp69, i64 0, i32 2
  %tmp166 = load i64, i64* %tmp165, align 8, !tbaa !224
  %tmp167 = icmp sgt i64 %tmp166, 0
  br i1 %tmp167, label %bb168, label %bb175

bb168:                                            ; preds = %bb162
  %tmp169 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp69, i64 0, i32 3
  %tmp170 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp69, i64 0, i32 0
  %tmp171 = load i64, i64* %tmp169, align 8, !tbaa !225
  %tmp172 = load i64, i64* %tmp170, align 8, !tbaa !221
  %tmp173 = call i64 @chpl__diffMod(i64 %tmp171, i64 %tmp172, i64 %tmp166)
  %tmp174 = add nsw i64 %tmp173, %tmp172
  br label %bb182

bb175:                                            ; preds = %bb162
  %tmp176 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp69, i64 0, i32 1
  %tmp177 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp69, i64 0, i32 3
  %tmp178 = load i64, i64* %tmp176, align 8, !tbaa !223
  %tmp179 = load i64, i64* %tmp177, align 8, !tbaa !225
  %tmp180 = call i64 @chpl__diffMod(i64 %tmp178, i64 %tmp179, i64 %tmp166)
  %tmp181 = sub nsw i64 %tmp178, %tmp180
  br label %bb182

bb182:                                            ; preds = %bb175, %bb168
  %.08 = phi i64 [ %tmp174, %bb168 ], [ %tmp181, %bb175 ]
  store %range_int64_t_bounded_T %tmp157, %range_int64_t_bounded_T* %tmp70, align 8
  %tmp183 = bitcast %range_int64_t_bounded_T* %tmp70 to i8*
  %tmp184 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp183)
  store %range_int64_t_bounded_T %tmp157, %range_int64_t_bounded_T* %tmp71, align 8
  %tmp185 = bitcast %range_int64_t_bounded_T* %tmp71 to i8*
  %tmp186 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp185)
  %tmp187 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp70, i64 0, i32 0
  %tmp188 = load i64, i64* %tmp187, align 8, !tbaa !221
  %tmp189 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp71, i64 0, i32 1
  %tmp190 = load i64, i64* %tmp189, align 8, !tbaa !223
  %tmp191 = icmp sgt i64 %tmp188, %tmp190
  br i1 %tmp191, label %bb218, label %bb192

bb192:                                            ; preds = %bb182
  store %range_int64_t_bounded_T %tmp157, %range_int64_t_bounded_T* %tmp72, align 8
  %tmp193 = bitcast %range_int64_t_bounded_T* %tmp72 to i8*
  %tmp194 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp193)
  %tmp195 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp72, i64 0, i32 2
  %tmp196 = load i64, i64* %tmp195, align 8, !tbaa !224
  %tmp197 = icmp sgt i64 %tmp196, 0
  br i1 %tmp197, label %bb198, label %bb205

bb198:                                            ; preds = %bb192
  %tmp199 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp72, i64 0, i32 1
  %tmp200 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp72, i64 0, i32 3
  %tmp201 = load i64, i64* %tmp199, align 8, !tbaa !223
  %tmp202 = load i64, i64* %tmp200, align 8, !tbaa !225
  %tmp203 = call i64 @chpl__diffMod(i64 %tmp201, i64 %tmp202, i64 %tmp196)
  %tmp204 = sub nsw i64 %tmp201, %tmp203
  br label %bb212

bb205:                                            ; preds = %bb192
  %tmp206 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp72, i64 0, i32 3
  %tmp207 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp72, i64 0, i32 0
  %tmp208 = load i64, i64* %tmp206, align 8, !tbaa !225
  %tmp209 = load i64, i64* %tmp207, align 8, !tbaa !221
  %tmp210 = call i64 @chpl__diffMod(i64 %tmp208, i64 %tmp209, i64 %tmp196)
  %tmp211 = add nsw i64 %tmp210, %tmp209
  br label %bb212

bb212:                                            ; preds = %bb205, %bb198
  %.013 = phi i64 [ %tmp204, %bb198 ], [ %tmp211, %bb205 ]
  store %range_int64_t_bounded_T %tmp157, %range_int64_t_bounded_T* %tmp73, align 8
  %tmp213 = bitcast %range_int64_t_bounded_T* %tmp73 to i8*
  %tmp214 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp213)
  %tmp215 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp73, i64 0, i32 2
  %tmp216 = load i64, i64* %tmp215, align 8, !tbaa !224
  %tmp217 = add nsw i64 %tmp216, %.013
  br label %bb218

bb218:                                            ; preds = %bb182, %bb212
  %.011 = phi i64 [ %tmp217, %bb212 ], [ %.08, %bb182 ]
  %tmp219 = getelementptr inbounds %ARRTY, %ARRTY* %arg53, i64 0, i32 7
  %tmp220 = load double*, double** %tmp219, align 8, !tbaa !231
  store %range_int64_t_bounded_T %tmp157, %range_int64_t_bounded_T* %tmp74, align 8
  %tmp221 = bitcast %range_int64_t_bounded_T* %tmp74 to i8*
  %tmp222 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp221)
  %tmp223 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp74, i64 0, i32 2
  %tmp224 = load i64, i64* %tmp223, align 8, !tbaa !224
  %tmp225 = icmp eq i64 %.08, %.011
  br i1 %tmp225, label %bb343, label %.preheader

.preheader:                                       ; preds = %bb218
  br label %bb226

bb226:                                            ; preds = %.preheader, %bb238
  %.07 = phi i64 [ %tmp248, %bb238 ], [ %.08, %.preheader ]
  %.06 = phi i8 [ %.1, %bb238 ], [ 1, %.preheader ]
  %tmp227 = icmp eq i8 %.06, 0
  br i1 %tmp227, label %bb228, label %bb238

bb228:                                            ; preds = %bb226
  br i1 %narrow, label %bb229, label %bb233

bb229:                                            ; preds = %bb228
  store %string %tmp125, %string* %tmp78, align 8
  call void @init35(%string* %tmp79, %string* %tmp78, i8 1, i64 %arg54, i32 %arg55)
  %tmp230 = load %string, %string* %tmp79, align 8
  store %string %tmp230, %string* %tmp77, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp76, %string* %tmp77, i8 1)
  %tmp231 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp76, align 8
  store %ioLiteral_chpl %tmp231, %ioLiteral_chpl* %tmp75, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp75, i64 %arg54, i32 %arg55)
  %tmp232 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp75, i64 0, i32 0
  call void @deinit23(%string* %tmp232, i64 %arg54, i32 %arg55)
  br label %bb238

bb233:                                            ; preds = %bb228
  %narrow48 = or i1 %narrow41, %narrow42
  br i1 %narrow48, label %bb234, label %bb238

bb234:                                            ; preds = %bb233
  store %string %tmp124, %string* %tmp83, align 8
  call void @init35(%string* %tmp84, %string* %tmp83, i8 1, i64 %arg54, i32 %arg55)
  %tmp235 = load %string, %string* %tmp84, align 8
  store %string %tmp235, %string* %tmp82, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp81, %string* %tmp82, i8 1)
  %tmp236 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp81, align 8
  store %ioLiteral_chpl %tmp236, %ioLiteral_chpl* %tmp80, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp80, i64 %arg54, i32 %arg55)
  %tmp237 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp80, i64 0, i32 0
  call void @deinit23(%string* %tmp237, i64 %arg54, i32 %arg55)
  br label %bb238

bb238:                                            ; preds = %bb233, %bb229, %bb234, %bb226
  %.1 = phi i8 [ 0, %bb226 ], [ %.06, %bb234 ], [ %.06, %bb233 ], [ %.06, %bb229 ]
  %tmp239 = call i64* @this6([2 x i64]* %tmp, i64 %arg49)
  store i64 %.07, i64* %tmp239, align 8, !tbaa !138
  %tmp240 = getelementptr inbounds %ARRTY, %ARRTY* %arg53, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp240, align 8, !tbaa !138
  %tmp241 = getelementptr inbounds %ARRTY, %ARRTY* %arg53, i64 0, i32 3, i64 0
  %tmp242 = load i64, i64* %tmp241, align 8, !tbaa !138
  %tmp243 = load i64, i64* %tmp128, align 8, !tbaa !138
  %tmp244 = load i64, i64* %tmp131, align 8, !tbaa !138
  %tmp245 = call i64 @polly_array_index_2(i64 0, i64 %tmp242, i64 1, i64 %tmp243, i64 %tmp244)
  %tmp246 = getelementptr inbounds double, double* %tmp220, i64 %tmp245
  %tmp247 = load double, double* %tmp246, align 8, !tbaa !111
  call void @writeIt_chpl2(%channel_T_dynamic_F_chpl* %arg51, double %tmp247, i64 %arg54, i32 %arg55)
  %tmp248 = add nsw i64 %.07, %tmp224
  %tmp249 = icmp eq i64 %tmp248, %.011
  br i1 %tmp249, label %.loopexit, label %bb226

bb250:                                            ; preds = %bb152
  call void @dsiDim(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, i64 %arg49, %range_int64_t_bounded_F* %tmp85)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp251 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt19 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp85, i64 0, i32 1
  %.unpack20 = load i64, i64* %.elt19, align 8
  %tmp252 = insertvalue %range_int64_t_bounded_F %tmp251, i64 %.unpack20, 1
  call void @chpl_by_help(%range_int64_t_bounded_F %tmp252, i64 1, %range_int64_t_bounded_T* %tmp86)
  %tmp253 = load %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp86, align 8
  %tmp254 = call i8 @isAmbiguous(%range_int64_t_bounded_T %tmp253)
  %tmp255 = icmp eq i8 %tmp254, 0
  br i1 %tmp255, label %bb258, label %bb256

bb256:                                            ; preds = %bb250
  %tmp257 = trunc i64 %arg54 to i32
  call void @chpl_error(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @227, i64 0, i64 0), i32 %tmp257, i32 %arg55)
  br label %bb258

bb258:                                            ; preds = %bb250, %bb256
  store %range_int64_t_bounded_T %tmp253, %range_int64_t_bounded_T* %tmp87, align 8
  %tmp259 = bitcast %range_int64_t_bounded_T* %tmp87 to i8*
  %tmp260 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp259)
  %tmp261 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp87, i64 0, i32 2
  %tmp262 = load i64, i64* %tmp261, align 8, !tbaa !224
  %tmp263 = icmp sgt i64 %tmp262, 0
  br i1 %tmp263, label %bb264, label %bb271

bb264:                                            ; preds = %bb258
  %tmp265 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp87, i64 0, i32 3
  %tmp266 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp87, i64 0, i32 0
  %tmp267 = load i64, i64* %tmp265, align 8, !tbaa !225
  %tmp268 = load i64, i64* %tmp266, align 8, !tbaa !221
  %tmp269 = call i64 @chpl__diffMod(i64 %tmp267, i64 %tmp268, i64 %tmp262)
  %tmp270 = add nsw i64 %tmp269, %tmp268
  br label %bb278

bb271:                                            ; preds = %bb258
  %tmp272 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp87, i64 0, i32 1
  %tmp273 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp87, i64 0, i32 3
  %tmp274 = load i64, i64* %tmp272, align 8, !tbaa !223
  %tmp275 = load i64, i64* %tmp273, align 8, !tbaa !225
  %tmp276 = call i64 @chpl__diffMod(i64 %tmp274, i64 %tmp275, i64 %tmp262)
  %tmp277 = sub nsw i64 %tmp274, %tmp276
  br label %bb278

bb278:                                            ; preds = %bb271, %bb264
  %.017 = phi i64 [ %tmp270, %bb264 ], [ %tmp277, %bb271 ]
  store %range_int64_t_bounded_T %tmp253, %range_int64_t_bounded_T* %tmp88, align 8
  %tmp279 = bitcast %range_int64_t_bounded_T* %tmp88 to i8*
  %tmp280 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp279)
  store %range_int64_t_bounded_T %tmp253, %range_int64_t_bounded_T* %tmp89, align 8
  %tmp281 = bitcast %range_int64_t_bounded_T* %tmp89 to i8*
  %tmp282 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp281)
  %tmp283 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp88, i64 0, i32 0
  %tmp284 = load i64, i64* %tmp283, align 8, !tbaa !221
  %tmp285 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp89, i64 0, i32 1
  %tmp286 = load i64, i64* %tmp285, align 8, !tbaa !223
  %tmp287 = icmp sgt i64 %tmp284, %tmp286
  br i1 %tmp287, label %bb314, label %bb288

bb288:                                            ; preds = %bb278
  store %range_int64_t_bounded_T %tmp253, %range_int64_t_bounded_T* %tmp90, align 8
  %tmp289 = bitcast %range_int64_t_bounded_T* %tmp90 to i8*
  %tmp290 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp289)
  %tmp291 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp90, i64 0, i32 2
  %tmp292 = load i64, i64* %tmp291, align 8, !tbaa !224
  %tmp293 = icmp sgt i64 %tmp292, 0
  br i1 %tmp293, label %bb294, label %bb301

bb294:                                            ; preds = %bb288
  %tmp295 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp90, i64 0, i32 1
  %tmp296 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp90, i64 0, i32 3
  %tmp297 = load i64, i64* %tmp295, align 8, !tbaa !223
  %tmp298 = load i64, i64* %tmp296, align 8, !tbaa !225
  %tmp299 = call i64 @chpl__diffMod(i64 %tmp297, i64 %tmp298, i64 %tmp292)
  %tmp300 = sub nsw i64 %tmp297, %tmp299
  br label %bb308

bb301:                                            ; preds = %bb288
  %tmp302 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp90, i64 0, i32 3
  %tmp303 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp90, i64 0, i32 0
  %tmp304 = load i64, i64* %tmp302, align 8, !tbaa !225
  %tmp305 = load i64, i64* %tmp303, align 8, !tbaa !221
  %tmp306 = call i64 @chpl__diffMod(i64 %tmp304, i64 %tmp305, i64 %tmp292)
  %tmp307 = add nsw i64 %tmp306, %tmp305
  br label %bb308

bb308:                                            ; preds = %bb301, %bb294
  %.014 = phi i64 [ %tmp300, %bb294 ], [ %tmp307, %bb301 ]
  store %range_int64_t_bounded_T %tmp253, %range_int64_t_bounded_T* %tmp91, align 8
  %tmp309 = bitcast %range_int64_t_bounded_T* %tmp91 to i8*
  %tmp310 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp309)
  %tmp311 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp91, i64 0, i32 2
  %tmp312 = load i64, i64* %tmp311, align 8, !tbaa !224
  %tmp313 = add nsw i64 %tmp312, %.014
  br label %bb314

bb314:                                            ; preds = %bb278, %bb308
  %.015 = phi i64 [ %tmp313, %bb308 ], [ %.017, %bb278 ]
  store %range_int64_t_bounded_T %tmp253, %range_int64_t_bounded_T* %tmp92, align 8
  %tmp315 = bitcast %range_int64_t_bounded_T* %tmp92 to i8*
  %tmp316 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp315)
  %tmp317 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp92, i64 0, i32 2
  %tmp318 = load i64, i64* %tmp317, align 8, !tbaa !224
  %tmp319 = icmp eq i64 %.017, %.015
  br i1 %tmp319, label %bb343, label %.preheader39

.preheader39:                                     ; preds = %bb314
  br label %bb320

bb320:                                            ; preds = %.preheader39, %bb340
  %.018 = phi i64 [ %tmp341, %bb340 ], [ %.017, %.preheader39 ]
  call void @dsiDim(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, i64 %arg49, %range_int64_t_bounded_F* %tmp93)
  %.elt23 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp93, i64 0, i32 1
  %.unpack24 = load i64, i64* %.elt23, align 8
  %tmp321 = call i64* @this6([2 x i64]* %tmp, i64 %arg49)
  store i64 %.018, i64* %tmp321, align 8, !tbaa !138
  %tmp322 = icmp eq i8 %arg50, 0
  %tmp323 = icmp ne i64 %arg49, 1
  %tmp324 = and i1 %tmp322, %tmp323
  br i1 %tmp324, label %bb328, label %bb325

bb325:                                            ; preds = %bb320
  call void @dsiDim(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, i64 %arg49, %range_int64_t_bounded_F* %tmp94)
  %.elt30 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp94, i64 0, i32 1
  %.unpack31 = load i64, i64* %.elt30, align 8
  %tmp326 = icmp eq i64 %.018, %.unpack31
  %tmp327 = zext i1 %tmp326 to i8
  br label %bb328

bb328:                                            ; preds = %bb320, %bb325
  %.010 = phi i8 [ %tmp327, %bb325 ], [ 0, %bb320 ]
  %tmp329 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp95, i64 0, i64 0
  %tmp330 = load i64, i64* %tmp128, align 8, !tbaa !138
  store i64 %tmp330, i64* %tmp329, align 8, !tbaa !138
  %tmp331 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp95, i64 0, i64 1
  %tmp332 = load i64, i64* %tmp131, align 8, !tbaa !138
  store i64 %tmp332, i64* %tmp331, align 8, !tbaa !138
  %tmp333 = add nsw i64 %arg49, 1
  call void @recursiveArrayWriter([2 x i64]* %tmp95, i64 %tmp333, i8 %.010, %channel_T_dynamic_F_chpl* %arg51, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg52, %ARRTY* %arg53, i64 %arg54, i32 %arg55)
  %narrow45 = or i1 %narrow41, %narrow42
  %tmp334 = xor i1 %narrow45, true
  %tmp335 = icmp eq i64 %.018, %.unpack24
  %or.cond = or i1 %tmp335, %tmp334
  br i1 %or.cond, label %bb340, label %bb336

bb336:                                            ; preds = %bb328
  store %string %tmp123, %string* %tmp99, align 8
  call void @init35(%string* %tmp100, %string* %tmp99, i8 1, i64 %arg54, i32 %arg55)
  %tmp337 = load %string, %string* %tmp100, align 8
  store %string %tmp337, %string* %tmp98, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp97, %string* %tmp98, i8 1)
  %tmp338 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp97, align 8
  store %ioLiteral_chpl %tmp338, %ioLiteral_chpl* %tmp96, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp96, i64 %arg54, i32 %arg55)
  call void @writeSpaces(i64 %arg49, %channel_T_dynamic_F_chpl* %arg51, i64 %arg54, i32 %arg55)
  %tmp339 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp96, i64 0, i32 0
  call void @deinit23(%string* %tmp339, i64 %arg54, i32 %arg55)
  br label %bb340

bb340:                                            ; preds = %bb336, %bb328
  %tmp341 = add nsw i64 %.018, %tmp318
  %tmp342 = icmp eq i64 %tmp341, %.015
  br i1 %tmp342, label %.loopexit40, label %bb320

.loopexit:                                        ; preds = %bb238
  br label %bb343

.loopexit40:                                      ; preds = %bb340
  br label %bb343

bb343:                                            ; preds = %.loopexit40, %.loopexit, %bb218, %bb314
  %.demorgan = and i1 %tmp136, %tmp137
  br i1 %.demorgan, label %bb344, label %bb352

bb344:                                            ; preds = %bb343
  %tmp345 = icmp ne i8 %arg50, 0
  %tmp346 = icmp eq i64 %arg49, 1
  %tmp347 = or i1 %tmp346, %tmp345
  br i1 %tmp347, label %bb367, label %bb348

bb348:                                            ; preds = %bb344
  store %string %tmp122, %string* %tmp104, align 8
  call void @init35(%string* %tmp105, %string* %tmp104, i8 1, i64 %arg54, i32 %arg55)
  %tmp349 = load %string, %string* %tmp105, align 8
  store %string %tmp349, %string* %tmp103, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp102, %string* %tmp103, i8 1)
  %tmp350 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp102, align 8
  store %ioLiteral_chpl %tmp350, %ioLiteral_chpl* %tmp101, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp101, i64 %arg54, i32 %arg55)
  %tmp351 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp101, i64 0, i32 0
  call void @deinit23(%string* %tmp351, i64 %arg54, i32 %arg55)
  br label %bb367

bb352:                                            ; preds = %bb343
  %narrow47 = or i1 %narrow41, %narrow42
  br i1 %narrow47, label %bb353, label %bb367

bb353:                                            ; preds = %bb352
  %tmp354 = icmp eq i64 %arg49, 2
  br i1 %tmp354, label %bb363, label %bb355

bb355:                                            ; preds = %bb353
  store %string %tmp122, %string* %tmp109, align 8
  call void @init35(%string* %tmp110, %string* %tmp109, i8 1, i64 %arg54, i32 %arg55)
  %tmp356 = load %string, %string* %tmp110, align 8
  store %string %tmp356, %string* %tmp108, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp107, %string* %tmp108, i8 1)
  %tmp357 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp107, align 8
  store %ioLiteral_chpl %tmp357, %ioLiteral_chpl* %tmp106, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp106, i64 %arg54, i32 %arg55)
  %tmp358 = add nsw i64 %arg49, -1
  call void @writeSpaces(i64 %tmp358, %channel_T_dynamic_F_chpl* %arg51, i64 %arg54, i32 %arg55)
  store %string %tmp121, %string* %tmp114, align 8
  call void @init35(%string* %tmp115, %string* %tmp114, i8 1, i64 %arg54, i32 %arg55)
  %tmp359 = load %string, %string* %tmp115, align 8
  store %string %tmp359, %string* %tmp113, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp112, %string* %tmp113, i8 1)
  %tmp360 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp112, align 8
  store %ioLiteral_chpl %tmp360, %ioLiteral_chpl* %tmp111, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp111, i64 %arg54, i32 %arg55)
  %tmp361 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp111, i64 0, i32 0
  call void @deinit23(%string* %tmp361, i64 %arg54, i32 %arg55)
  %tmp362 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp106, i64 0, i32 0
  call void @deinit23(%string* %tmp362, i64 %arg54, i32 %arg55)
  br label %bb367

bb363:                                            ; preds = %bb353
  store %string %tmp121, %string* %tmp119, align 8
  call void @init35(%string* %tmp120, %string* %tmp119, i8 1, i64 %arg54, i32 %arg55)
  %tmp364 = load %string, %string* %tmp120, align 8
  store %string %tmp364, %string* %tmp118, align 8
  call void @init_chpl8(%ioLiteral_chpl* %tmp117, %string* %tmp118, i8 1)
  %tmp365 = load %ioLiteral_chpl, %ioLiteral_chpl* %tmp117, align 8
  store %ioLiteral_chpl %tmp365, %ioLiteral_chpl* %tmp116, align 8
  call void @writeIt_chpl(%channel_T_dynamic_F_chpl* %arg51, %ioLiteral_chpl* %tmp116, i64 %arg54, i32 %arg55)
  %tmp366 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %tmp116, i64 0, i32 0
  call void @deinit23(%string* %tmp366, i64 %arg54, i32 %arg55)
  br label %bb367

bb367:                                            ; preds = %bb352, %bb363, %bb355, %bb348, %bb344
  ret void
}

define internal void @dsiSerialWrite(%ARRTY* %arg, %channel_T_dynamic_F_chpl* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @dsiSerialReadWrite(%ARRTY* %arg, %channel_T_dynamic_F_chpl* %arg1, i64 %arg2, i32 %arg3)
  ret void
}

define internal i8 @isDataContiguous(%ARRTY* %arg, %chpl_DefaultRectangularDom_2_int64_t_F_object* %arg3) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 1
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !138
  %tmp6 = icmp eq i64 %tmp5, 1
  br i1 %tmp6, label %bb7, label %bb16

bb7:                                              ; preds = %.split
  call void @dsiDim4(%chpl_DefaultRectangularDom_2_int64_t_F_object* %arg3, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp8 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp9 = insertvalue %range_int64_t_bounded_F %tmp8, i64 %.unpack2, 1
  %tmp10 = call i64 @length(%range_int64_t_bounded_F %tmp9)
  %tmp11 = getelementptr inbounds %ARRTY, %ARRTY* %arg, i64 0, i32 3, i64 0
  %tmp12 = load i64, i64* %tmp11, align 8, !tbaa !138
  %tmp13 = load i64, i64* %tmp4, align 8, !tbaa !138
  %tmp14 = mul nsw i64 %tmp13, %tmp10
  %tmp15 = icmp eq i64 %tmp12, %tmp14
  %spec.select = zext i1 %tmp15 to i8
  ret i8 %spec.select

bb16:                                             ; preds = %.split
  ret i8 0
}

define internal void @chpl__init_ExternalArray(i64 %arg, i32 %arg12) {
bb:
  %tmp = alloca %list_BaseDom_chpl, align 8
  %tmp13 = alloca %list_BaseDom_chpl, align 8
  %tmp14 = alloca %atomicbool, align 8
  %tmp15 = alloca %atomicbool, align 8
  %tmp16 = alloca i8, align 1
  br label %.split

.split:                                           ; preds = %bb
  %tmp17 = load i8, i8* @chpl__init_ExternalArray_p, align 1, !tbaa !2
  %tmp18 = icmp eq i8 %tmp17, 0
  br i1 %tmp18, label %bb19, label %bb33

bb19:                                             ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @244, i64 0, i64 0), i64 13, i64 %arg, i32 %arg12)
  %tmp20 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp21 = add i32 %tmp20, 1
  store i32 %tmp21, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_ExternalArray_p, align 1, !tbaa !8
  tail call void @chpl_addModule(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @244, i64 0, i64 0), i8* bitcast (void (i64, i32)* @deinit21 to i8*), i64 %arg, i32 %arg12)
  call void @init_chpl11(%list_BaseDom_chpl* %tmp13, %chpl_listNode_BaseDom_chpl_object* null, %chpl_listNode_BaseDom_chpl_object* null)
  %tmp22 = bitcast %list_BaseDom_chpl* %tmp13 to i64*
  %.unpack11 = load i64, i64* %tmp22, align 8
  %.elt1 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp13, i64 0, i32 1
  %tmp23 = bitcast %chpl_listNode_BaseDom_chpl_object** %.elt1 to i64*
  %.unpack210 = load i64, i64* %tmp23, align 8
  %.elt3 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp13, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp24 = bitcast %list_BaseDom_chpl* %tmp to i64*
  store i64 %.unpack11, i64* %tmp24, align 8
  %.repack6 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp, i64 0, i32 1
  %tmp25 = bitcast %chpl_listNode_BaseDom_chpl_object** %.repack6 to i64*
  store i64 %.unpack210, i64* %tmp25, align 8
  %.repack8 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %tmp, i64 0, i32 2
  store i64 %.unpack4, i64* %.repack8, align 8
  call void @atomic_init_bool(i8* nonnull %tmp16, i1 false)
  %tmp26 = load i8, i8* %tmp16, align 1, !tbaa !169
  call void @init(%atomicbool* %tmp15, i8 %tmp26)
  %tmp27 = getelementptr inbounds %atomicbool, %atomicbool* %tmp15, i64 0, i32 0
  %tmp28 = load i8, i8* %tmp27, align 8
  %tmp29 = getelementptr inbounds %atomicbool, %atomicbool* %tmp14, i64 0, i32 0
  store i8 %tmp28, i8* %tmp29, align 8
  %tmp30 = call %chpl_ExternDist_object* @_new9(%list_BaseDom_chpl* %tmp, %atomicbool* %tmp14, i8 0, i64 -1, i64 %arg, i32 %arg12)
  store %chpl_ExternDist_object* %tmp30, %chpl_ExternDist_object** @defaultExternDist, align 8, !tbaa !310
  %tmp31 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp32 = add i32 %tmp31, -1
  store i32 %tmp32, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb33

bb33:                                             ; preds = %.split, %bb19
  ret void
}

define internal %chpl_ExternDist_object* @_new9(%list_BaseDom_chpl* nonnull %arg, %atomicbool* nonnull %arg12, i8 %arg13, i64 %arg14, i64 %arg15, i32 %arg16) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomicbool, %atomicbool* %arg12, i64 0, i32 0
  %tmp17 = load i8, i8* %tmp, align 1
  %tmp18 = bitcast %list_BaseDom_chpl* %arg to i64*
  %.unpack11 = load i64, i64* %tmp18, align 8
  %.elt1 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 1
  %tmp19 = bitcast %chpl_listNode_BaseDom_chpl_object** %.elt1 to i64*
  %.unpack210 = load i64, i64* %tmp19, align 8
  %.elt3 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 2
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp20 = tail call i8* @chpl_here_alloc(i64 48, i16 42, i64 %arg15, i32 %arg16)
  %tmp21 = bitcast i8* %tmp20 to %chpl_ExternDist_object*
  %tmp22 = bitcast i8* %tmp20 to i32*
  store i32 7, i32* %tmp22, align 4, !tbaa !170
  %tmp23 = bitcast i8* %tmp20 to %chpl_object_object*
  %tmp24 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp23)
  %tmp25 = bitcast i8* %tmp20 to i32*
  store i32 1, i32* %tmp25, align 4, !tbaa !170
  %tmp26 = getelementptr inbounds i8, i8* %tmp20, i64 8
  %tmp27 = bitcast i8* %tmp26 to i64*
  store i64 %.unpack11, i64* %tmp27, align 8
  %.repack6 = getelementptr inbounds i8, i8* %tmp20, i64 16
  %tmp28 = bitcast i8* %.repack6 to i64*
  store i64 %.unpack210, i64* %tmp28, align 8
  %.repack8 = getelementptr inbounds i8, i8* %tmp20, i64 24
  %tmp29 = bitcast i8* %.repack8 to i64*
  store i64 %.unpack4, i64* %tmp29, align 8
  %tmp30 = getelementptr inbounds i8, i8* %tmp20, i64 32
  store i8 %tmp17, i8* %tmp30, align 1
  %tmp31 = getelementptr inbounds i8, i8* %tmp20, i64 33
  store i8 %arg13, i8* %tmp31, align 1, !tbaa !185
  %tmp32 = getelementptr inbounds i8, i8* %tmp20, i64 40
  %tmp33 = bitcast i8* %tmp32 to i64*
  store i64 %arg14, i64* %tmp33, align 8, !tbaa !228
  store i32 7, i32* %tmp22, align 4, !tbaa !170
  ret %chpl_ExternDist_object* %tmp21
}

define internal void @chpl__auto_destroy_ExternDist(%chpl_ExternDist_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ExternDist_object, %chpl_ExternDist_object* %arg, i64 0, i32 0
  tail call void @deinit7(%chpl_BaseDist_object* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal i8 @dsiTrackDomains3(%chpl_ExternDist_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i8 0
}

define internal void @deinit21(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %chpl_ExternDist_object*, %chpl_ExternDist_object** @defaultExternDist, align 8, !tbaa !310
  %tmp2 = icmp eq %chpl_ExternDist_object* %tmp, null
  br i1 %tmp2, label %bb6, label %bb3

bb3:                                              ; preds = %.split
  %tmp4 = getelementptr inbounds %chpl_ExternDist_object, %chpl_ExternDist_object* %tmp, i64 0, i32 0
  tail call void @deinit7(%chpl_BaseDist_object* nonnull %tmp4, i64 %arg, i32 %arg1)
  %tmp5 = load i8*, i8** bitcast (%chpl_ExternDist_object** @defaultExternDist to i8**), align 8, !tbaa !310
  tail call void @chpl_here_free(i8* %tmp5, i64 %arg, i32 %arg1)
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_LocaleModel(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp2 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace2, align 16
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp3, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp4 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @chpl_emptyLocales2, align 16
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp4, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp2, align 8
  call void @chpl__autoDestroy5(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp2, i64 %arg, i32 %arg1)
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg, i32 %arg1)
  ret void
}

define internal void @chpl__init_LocaleModel(i64 %arg, i32 %arg3) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp4 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp5 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp6 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp7 = alloca %_distribution_DefaultDist, align 8
  %tmp8 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp9 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp10 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp11 = load i8, i8* @chpl__init_LocaleModel_p, align 1, !tbaa !2
  %tmp12 = icmp eq i8 %tmp11, 0
  br i1 %tmp12, label %bb13, label %bb31

bb13:                                             ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i64 11, i64 %arg, i32 %arg3)
  %tmp14 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp15 = add i32 %tmp14, 1
  store i32 %tmp15, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocaleModel_p, align 1, !tbaa !8
  tail call void @chpl__init_LocaleModelHelpFlat(i64 %arg, i32 %arg3)
  tail call void @chpl__init_LocaleModelHelpMem(i64 %arg, i32 %arg3)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i64 0, i64 0), i8* bitcast (void (i64, i32)* @chpl__deinit_LocaleModel to i8*), i64 %arg, i32 %arg3)
  call void @chpl_build_bounded_range(i64 1, i64 0, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp16 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp17 = insertvalue %range_int64_t_bounded_F %tmp16, i64 %.unpack2, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp17, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp5, i64 %arg, i32 %arg3)
  %tmp18 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp5, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp18, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, align 8
  %tmp19 = call %chpl___RuntimeTypeInfo2 @chpl__buildDomainRuntimeType2(%_distribution_DefaultDist* @defaultDist)
  %tmp20 = extractvalue %chpl___RuntimeTypeInfo2 %tmp19, 0
  store %_distribution_DefaultDist %tmp20, %_distribution_DefaultDist* %tmp7, align 8
  call void @chpl__convertRuntimeTypeToValue(%_distribution_DefaultDist* %tmp7, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, i64 %arg, i32 %arg3)
  %tmp21 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp21, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  call void @chpl___ASSIGN_(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, i64 %arg, i32 %arg3)
  %tmp22 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp22, %_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace2, align 16
  %tmp23 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace2 to i8*))
  %tmp24 = call %_domain_DefaultRectangularDom_1_int64_t_F* @chpl__ensureDomainExpr(%_domain_DefaultRectangularDom_1_int64_t_F* @chpl_emptyLocaleSpace2)
  %tmp25 = call %chpl___RuntimeTypeInfo5 @chpl__buildArrayRuntimeType3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp24)
  %tmp26 = extractvalue %chpl___RuntimeTypeInfo5 %tmp25, 0
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp26, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp9, align 8
  call void @chpl__convertRuntimeTypeToValue5(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp9, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp10, i64 %arg, i32 %arg3)
  %tmp27 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp10, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp27, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @chpl_emptyLocales2, align 16
  %tmp28 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @chpl_emptyLocales2 to i8*))
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, i64 %arg, i32 %arg3)
  %tmp29 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp30 = add i32 %tmp29, -1
  store i32 %tmp30, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb31

bb31:                                             ; preds = %.split, %bb13
  ret void
}

define i32 @chpl_localeModel_sublocToExecutionSubloc(i32 %arg) #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i32 %arg
}

define i32 @chpl_localeModel_sublocMerge(i32 %arg, i32 %arg1) #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i32 %arg1
}

define internal %chpl_LocaleModel_object* @_new10(%chpl_locale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %string, align 8
  %tmp3 = alloca %atomic_int64, align 8
  %tmp4 = alloca i64, align 8
  %tmp5 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = load %string, %string* @_str_literal_919, align 16
  store %string %tmp6, %string* %tmp, align 8
  %tmp7 = bitcast %string* %tmp to i8*
  %tmp8 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp7)
  %tmp9 = tail call i8* @chpl_here_alloc(i64 112, i16 2, i64 %arg1, i32 %arg2)
  %tmp10 = bitcast i8* %tmp9 to %chpl_LocaleModel_object*
  %tmp11 = bitcast i8* %tmp9 to i32*
  store i32 53, i32* %tmp11, align 4, !tbaa !170
  %tmp12 = load i8, i8* @doneCreatingLocales, align 1, !tbaa !2
  %tmp13 = icmp eq i8 %tmp12, 0
  br i1 %tmp13, label %bb15, label %bb14

bb14:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg1, i32 %arg2)
  br label %bb15

bb15:                                             ; preds = %.split, %bb14
  %tmp16 = bitcast i8* %tmp9 to %chpl_object_object*
  %tmp17 = call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp16)
  %tmp18 = bitcast i8* %tmp9 to i32*
  store i32 1, i32* %tmp18, align 4, !tbaa !170
  %tmp19 = getelementptr inbounds i8, i8* %tmp9, i64 8
  %tmp20 = bitcast i8* %tmp19 to %chpl_locale_object**
  store %chpl_locale_object* %arg, %chpl_locale_object** %tmp20, align 8, !tbaa !204
  %tmp21 = getelementptr inbounds i8, i8* %tmp9, i64 16
  %tmp22 = bitcast i8* %tmp21 to i64*
  store i64 0, i64* %tmp22, align 8, !tbaa !206
  %tmp23 = getelementptr inbounds i8, i8* %tmp9, i64 24
  %tmp24 = bitcast i8* %tmp23 to i64*
  store i64 0, i64* %tmp24, align 8, !tbaa !207
  %tmp25 = getelementptr inbounds i8, i8* %tmp9, i64 32
  %tmp26 = bitcast i8* %tmp25 to i64*
  store i64 0, i64* %tmp26, align 8, !tbaa !208
  %tmp27 = getelementptr inbounds i8, i8* %tmp9, i64 40
  %tmp28 = bitcast i8* %tmp27 to i64*
  store i64 0, i64* %tmp28, align 8, !tbaa !209
  %tmp29 = getelementptr inbounds i8, i8* %tmp9, i64 48
  %tmp30 = bitcast i8* %tmp29 to i64*
  store i64 0, i64* %tmp30, align 8, !tbaa !210
  %tmp31 = getelementptr inbounds i8, i8* %tmp9, i64 56
  %tmp32 = bitcast i8* %tmp31 to i64*
  store i64 0, i64* %tmp32, align 8, !tbaa !211
  call void @atomic_init_int_least64_t(i64* nonnull %tmp4, i64 0)
  %tmp33 = load i64, i64* %tmp4, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp3, i64 %tmp33)
  %tmp34 = getelementptr inbounds i8, i8* %tmp9, i64 64
  %tmp35 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp3, i64 0, i32 0
  %tmp36 = load i64, i64* %tmp35, align 8
  %tmp37 = bitcast i8* %tmp34 to i64*
  store i64 %tmp36, i64* %tmp37, align 8
  %tmp38 = bitcast i8* %tmp9 to i32*
  store i32 52, i32* %tmp38, align 4, !tbaa !170
  %tmp39 = getelementptr inbounds i8, i8* %tmp9, i64 72
  %tmp40 = bitcast i8* %tmp39 to i64*
  %tmp41 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp42 = sext i32 %tmp41 to i64
  store i64 %tmp42, i64* %tmp40, align 8, !tbaa !312
  call void @init34(%string* %tmp5, i64 %arg1, i32 %arg2)
  %tmp43 = getelementptr inbounds i8, i8* %tmp9, i64 80
  %tmp44 = bitcast i8* %tmp43 to %string*
  %tmp45 = load %string, %string* %tmp5, align 8
  store %string %tmp45, %string* %tmp44, align 8
  store i32 53, i32* %tmp11, align 4, !tbaa !170
  call void @setup(%chpl_LocaleModel_object* %tmp10, i64 %arg1, i32 %arg2)
  ret %chpl_LocaleModel_object* %tmp10
}

define internal void @chpl__auto_destroy_LocaleModel(%chpl_LocaleModel_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  %tmp3 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 8, i32 0
  tail call void @atomic_destroy_int_least64_t(i64* nonnull %tmp3)
  ret void
}

define internal i64 @chpl_id3(%chpl_LocaleModel_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 1
  %tmp3 = load i64, i64* %tmp, align 8, !tbaa !312
  ret i64 %tmp3
}

define internal i64 @getChildCount3(%chpl_LocaleModel_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret i64 0
}

define internal %chpl_locale_object* @getChild3(%chpl_LocaleModel_object* %arg, i64 %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret %chpl_locale_object* null
}

define internal void @setup(%chpl_LocaleModel_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 2
  tail call void @helpSetupLocaleFlat(%chpl_LocaleModel_object* %arg, %string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_RootLocale_object* @_new11(i64 %arg, i32 %arg3) {
bb:
  %tmp = alloca %atomic_int64, align 8
  %tmp4 = alloca i64, align 8
  %tmp5 = alloca %range_int64_t_bounded_F, align 8
  %tmp6 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp7 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp8 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp9 = alloca %_distribution_DefaultDist, align 8
  %tmp10 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp11 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp12 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp13 = load i64, i64* @numLocales, align 8, !tbaa !138
  %tmp14 = tail call i8* @chpl_here_alloc(i64 120, i16 3, i64 %arg, i32 %arg3)
  %tmp15 = bitcast i8* %tmp14 to %chpl_RootLocale_object*
  %tmp16 = bitcast i8* %tmp14 to i32*
  store i32 55, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = bitcast i8* %tmp14 to %chpl_object_object*
  %tmp18 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp17)
  %tmp19 = bitcast i8* %tmp14 to i32*
  store i32 1, i32* %tmp19, align 4, !tbaa !170
  %tmp20 = getelementptr inbounds i8, i8* %tmp14, i64 8
  %tmp21 = bitcast i8* %tmp20 to %chpl_locale_object**
  store %chpl_locale_object* null, %chpl_locale_object** %tmp21, align 8, !tbaa !204
  %tmp22 = getelementptr inbounds i8, i8* %tmp14, i64 16
  %tmp23 = bitcast i8* %tmp22 to i64*
  store i64 0, i64* %tmp23, align 8, !tbaa !206
  %tmp24 = getelementptr inbounds i8, i8* %tmp14, i64 24
  %tmp25 = bitcast i8* %tmp24 to i64*
  store i64 0, i64* %tmp25, align 8, !tbaa !207
  %tmp26 = getelementptr inbounds i8, i8* %tmp14, i64 32
  %tmp27 = bitcast i8* %tmp26 to i64*
  store i64 0, i64* %tmp27, align 8, !tbaa !208
  %tmp28 = getelementptr inbounds i8, i8* %tmp14, i64 40
  %tmp29 = bitcast i8* %tmp28 to i64*
  store i64 0, i64* %tmp29, align 8, !tbaa !209
  %tmp30 = getelementptr inbounds i8, i8* %tmp14, i64 48
  %tmp31 = bitcast i8* %tmp30 to i64*
  store i64 0, i64* %tmp31, align 8, !tbaa !210
  %tmp32 = getelementptr inbounds i8, i8* %tmp14, i64 56
  %tmp33 = bitcast i8* %tmp32 to i64*
  store i64 0, i64* %tmp33, align 8, !tbaa !211
  call void @atomic_init_int_least64_t(i64* nonnull %tmp4, i64 0)
  %tmp34 = load i64, i64* %tmp4, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp, i64 %tmp34)
  %tmp35 = getelementptr inbounds i8, i8* %tmp14, i64 64
  %tmp36 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp, i64 0, i32 0
  %tmp37 = load i64, i64* %tmp36, align 8
  %tmp38 = bitcast i8* %tmp35 to i64*
  store i64 %tmp37, i64* %tmp38, align 8
  %tmp39 = bitcast i8* %tmp14 to i32*
  store i32 54, i32* %tmp39, align 4, !tbaa !170
  %tmp40 = getelementptr inbounds i8, i8* %tmp14, i64 32
  %tmp41 = bitcast i8* %tmp40 to i64*
  store i64 0, i64* %tmp41, align 8, !tbaa !208
  %tmp42 = getelementptr inbounds i8, i8* %tmp14, i64 40
  %tmp43 = bitcast i8* %tmp42 to i64*
  store i64 0, i64* %tmp43, align 8, !tbaa !209
  %tmp44 = getelementptr inbounds i8, i8* %tmp14, i64 16
  %tmp45 = bitcast i8* %tmp44 to i64*
  store i64 0, i64* %tmp45, align 8, !tbaa !206
  %tmp46 = getelementptr inbounds i8, i8* %tmp14, i64 24
  %tmp47 = bitcast i8* %tmp46 to i64*
  store i64 0, i64* %tmp47, align 8, !tbaa !207
  %tmp48 = getelementptr inbounds i8, i8* %tmp14, i64 48
  %tmp49 = bitcast i8* %tmp48 to i64*
  store i64 0, i64* %tmp49, align 8, !tbaa !210
  %tmp50 = add nsw i64 %tmp13, -1
  call void @chpl_build_bounded_range(i64 0, i64 %tmp50, %range_int64_t_bounded_F* %tmp5)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp5, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp51 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp5, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp52 = insertvalue %range_int64_t_bounded_F %tmp51, i64 %.unpack2, 1
  call void @chpl__buildDomainExpr2(%range_int64_t_bounded_F %tmp52, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp7, i64 %arg, i32 %arg3)
  %tmp53 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp7, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp53, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, align 8
  %tmp54 = call %chpl___RuntimeTypeInfo2 @chpl__buildDomainRuntimeType2(%_distribution_DefaultDist* @defaultDist)
  %tmp55 = extractvalue %chpl___RuntimeTypeInfo2 %tmp54, 0
  store %_distribution_DefaultDist %tmp55, %_distribution_DefaultDist* %tmp9, align 8
  call void @chpl__convertRuntimeTypeToValue(%_distribution_DefaultDist* %tmp9, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp10, i64 %arg, i32 %arg3)
  %tmp56 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp10, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp56, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, align 8
  call void @chpl___ASSIGN_(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, i64 %arg, i32 %arg3)
  %tmp57 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp8, align 8
  %tmp58 = getelementptr inbounds i8, i8* %tmp14, i64 72
  %tmp59 = bitcast i8* %tmp58 to %_domain_DefaultRectangularDom_1_int64_t_F*
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp57, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp59, align 8
  %tmp60 = call %_domain_DefaultRectangularDom_1_int64_t_F* @chpl__ensureDomainExpr(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp59)
  %tmp61 = call %chpl___RuntimeTypeInfo5 @chpl__buildArrayRuntimeType3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp60)
  %tmp62 = extractvalue %chpl___RuntimeTypeInfo5 %tmp61, 0
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp62, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp11, align 8
  call void @chpl__convertRuntimeTypeToValue5(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp11, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp12, i64 %arg, i32 %arg3)
  %tmp63 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp12, align 8
  %tmp64 = getelementptr inbounds i8, i8* %tmp14, i64 96
  %tmp65 = bitcast i8* %tmp64 to %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t*
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp63, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp65, align 8
  store i32 55, i32* %tmp16, align 4, !tbaa !170
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp6, i64 %arg, i32 %arg3)
  ret %chpl_RootLocale_object* %tmp15
}

define internal void @setup2(%chpl_RootLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @helpSetupRootLocaleFlat(%chpl_RootLocale_object* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal i64 @chpl_id4(%chpl_RootLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i64, i64* @numLocales, align 8, !tbaa !138
  ret i64 %tmp
}

define internal i64 @getChildCount4(%chpl_RootLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 1
  %tmp3 = tail call i64 @numIndices2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  ret i64 %tmp3
}

define internal %chpl_locale_object* @getChild4(%chpl_RootLocale_object* %arg, i64 %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 2, i32 1
  %tmp4 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp, align 8, !tbaa !72
  %tmp5 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp4, i64 0, i32 7
  %tmp6 = load %chpl_locale_object**, %chpl_locale_object*** %tmp5, align 8, !tbaa !213
  %tmp7 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp6, i64 %arg1
  %tmp8 = load %chpl_locale_object*, %chpl_locale_object** %tmp7, align 8, !tbaa !158
  ret %chpl_locale_object* %tmp8
}

define internal %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @getDefaultLocaleArray(%chpl_RootLocale_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 2
  ret %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp
}

define internal %chpl_locale_object* @localeIDtoLocale2(%chpl_RootLocale_object* %arg, %struct.chpl_localeID_t* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %arg1, i64 0, i32 0
  %tmp4 = load i32, i32* %tmp, align 4, !tbaa !110
  %tmp5 = tail call i32 @chpl_rt_nodeFromLocaleID(i32 %tmp4)
  %tmp6 = sext i32 %tmp5 to i64
  %tmp7 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 2, i32 1
  %tmp8 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp7, align 8, !tbaa !72
  %tmp9 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp8, i64 0, i32 7
  %tmp10 = load %chpl_locale_object**, %chpl_locale_object*** %tmp9, align 8, !tbaa !213
  %tmp11 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp10, i64 %tmp6
  %tmp12 = load %chpl_locale_object*, %chpl_locale_object** %tmp11, align 8, !tbaa !158
  ret %chpl_locale_object* %tmp12
}

define internal void @deinit22(%chpl_RootLocale_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  %tmp3 = alloca %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, align 8
  %tmp4 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp5 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 2
  %tmp6 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp5, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp6, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp, align 8
  %tmp7 = getelementptr inbounds %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp, i64 0, i32 1
  %tmp8 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp7, align 8, !tbaa !72
  %tmp9 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp8, i64 0, i32 1
  %tmp10 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp9, align 8, !tbaa !85
  %tmp11 = tail call i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp10)
  %tmp12 = tail call i64 @dsiLow2(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp10)
  %tmp13 = sub i64 1, %tmp11
  %tmp14 = add i64 %tmp13, %tmp12
  %tmp15 = tail call i64 @dsiNumIndices(%chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp10)
  %tmp16 = add nsw i64 %tmp15, -1
  %tmp17 = mul nsw i64 %tmp16, %tmp14
  %tmp18 = add nsw i64 %tmp17, %tmp11
  %tmp19 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp8, i64 0, i32 7
  %tmp20 = load %chpl_locale_object**, %chpl_locale_object*** %tmp19, align 8, !tbaa !213
  %tmp21 = icmp sgt i64 %tmp17, -1
  br i1 %tmp21, label %.preheader, label %bb38

.preheader:                                       ; preds = %.split
  br label %bb22

bb22:                                             ; preds = %.preheader, %bb35
  %.0 = phi i64 [ %tmp36, %bb35 ], [ %tmp11, %.preheader ]
  %tmp23 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp20, i64 %.0
  store i8 0, i8* @rootLocaleInitialized, align 1, !tbaa !8
  %tmp24 = load %chpl_locale_object*, %chpl_locale_object** %tmp23, align 8, !tbaa !158
  %tmp25 = icmp eq %chpl_locale_object* %tmp24, null
  br i1 %tmp25, label %bb35, label %bb26

bb26:                                             ; preds = %bb22
  %tmp27 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp24, i64 0, i32 0, i32 0
  %tmp28 = load i32, i32* %tmp27, align 4, !tbaa !170
  %tmp29 = sext i32 %tmp28 to i64
  %tmp30 = mul nsw i64 %tmp29, 5
  %tmp31 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp30
  %tmp32 = bitcast void (i8*)** %tmp31 to void (%chpl_locale_object*, i64, i32)**
  %tmp33 = load void (%chpl_locale_object*, i64, i32)*, void (%chpl_locale_object*, i64, i32)** %tmp32, align 8
  tail call void %tmp33(%chpl_locale_object* nonnull %tmp24, i64 %arg1, i32 %arg2)
  %tmp34 = bitcast %chpl_locale_object* %tmp24 to i8*
  tail call void @chpl_here_free(i8* %tmp34, i64 %arg1, i32 %arg2)
  br label %bb35

bb35:                                             ; preds = %bb22, %bb26
  %tmp36 = add nsw i64 %.0, %tmp14
  %tmp37 = icmp sgt i64 %tmp36, %tmp18
  br i1 %tmp37, label %.loopexit, label %bb22

.loopexit:                                        ; preds = %bb35
  br label %bb38

bb38:                                             ; preds = %.loopexit, %.split
  %tmp39 = load %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp5, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t %tmp39, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp3, align 8
  call void @chpl__autoDestroy5(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp3, i64 %arg1, i32 %arg2)
  %tmp40 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 1
  %tmp41 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp40, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp41, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, align 8
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp4, i64 %arg1, i32 %arg2)
  %tmp42 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg, i64 0, i32 0, i32 0, i32 8, i32 0
  call void @atomic_destroy_int_least64_t(i64* nonnull %tmp42)
  ret void
}

define internal void @chpl__init_LocaleModelHelpFlat(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_LocaleModelHelpFlat_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @252, i64 0, i64 0), i64 19, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocaleModelHelpFlat_p, align 1, !tbaa !8
  tail call void @chpl__init_LocaleModelHelpSetup(i64 %arg, i32 %arg1)
  tail call void @chpl__init_LocaleModelHelpRuntime(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define i8 @chpl_doDirectExecuteOn(%struct.chpl_localeID_t* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @chpl_nodeFromLocaleID(%struct.chpl_localeID_t* %arg, i64 46, i32 49)
  %tmp1 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp2 = icmp eq i32 %tmp, %tmp1
  %tmp3 = zext i1 %tmp2 to i8
  ret i8 %tmp3
}

define void @chpl_executeOn(%struct.chpl_localeID_t* nonnull %arg, i64 %arg1, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @chpl_nodeFromLocaleID(%struct.chpl_localeID_t* %arg, i64 %arg4, i32 %arg5)
  %tmp6 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp7 = icmp eq i32 %tmp, %tmp6
  br i1 %tmp7, label %bb8, label %bb11

bb8:                                              ; preds = %.split
  %tmp9 = trunc i64 %arg1 to i16
  %tmp10 = getelementptr inbounds %struct.chpl_comm_on_bundle_t, %struct.chpl_comm_on_bundle_t* %arg2, i64 0, i32 0, i32 0
  tail call void @chpl_ftable_call(i16 %tmp9, i8* %tmp10)
  br label %bb16

bb11:                                             ; preds = %.split
  %tmp12 = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp13 = tail call %struct.chpl_task_bundle_t* @chpl_comm_on_bundle_task_bundle(%struct.chpl_comm_on_bundle_t* %arg2)
  tail call void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %tmp13, %struct.chpl_task_ChapelData_t* %tmp12, i64 %arg4, i32 %arg5)
  %tmp14 = tail call i32 @chpl_sublocFromLocaleID(%struct.chpl_localeID_t* %arg, i64 %arg4, i32 %arg5)
  %tmp15 = trunc i64 %arg1 to i16
  tail call void @chpl_comm_execute_on(i32 %tmp, i32 %tmp14, i16 %tmp15, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3)
  br label %bb16

bb16:                                             ; preds = %bb11, %bb8
  ret void
}

define void @chpl_executeOnFast(%struct.chpl_localeID_t* nonnull %arg, i64 %arg1, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @chpl_nodeFromLocaleID(%struct.chpl_localeID_t* %arg, i64 %arg4, i32 %arg5)
  %tmp6 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp7 = icmp eq i32 %tmp, %tmp6
  br i1 %tmp7, label %bb8, label %bb11

bb8:                                              ; preds = %.split
  %tmp9 = trunc i64 %arg1 to i16
  %tmp10 = getelementptr inbounds %struct.chpl_comm_on_bundle_t, %struct.chpl_comm_on_bundle_t* %arg2, i64 0, i32 0, i32 0
  tail call void @chpl_ftable_call(i16 %tmp9, i8* %tmp10)
  br label %bb16

bb11:                                             ; preds = %.split
  %tmp12 = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp13 = tail call %struct.chpl_task_bundle_t* @chpl_comm_on_bundle_task_bundle(%struct.chpl_comm_on_bundle_t* %arg2)
  tail call void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %tmp13, %struct.chpl_task_ChapelData_t* %tmp12, i64 %arg4, i32 %arg5)
  %tmp14 = tail call i32 @chpl_sublocFromLocaleID(%struct.chpl_localeID_t* %arg, i64 %arg4, i32 %arg5)
  %tmp15 = trunc i64 %arg1 to i16
  tail call void @chpl_comm_execute_on_fast(i32 %tmp, i32 %tmp14, i16 %tmp15, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3)
  br label %bb16

bb16:                                             ; preds = %bb11, %bb8
  ret void
}

define void @chpl_executeOnNB(%struct.chpl_localeID_t* nonnull %arg, i64 %arg1, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @chpl_nodeFromLocaleID(%struct.chpl_localeID_t* %arg, i64 %arg4, i32 %arg5)
  %tmp6 = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp7 = tail call i8 @chpl_task_data_getSerial(%struct.chpl_task_ChapelData_t* %tmp6, i64 %arg4, i32 %arg5)
  %tmp8 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp9 = icmp eq i32 %tmp, %tmp8
  br i1 %tmp9, label %bb10, label %bb19

bb10:                                             ; preds = %.split
  %tmp11 = icmp eq i8 %tmp7, 0
  br i1 %tmp11, label %bb15, label %bb12

bb12:                                             ; preds = %bb10
  %tmp13 = trunc i64 %arg1 to i16
  %tmp14 = getelementptr inbounds %struct.chpl_comm_on_bundle_t, %struct.chpl_comm_on_bundle_t* %arg2, i64 0, i32 0, i32 0
  tail call void @chpl_ftable_call(i16 %tmp13, i8* %tmp14)
  br label %bb25

bb15:                                             ; preds = %bb10
  %tmp16 = tail call %struct.chpl_task_bundle_t* @chpl_comm_on_bundle_task_bundle(%struct.chpl_comm_on_bundle_t* %arg2)
  tail call void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %tmp16, %struct.chpl_task_ChapelData_t* %tmp6, i64 %arg4, i32 %arg5)
  %tmp17 = trunc i64 %arg1 to i16
  %tmp18 = trunc i64 %arg4 to i32
  tail call void @chpl_comm_taskCallFTable(i16 %tmp17, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3, i32 -2, i32 %tmp18, i32 %arg5)
  br label %bb25

bb19:                                             ; preds = %.split
  %tmp20 = tail call %struct.chpl_task_bundle_t* @chpl_comm_on_bundle_task_bundle(%struct.chpl_comm_on_bundle_t* %arg2)
  tail call void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %tmp20, %struct.chpl_task_ChapelData_t* %tmp6, i64 %arg4, i32 %arg5)
  %tmp21 = icmp eq i8 %tmp7, 0
  %tmp22 = trunc i64 %arg1 to i16
  br i1 %tmp21, label %bb24, label %bb23

bb23:                                             ; preds = %bb19
  tail call void @chpl_comm_execute_on(i32 %tmp, i32 -2, i16 %tmp22, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3)
  br label %bb25

bb24:                                             ; preds = %bb19
  tail call void @chpl_comm_execute_on_nb(i32 %tmp, i32 -2, i16 %tmp22, %struct.chpl_comm_on_bundle_t* %arg2, i64 %arg3)
  br label %bb25

bb25:                                             ; preds = %bb23, %bb24, %bb12, %bb15
  ret void
}

define internal void @chpl__init_LocaleModelHelpMem(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_LocaleModelHelpMem_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @253, i64 0, i64 0), i64 18, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocaleModelHelpMem_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal i8* @chpl_here_alloc(i64 %arg, i16 %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i16 @chpl_memhook_md_num()
  %tmp4 = add nsw i16 %tmp, %arg1
  %tmp5 = trunc i64 %arg2 to i32
  %tmp6 = tail call i8* @chpl_mem_alloc(i64 %arg, i16 %tmp4, i32 %tmp5, i32 %arg3)
  ret i8* %tmp6
}

define internal i8* @chpl_here_realloc(i8* %arg, i64 %arg1, i16 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i16 @chpl_memhook_md_num()
  %tmp5 = add nsw i16 %tmp, %arg2
  %tmp6 = trunc i64 %arg3 to i32
  %tmp7 = tail call i8* @chpl_mem_realloc(i8* %arg, i64 %arg1, i16 %tmp5, i32 %tmp6, i32 %arg4)
  ret i8* %tmp7
}

define internal i64 @chpl_here_good_alloc_size(i64 %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = trunc i64 %arg1 to i32
  %tmp3 = tail call i64 @chpl_mem_good_alloc_size(i64 %arg, i32 %tmp, i32 %arg2)
  ret i64 %tmp3
}

define internal void @chpl_here_free(i8* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = trunc i64 %arg1 to i32
  tail call void @chpl_mem_free(i8* %arg, i32 %tmp, i32 %arg2)
  ret void
}

define internal void @chpl__init_LocaleModelHelpRuntime(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_LocaleModelHelpRuntime_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @255, i64 0, i64 0), i64 22, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocaleModelHelpRuntime_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define void @chpl_buildLocaleID(i32 %arg, i32 %arg1, %struct.chpl_localeID_t* nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @chpl_rt_buildLocaleID(i32 %arg, i32 %arg1)
  %tmp5 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %arg2, i64 0, i32 0
  store i32 %tmp, i32* %tmp5, align 4, !tbaa !110
  ret void
}

define i32 @chpl_nodeFromLocaleID(%struct.chpl_localeID_t* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %arg, i64 0, i32 0
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !110
  %tmp4 = tail call i32 @chpl_rt_nodeFromLocaleID(i32 %tmp3)
  ret i32 %tmp4
}

define i32 @chpl_sublocFromLocaleID(%struct.chpl_localeID_t* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %arg, i64 0, i32 0
  %tmp3 = load i32, i32* %tmp, align 4, !tbaa !110
  %tmp4 = tail call i32 @chpl_rt_sublocFromLocaleID(i32 %tmp3)
  ret i32 %tmp4
}

define void @chpl_taskListAddBegin(i64 %arg, i64 %arg1, %struct.chpl_task_bundle_t* %arg2, i64 %arg3, i8** nonnull %arg4, i64 %arg5, i64 %arg6, i32 %arg7) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp8 = tail call i8 @chpl_task_data_getSerial(%struct.chpl_task_ChapelData_t* %tmp, i64 %arg6, i32 %arg7)
  %tmp9 = icmp eq i8 %tmp8, 0
  br i1 %tmp9, label %bb13, label %bb10

bb10:                                             ; preds = %.split
  %tmp11 = trunc i64 %arg1 to i16
  %tmp12 = getelementptr inbounds %struct.chpl_task_bundle_t, %struct.chpl_task_bundle_t* %arg2, i64 0, i32 0
  tail call void @chpl_ftable_call(i16 %tmp11, i8* %tmp12)
  br label %bb18

bb13:                                             ; preds = %.split
  tail call void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %arg2, %struct.chpl_task_ChapelData_t* %tmp, i64 %arg6, i32 %arg7)
  %tmp14 = trunc i64 %arg1 to i16
  %tmp15 = trunc i64 %arg to i32
  %tmp16 = trunc i64 %arg5 to i32
  %tmp17 = trunc i64 %arg6 to i32
  tail call void @chpl_task_addToTaskList(i16 %tmp14, %struct.chpl_task_bundle_t* %arg2, i64 %arg3, i32 %tmp15, i8** nonnull %arg4, i32 %tmp16, i1 true, i32 %tmp17, i32 %arg7)
  br label %bb18

bb18:                                             ; preds = %bb13, %bb10
  ret void
}

define void @chpl_taskListAddCoStmt(i64 %arg, i64 %arg1, %struct.chpl_task_bundle_t* %arg2, i64 %arg3, i8** nonnull %arg4, i64 %arg5, i64 %arg6, i32 %arg7) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData()
  %tmp8 = tail call i8 @chpl_task_data_getSerial(%struct.chpl_task_ChapelData_t* %tmp, i64 %arg6, i32 %arg7)
  %tmp9 = icmp eq i8 %tmp8, 0
  br i1 %tmp9, label %bb13, label %bb10

bb10:                                             ; preds = %.split
  %tmp11 = trunc i64 %arg1 to i16
  %tmp12 = getelementptr inbounds %struct.chpl_task_bundle_t, %struct.chpl_task_bundle_t* %arg2, i64 0, i32 0
  tail call void @chpl_ftable_call(i16 %tmp11, i8* %tmp12)
  br label %bb18

bb13:                                             ; preds = %.split
  tail call void @chpl_task_data_setup(%struct.chpl_task_bundle_t* %arg2, %struct.chpl_task_ChapelData_t* %tmp, i64 %arg6, i32 %arg7)
  %tmp14 = trunc i64 %arg1 to i16
  %tmp15 = trunc i64 %arg to i32
  %tmp16 = trunc i64 %arg5 to i32
  %tmp17 = trunc i64 %arg6 to i32
  tail call void @chpl_task_addToTaskList(i16 %tmp14, %struct.chpl_task_bundle_t* %arg2, i64 %arg3, i32 %tmp15, i8** nonnull %arg4, i32 %tmp16, i1 false, i32 %tmp17, i32 %arg7)
  br label %bb18

bb18:                                             ; preds = %bb13, %bb10
  ret void
}

define void @chpl_taskListExecute(i8** nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @chpl_task_executeTasksInList(i8** nonnull %arg)
  ret void
}

define internal void @chpl__init_LocaleModelHelpSetup(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_LocaleModelHelpSetup_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @254, i64 0, i64 0), i64 20, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocaleModelHelpSetup_p, align 1, !tbaa !8
  tail call void @chpl__init_ChapelLocale(i64 %arg, i32 %arg1)
  tail call void @chpl__init_DefaultRectangular(i64 %arg, i32 %arg1)
  tail call void @chpl__init_ChapelNumLocales(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Sys(i64 %arg, i32 %arg1)
  store i8 0, i8* @doneCreatingLocales, align 1, !tbaa !8
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @init32(%chpl_root_locale_accum* nonnull %arg, %atomic_int64* nonnull %arg1, %atomic_int64* nonnull %arg2, %atomic_int64* nonnull %arg3, %atomic_int64* nonnull %arg4, %atomic_int64* nonnull %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %atomic_int64, %atomic_int64* %arg5, i64 0, i32 0
  %tmp6 = load i64, i64* %tmp, align 8
  %tmp7 = getelementptr inbounds %atomic_int64, %atomic_int64* %arg4, i64 0, i32 0
  %tmp8 = load i64, i64* %tmp7, align 8
  %tmp9 = getelementptr inbounds %atomic_int64, %atomic_int64* %arg3, i64 0, i32 0
  %tmp10 = load i64, i64* %tmp9, align 8
  %tmp11 = getelementptr inbounds %atomic_int64, %atomic_int64* %arg2, i64 0, i32 0
  %tmp12 = load i64, i64* %tmp11, align 8
  %tmp13 = getelementptr inbounds %atomic_int64, %atomic_int64* %arg1, i64 0, i32 0
  %tmp14 = load i64, i64* %tmp13, align 8
  %tmp15 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 0, i32 0
  store i64 %tmp14, i64* %tmp15, align 8
  %tmp16 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 1, i32 0
  store i64 %tmp12, i64* %tmp16, align 8
  %tmp17 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 2, i32 0
  store i64 %tmp10, i64* %tmp17, align 8
  %tmp18 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 3, i32 0
  store i64 %tmp8, i64* %tmp18, align 8
  %tmp19 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 4, i32 0
  store i64 %tmp6, i64* %tmp19, align 8
  ret void
}

define internal void @accum(%chpl_root_locale_accum* nonnull %arg, %chpl_locale_object* %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 0, i32 0
  %tmp2 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg1, i64 0, i32 4
  %tmp3 = load i64, i64* %tmp2, align 8, !tbaa !208
  %tmp4 = tail call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp, i64 %tmp3, i32 5)
  %tmp5 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 1, i32 0
  %tmp6 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg1, i64 0, i32 5
  %tmp7 = load i64, i64* %tmp6, align 8, !tbaa !209
  %tmp8 = tail call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp5, i64 %tmp7, i32 5)
  %tmp9 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 2, i32 0
  %tmp10 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg1, i64 0, i32 2
  %tmp11 = load i64, i64* %tmp10, align 8, !tbaa !206
  %tmp12 = tail call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp9, i64 %tmp11, i32 5)
  %tmp13 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 3, i32 0
  %tmp14 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg1, i64 0, i32 3
  %tmp15 = load i64, i64* %tmp14, align 8, !tbaa !207
  %tmp16 = tail call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp13, i64 %tmp15, i32 5)
  %tmp17 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 4, i32 0
  %tmp18 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %arg1, i64 0, i32 6
  %tmp19 = load i64, i64* %tmp18, align 8, !tbaa !210
  %tmp20 = tail call i64 @atomic_fetch_add_explicit_int_least64_t(i64* nonnull %tmp17, i64 %tmp19, i32 5)
  ret void
}

define internal void @setRootLocaleValues(%chpl_root_locale_accum* nonnull %arg, %chpl_RootLocale_object* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 0, i32 0
  %tmp4 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp, i32 5)
  %tmp5 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg1, i64 0, i32 0, i32 0, i32 4
  store i64 %tmp4, i64* %tmp5, align 8, !tbaa !208
  %tmp6 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 1, i32 0
  %tmp7 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp6, i32 5)
  %tmp8 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg1, i64 0, i32 0, i32 0, i32 5
  store i64 %tmp7, i64* %tmp8, align 8, !tbaa !209
  %tmp9 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 2, i32 0
  %tmp10 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp9, i32 5)
  %tmp11 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg1, i64 0, i32 0, i32 0, i32 2
  store i64 %tmp10, i64* %tmp11, align 8, !tbaa !206
  %tmp12 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 3, i32 0
  %tmp13 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp12, i32 5)
  %tmp14 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg1, i64 0, i32 0, i32 0, i32 3
  store i64 %tmp13, i64* %tmp14, align 8, !tbaa !207
  %tmp15 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %arg, i64 0, i32 4, i32 0
  %tmp16 = tail call i64 @atomic_load_explicit_int_least64_t(i64* nonnull %tmp15, i32 5)
  %tmp17 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg1, i64 0, i32 0, i32 0, i32 6
  store i64 %tmp16, i64* %tmp17, align 8, !tbaa !210
  ret void
}

define internal void @helpSetupRootLocaleFlat(%chpl_RootLocale_object* %arg, i64 %arg22, i32 %arg23) {
bb:
  %tmp = alloca %chpl_root_locale_accum, align 8
  %tmp24 = alloca %atomic_int64, align 8
  %tmp25 = alloca %atomic_int64, align 8
  %tmp26 = alloca i64, align 8
  %tmp27 = alloca %atomic_int64, align 8
  %tmp28 = alloca %atomic_int64, align 8
  %tmp29 = alloca i64, align 8
  %tmp30 = alloca %atomic_int64, align 8
  %tmp31 = alloca %atomic_int64, align 8
  %tmp32 = alloca i64, align 8
  %tmp33 = alloca %atomic_int64, align 8
  %tmp34 = alloca %atomic_int64, align 8
  %tmp35 = alloca i64, align 8
  %tmp36 = alloca %atomic_int64, align 8
  %tmp37 = alloca %atomic_int64, align 8
  %tmp38 = alloca i64, align 8
  %tmp39 = alloca %localesBarrier, align 8
  %tmp40 = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  %tmp41 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp42 = alloca %range_int64_t_bounded_F, align 8
  %tmp43 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp44 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp45 = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp46 = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  %tmp47 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp48 = alloca %range_int64_t_bounded_F, align 8
  %tmp49 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp49, align 8
  %tmp50 = alloca %chpl__class_localscoforall_fn11_object, align 8
  %tmp51 = load i64, i64* @numLocales, align 8, !tbaa !138
  call void @atomic_init_int_least64_t(i64* nonnull %tmp26, i64 0)
  %tmp52 = load i64, i64* %tmp26, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp25, i64 %tmp52)
  %tmp53 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp25, i64 0, i32 0
  %tmp54 = load i64, i64* %tmp53, align 8
  %tmp55 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp24, i64 0, i32 0
  store i64 %tmp54, i64* %tmp55, align 8
  call void @atomic_init_int_least64_t(i64* nonnull %tmp29, i64 0)
  %tmp56 = load i64, i64* %tmp29, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp28, i64 %tmp56)
  %tmp57 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp28, i64 0, i32 0
  %tmp58 = load i64, i64* %tmp57, align 8
  %tmp59 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp27, i64 0, i32 0
  store i64 %tmp58, i64* %tmp59, align 8
  call void @atomic_init_int_least64_t(i64* nonnull %tmp32, i64 0)
  %tmp60 = load i64, i64* %tmp32, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp31, i64 %tmp60)
  %tmp61 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp31, i64 0, i32 0
  %tmp62 = load i64, i64* %tmp61, align 8
  %tmp63 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp30, i64 0, i32 0
  store i64 %tmp62, i64* %tmp63, align 8
  call void @atomic_init_int_least64_t(i64* nonnull %tmp35, i64 0)
  %tmp64 = load i64, i64* %tmp35, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp34, i64 %tmp64)
  %tmp65 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp34, i64 0, i32 0
  %tmp66 = load i64, i64* %tmp65, align 8
  %tmp67 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp33, i64 0, i32 0
  store i64 %tmp66, i64* %tmp67, align 8
  call void @atomic_init_int_least64_t(i64* nonnull %tmp38, i64 0)
  %tmp68 = load i64, i64* %tmp38, align 8, !tbaa !19
  call void @init3(%atomic_int64* %tmp37, i64 %tmp68)
  %tmp69 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp37, i64 0, i32 0
  %tmp70 = load i64, i64* %tmp69, align 8
  %tmp71 = getelementptr inbounds %atomic_int64, %atomic_int64* %tmp36, i64 0, i32 0
  store i64 %tmp70, i64* %tmp71, align 8
  call void @init32(%chpl_root_locale_accum* %tmp, %atomic_int64* %tmp24, %atomic_int64* %tmp27, %atomic_int64* %tmp30, %atomic_int64* %tmp33, %atomic_int64* %tmp36)
  call void @init20(%localesBarrier* %tmp39)
  call void @chpl_build_low_bounded_range(i64 1, %range_int64_t_boundedLow_F* %tmp41)
  %.elt = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp41, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp72 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp41, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp73 = insertvalue %range_int64_t_boundedLow_F %tmp72, i64 %.unpack2, 1
  %tmp74 = add nsw i64 %tmp51, -1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp73, i64 %tmp74, %range_int64_t_bounded_F* %tmp42, i64 %arg22, i32 %arg23)
  %.elt3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp75 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack4, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp76 = insertvalue %range_int64_t_bounded_F %tmp75, i64 %.unpack6, 1
  call void @chpl__ensureDomainExpr3(%range_int64_t_bounded_F %tmp76, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp44, i64 %arg22, i32 %arg23)
  %tmp77 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp44, align 8
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp77, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp43, align 8
  %tmp78 = call %chpl___RuntimeTypeInfo4 @chpl__buildArrayRuntimeType2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp43)
  %tmp79 = extractvalue %chpl___RuntimeTypeInfo4 %tmp78, 0
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp79, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp45, align 8
  call void @chpl__convertRuntimeTypeToValue4(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp45, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp46, i64 %arg22, i32 %arg23)
  %tmp80 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp46, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp80, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp40, align 8
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp47)
  %.elt7 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp47, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %tmp81 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack8, 0
  %.elt9 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp47, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %tmp82 = insertvalue %range_int64_t_boundedLow_F %tmp81, i64 %.unpack10, 1
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp82, i64 %tmp51, %range_int64_t_bounded_F* %tmp48, i64 %arg22, i32 %arg23)
  %.elt11 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp48, i64 0, i32 0
  %.unpack12 = load i64, i64* %.elt11, align 8
  %tmp83 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack12, 0
  %.elt13 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp48, i64 0, i32 1
  %.unpack14 = load i64, i64* %.elt13, align 8
  %tmp84 = insertvalue %range_int64_t_bounded_F %tmp83, i64 %.unpack14, 1
  %tmp85 = call i8* @chpl_here_alloc(i64 48, i16 46, i64 %arg22, i32 %arg23)
  %tmp86 = bitcast i8* %tmp85 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %arg22, i32 %arg23)
  %tmp87 = call i64 @length(%range_int64_t_bounded_F %tmp84)
  call void @_upEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, i64 %arg22, i32 %arg23)
  %tmp88 = icmp sgt i64 %.unpack12, %.unpack14
  br i1 %tmp88, label %bb109, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb89

bb89:                                             ; preds = %.preheader, %bb89
  %.0 = phi i64 [ %tmp107, %bb89 ], [ %.unpack12, %.preheader ]
  %tmp90 = getelementptr inbounds %localesBarrier, %localesBarrier* %tmp39, i64 0, i32 0
  %tmp91 = load i32, i32* %tmp90, align 8, !tbaa !110
  %tmp92 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 1, i32 0
  store i32 %tmp91, i32* %tmp92, align 8, !tbaa !315
  %tmp93 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 2
  %tmp94 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp40, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp94, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp93, align 8
  %tmp95 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 3
  store i64 %.0, i64* %tmp95, align 8, !tbaa !320
  %tmp96 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 4
  %tmp97 = bitcast %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp96 to i8**
  store i8* %tmp85, i8** %tmp97, align 8, !tbaa !321
  %tmp98 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 5
  store %chpl_RootLocale_object* %arg, %chpl_RootLocale_object** %tmp98, align 8, !tbaa !322
  %tmp99 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 6
  store %chpl_root_locale_accum* %tmp, %chpl_root_locale_accum** %tmp99, align 8, !tbaa !323
  %tmp100 = getelementptr inbounds i8, i8* %tmp85, i64 24
  %tmp101 = bitcast i8* %tmp100 to i8**
  %tmp102 = load i32, i32* @chpl_nodeID, align 4
  %tmp103 = sext i32 %tmp102 to i64
  %tmp104 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 7
  store i64 %arg22, i64* %tmp104, align 8, !tbaa !324
  %tmp105 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 8
  store i32 %arg23, i32* %tmp105, align 8, !tbaa !325
  %tmp106 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %tmp50, i64 0, i32 0
  call void @chpl_taskListAddCoStmt(i64 -2, i64 10, %struct.chpl_task_bundle_t* nonnull %tmp106, i64 152, i8** %tmp101, i64 %tmp103, i64 71, i32 54)
  %tmp107 = add nsw i64 %.0, 1
  %tmp108 = icmp slt i64 %.0, %.unpack14
  br i1 %tmp108, label %bb89, label %.loopexit

.loopexit:                                        ; preds = %bb89
  br label %bb109

bb109:                                            ; preds = %.loopexit, %.split
  store %chpl_Error_object* null, %chpl_Error_object** %tmp49, align 8, !tbaa !123
  call void @_waitEndCount2(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp86, i64 %tmp87, %chpl_Error_object** %tmp49, i64 %arg22, i32 %arg23)
  %tmp110 = load %chpl_Error_object*, %chpl_Error_object** %tmp49, align 8, !tbaa !125
  %tmp111 = icmp eq %chpl_Error_object* %tmp110, null
  br i1 %tmp111, label %bb113, label %bb112

bb112:                                            ; preds = %bb109
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp110, i64 %arg22, i32 %arg23)
  br label %bb113

bb113:                                            ; preds = %bb112, %bb109
  %tmp114 = icmp eq i8* %tmp85, null
  br i1 %tmp114, label %bb119, label %bb115

bb115:                                            ; preds = %bb113
  %tmp116 = getelementptr inbounds i8, i8* %tmp85, i64 32
  %tmp117 = bitcast i8* %tmp116 to i64*
  call void @atomic_destroy_int_least64_t(i64* %tmp117)
  %tmp118 = getelementptr inbounds i8, i8* %tmp85, i64 16
  call void @atomic_destroy_bool(i8* nonnull %tmp118)
  call void @chpl_here_free(i8* nonnull %tmp85, i64 %arg22, i32 %arg23)
  br label %bb119

bb119:                                            ; preds = %bb113, %bb115
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp43, i64 %arg22, i32 %arg23)
  call void @chpl__autoDestroy6(%_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp40, i64 %arg22, i32 %arg23)
  call void @setRootLocaleValues(%chpl_root_locale_accum* %tmp, %chpl_RootLocale_object* %arg, i64 %arg22, i32 %arg23)
  %tmp120 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %tmp, i64 0, i32 4, i32 0
  call void @atomic_destroy_int_least64_t(i64* nonnull %tmp120)
  %tmp121 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %tmp, i64 0, i32 3, i32 0
  call void @atomic_destroy_int_least64_t(i64* nonnull %tmp121)
  %tmp122 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %tmp, i64 0, i32 2, i32 0
  call void @atomic_destroy_int_least64_t(i64* nonnull %tmp122)
  %tmp123 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %tmp, i64 0, i32 1, i32 0
  call void @atomic_destroy_int_least64_t(i64* nonnull %tmp123)
  %tmp124 = getelementptr inbounds %chpl_root_locale_accum, %chpl_root_locale_accum* %tmp, i64 0, i32 0, i32 0
  call void @atomic_destroy_int_least64_t(i64* nonnull %tmp124)
  ret void
}

define internal void @coforall_fn11(%localesBarrier* nonnull %arg, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* nonnull %arg1, i64 %arg2, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %arg3, %chpl_RootLocale_object* %arg4, %chpl_root_locale_accum* nonnull %arg5, i64 %arg6, i32 %arg7) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = trunc i64 %arg2 to i32
  call void @chpl_buildLocaleID(i32 %tmp8, i32 -2, %struct.chpl_localeID_t* %tmp, i64 %arg6, i32 %arg7)
  call void @chpl_defaultDistInitPrivate(i64 %arg6, i32 %arg7)
  %tmp9 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg4, i64 0, i32 0, i32 0
  %tmp10 = call %chpl_LocaleModel_object* @_new10(%chpl_locale_object* %tmp9, i64 %arg6, i32 %arg7)
  %tmp11 = getelementptr inbounds %chpl_RootLocale_object, %chpl_RootLocale_object* %arg4, i64 0, i32 2, i32 1
  %tmp12 = load %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object*, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object** %tmp11, align 8, !tbaa !72
  %tmp13 = getelementptr inbounds %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object, %chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object* %tmp12, i64 0, i32 7
  %tmp14 = load %chpl_locale_object**, %chpl_locale_object*** %tmp13, align 8, !tbaa !213
  %tmp15 = getelementptr inbounds %chpl_locale_object*, %chpl_locale_object** %tmp14, i64 %arg2
  %tmp16 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %tmp10, i64 0, i32 0, i32 0
  store %chpl_locale_object* %tmp16, %chpl_locale_object** %tmp15, align 8, !tbaa !158
  call void @accum(%chpl_root_locale_accum* %arg5, %chpl_locale_object* %tmp16)
  call void @wait5(%localesBarrier* %arg, i64 %arg2, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %arg1, i64 %arg6, i32 %arg7)
  call void @chpl_rootLocaleInitPrivate(i64 %arg2, i64 %arg6, i32 %arg7)
  ret void
}

define internal void @wrapcoforall_fn11(%chpl__class_localscoforall_fn11_object* %arg) {
bb:
  %tmp = alloca %localesBarrier, align 8
  %tmp1 = alloca %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 8
  %tmp3 = load i32, i32* %tmp2, align 4, !tbaa !325
  %tmp4 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 7
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !324
  %tmp6 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 1, i32 0
  %tmp7 = load i32, i32* %tmp6, align 4, !tbaa !315
  %tmp8 = getelementptr inbounds %localesBarrier, %localesBarrier* %tmp, i64 0, i32 0
  store i32 %tmp7, i32* %tmp8, align 8, !tbaa !110
  %tmp9 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 2
  %tmp10 = load %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp9, align 8
  store %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t %tmp10, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp1, align 8
  %tmp11 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 6
  %tmp12 = load %chpl_root_locale_accum*, %chpl_root_locale_accum** %tmp11, align 8, !tbaa !323
  %tmp13 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 3
  %tmp14 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 4
  %tmp15 = getelementptr inbounds %chpl__class_localscoforall_fn11_object, %chpl__class_localscoforall_fn11_object* %arg, i64 0, i32 5
  %tmp16 = load i64, i64* %tmp13, align 8, !tbaa !320
  %tmp17 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !321
  %tmp18 = load %chpl_RootLocale_object*, %chpl_RootLocale_object** %tmp15, align 8, !tbaa !322
  call void @coforall_fn11(%localesBarrier* %tmp, %_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t* %tmp1, i64 %tmp16, %chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp17, %chpl_RootLocale_object* %tmp18, %chpl_root_locale_accum* %tmp12, i64 %tmp5, i32 %tmp3)
  %tmp19 = load %chpl_chpl___EndCount_atomic_int64_int64_t_object*, %chpl_chpl___EndCount_atomic_int64_int64_t_object** %tmp14, align 8, !tbaa !321
  call void @_downEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp19, %chpl_Error_object* null, i64 %tmp5, i32 %tmp3)
  ret void
}

define internal void @helpSetupLocaleFlat(%chpl_LocaleModel_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init34(%string* %tmp, i64 %arg2, i32 %arg3)
  %tmp10 = call i8* @chpl_nodeName()
  call void @_cast2(i8* %tmp10, %string* %tmp6, i64 %arg2, i32 %arg3)
  %tmp11 = load %string, %string* %tmp6, align 8
  store %string %tmp11, %string* %tmp5, align 8
  %tmp12 = bitcast %string* %tmp5 to i8*
  %tmp13 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp12)
  %tmp14 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp15 = sext i32 %tmp14 to i64
  call void @_cast4(i64 %tmp15, %string* %tmp8, i64 %arg2, i32 %arg3)
  %tmp16 = load %string, %string* %tmp8, align 8
  store %string %tmp16, %string* %tmp7, align 8
  %tmp17 = bitcast %string* %tmp7 to i8*
  %tmp18 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp17)
  call void @init35(%string* %tmp9, %string* %tmp5, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = load %string, %string* %tmp9, align 8
  call void @deinit23(%string* %tmp7, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp5, i64 %arg2, i32 %arg3)
  store %string %tmp19, %string* %tmp4, align 8
  call void @chpl___ASSIGN_2(%string* %tmp, %string* %tmp4, i64 %arg2, i32 %arg3)
  %tmp20 = call i64 @chpl_task_getCallStackSize()
  %tmp21 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 7
  store i64 %tmp20, i64* %tmp21, align 8, !tbaa !211
  %tmp22 = call i32 @chpl_topo_getNumCPUsPhysical(i1 true)
  %tmp23 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 4
  %tmp24 = sext i32 %tmp22 to i64
  store i64 %tmp24, i64* %tmp23, align 8, !tbaa !208
  %tmp25 = call i32 @chpl_topo_getNumCPUsPhysical(i1 false)
  %tmp26 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 5
  %tmp27 = sext i32 %tmp25 to i64
  store i64 %tmp27, i64* %tmp26, align 8, !tbaa !209
  %tmp28 = call i32 @chpl_topo_getNumCPUsLogical(i1 true)
  %tmp29 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 2
  %tmp30 = sext i32 %tmp28 to i64
  store i64 %tmp30, i64* %tmp29, align 8, !tbaa !206
  %tmp31 = call i32 @chpl_topo_getNumCPUsLogical(i1 false)
  %tmp32 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 3
  %tmp33 = sext i32 %tmp31 to i64
  store i64 %tmp33, i64* %tmp32, align 8, !tbaa !207
  %tmp34 = call i32 @chpl_task_getMaxPar()
  %tmp35 = getelementptr inbounds %chpl_LocaleModel_object, %chpl_LocaleModel_object* %arg, i64 0, i32 0, i32 0, i32 6
  %tmp36 = zext i32 %tmp34 to i64
  store i64 %tmp36, i64* %tmp35, align 8, !tbaa !210
  call void @deinit23(%string* %tmp4, i64 %arg2, i32 %arg3)
  call void @chpl___ASSIGN_2(%string* %arg1, %string* %tmp, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @chpl__deinit_LocaleTree() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__init_LocaleTree(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_LocaleTree_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @242, i64 0, i64 0), i64 10, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocaleTree_p, align 1, !tbaa !8
  tail call void @chpl__init_ChapelLocale(i64 %arg, i32 %arg1)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @242, i64 0, i64 0), i8* bitcast (void ()* @chpl__deinit_LocaleTree to i8*), i64 %arg, i32 %arg1)
  tail call void @init33(%chpl_localeTreeRecord* @chpl_localeTree, %chpl_locale_object* null, %chpl_locale_object* null)
  tail call void @chpl_initLocaleTree(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @init33(%chpl_localeTreeRecord* nonnull %arg, %chpl_locale_object* %arg1, %chpl_locale_object* %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_localeTreeRecord, %chpl_localeTreeRecord* %arg, i64 0, i32 0
  store %chpl_locale_object* %arg1, %chpl_locale_object** %tmp, align 8, !tbaa !326
  %tmp3 = getelementptr inbounds %chpl_localeTreeRecord, %chpl_localeTreeRecord* %arg, i64 0, i32 1
  store %chpl_locale_object* %arg2, %chpl_locale_object** %tmp3, align 8, !tbaa !328
  ret void
}

define internal void @chpl_initLocaleTree(i64 %arg, i32 %arg12) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  %tmp13 = alloca [1 x i64], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp14 = load i64, i64* @numLocales, align 8, !tbaa !138
  %tmp15 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* @LocaleSpace, align 16
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp15, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  %tmp16 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 1
  %tmp17 = load %chpl_DefaultRectangularDom_1_int64_t_F_object*, %chpl_DefaultRectangularDom_1_int64_t_F_object** %tmp16, align 8, !tbaa !41
  call void @createTuple_chpl(i64 0, [1 x i64]* %tmp13)
  %.elt = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp17, i64 0, i32 2, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %.elt3 = getelementptr inbounds %chpl_DefaultRectangularDom_1_int64_t_F_object, %chpl_DefaultRectangularDom_1_int64_t_F_object* %tmp17, i64 0, i32 2, i64 0, i32 1
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp18 = icmp sgt i64 %.unpack, %.unpack4
  br i1 %tmp18, label %bb59, label %.preheader

.preheader:                                       ; preds = %.split
  br label %bb19

bb19:                                             ; preds = %.preheader, %bb47
  %.02 = phi i64 [ %tmp20, %bb47 ], [ %.unpack, %.preheader ]
  %tmp20 = add nsw i64 %.02, 1
  %tmp21 = shl nsw i64 %tmp20, 1
  %tmp22 = icmp sgt i64 %tmp21, %tmp14
  br i1 %tmp22, label %bb47, label %bb23

bb23:                                             ; preds = %bb19
  %tmp24 = add nsw i64 %tmp21, -1
  %tmp25 = load %chpl_locale_object*, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  %tmp26 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp25, i64 0, i32 0, i32 0
  %tmp27 = load i32, i32* %tmp26, align 4, !tbaa !170
  %tmp28 = sext i32 %tmp27 to i64
  %tmp29 = mul nsw i64 %tmp28, 5
  %tmp30 = add nsw i64 %tmp29, 3
  %tmp31 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp30
  %tmp32 = bitcast void (i8*)** %tmp31 to %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)**
  %tmp33 = load %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)*, %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)** %tmp32, align 8
  %tmp34 = call %chpl_locale_object* %tmp33(%chpl_locale_object* %tmp25, i64 %tmp24, i64 %arg, i32 %arg12)
  %tmp35 = icmp slt i64 %tmp21, %tmp14
  br i1 %tmp35, label %bb36, label %bb47

bb36:                                             ; preds = %bb23
  %tmp37 = load %chpl_locale_object*, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  %tmp38 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp37, i64 0, i32 0, i32 0
  %tmp39 = load i32, i32* %tmp38, align 4, !tbaa !170
  %tmp40 = sext i32 %tmp39 to i64
  %tmp41 = mul nsw i64 %tmp40, 5
  %tmp42 = add nsw i64 %tmp41, 3
  %tmp43 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp42
  %tmp44 = bitcast void (i8*)** %tmp43 to %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)**
  %tmp45 = load %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)*, %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)** %tmp44, align 8
  %tmp46 = call %chpl_locale_object* %tmp45(%chpl_locale_object* %tmp37, i64 %tmp21, i64 %arg, i32 %arg12)
  br label %bb47

bb47:                                             ; preds = %bb23, %bb36, %bb19
  %.01 = phi %chpl_locale_object* [ null, %bb19 ], [ %tmp34, %bb36 ], [ %tmp34, %bb23 ]
  %.1 = phi %chpl_locale_object* [ null, %bb19 ], [ %tmp46, %bb36 ], [ null, %bb23 ]
  %tmp48 = load %chpl_locale_object*, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  %tmp49 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp48, i64 0, i32 0, i32 0
  %tmp50 = load i32, i32* %tmp49, align 4, !tbaa !170
  %tmp51 = sext i32 %tmp50 to i64
  %tmp52 = mul nsw i64 %tmp51, 5
  %tmp53 = add nsw i64 %tmp52, 3
  %tmp54 = getelementptr inbounds [291 x void (i8*)*], [291 x void (i8*)*]* @chpl_vmtable, i64 0, i64 %tmp53
  %tmp55 = bitcast void (i8*)** %tmp54 to %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)**
  %tmp56 = load %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)*, %chpl_locale_object* (%chpl_locale_object*, i64, i64, i32)** %tmp55, align 8
  %tmp57 = call %chpl_locale_object* %tmp56(%chpl_locale_object* %tmp48, i64 %.02, i64 %arg, i32 %arg12)
  store %chpl_locale_object* %.01, %chpl_locale_object** getelementptr inbounds (%chpl_localeTreeRecord, %chpl_localeTreeRecord* @chpl_localeTree, i64 0, i32 0), align 8, !tbaa !326
  store %chpl_locale_object* %.1, %chpl_locale_object** getelementptr inbounds (%chpl_localeTreeRecord, %chpl_localeTreeRecord* @chpl_localeTree, i64 0, i32 1), align 8, !tbaa !328
  %tmp58 = icmp slt i64 %.02, %.unpack4
  br i1 %tmp58, label %bb19, label %.loopexit

.loopexit:                                        ; preds = %bb47
  br label %bb59

bb59:                                             ; preds = %.loopexit, %.split
  ret void
}

define internal void @chpl__deinit_LocalesArray(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp2 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* @LocaleSpace, align 16
  store %_domain_DefaultRectangularDom_1_int64_t_F %tmp2, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  call void @chpl__autoDestroy3(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg, i32 %arg1)
  ret void
}

define internal void @chpl__init_LocalesArray(i64 %arg, i32 %arg3) {
bb:
  %tmp = alloca %_domain_DefaultRectangularDom_1_int64_t_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load i8, i8* @chpl__init_LocalesArray_p, align 1, !tbaa !2
  %tmp5 = icmp eq i8 %tmp4, 0
  br i1 %tmp5, label %bb6, label %bb31

bb6:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @238, i64 0, i64 0), i64 12, i64 %arg, i32 %arg3)
  %tmp7 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp8 = add i32 %tmp7, 1
  store i32 %tmp8, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_LocalesArray_p, align 1, !tbaa !8
  tail call void @chpl_addModule(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @238, i64 0, i64 0), i8* bitcast (void (i64, i32)* @chpl__deinit_LocalesArray to i8*), i64 %arg, i32 %arg3)
  tail call void @chpl_init_rootLocale(i64 %arg, i32 %arg3)
  %tmp9 = load %chpl_locale_object*, %chpl_locale_object** @rootLocale, align 8, !tbaa !158
  %tmp10 = icmp eq %chpl_locale_object* %tmp9, null
  br i1 %tmp10, label %bb18, label %bb11

bb11:                                             ; preds = %bb6
  %tmp12 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp9, i64 0, i32 0, i32 0
  %tmp13 = load i32, i32* %tmp12, align 4, !tbaa !170
  %tmp14 = icmp sgt i32 %tmp13, 54
  %tmp15 = icmp ult i32 %tmp13, 56
  %tmp16 = and i1 %tmp14, %tmp15
  %tmp17 = bitcast %chpl_locale_object* %tmp9 to %chpl_RootLocale_object*
  %.0 = select i1 %tmp16, %chpl_RootLocale_object* %tmp17, %chpl_RootLocale_object* null
  br label %bb18

bb18:                                             ; preds = %bb6, %bb11
  %.02 = phi %chpl_RootLocale_object* [ %.0, %bb11 ], [ null, %bb6 ]
  %tmp19 = tail call %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* @getDefaultLocaleArray(%chpl_RootLocale_object* %.02)
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp19, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t** @call_tmp, align 8, !tbaa !214
  store %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp19, %_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t** @Locales, align 8, !tbaa !214
  call void @_dom(%_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t* %tmp19, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp)
  %tmp20 = getelementptr inbounds %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 0, i32 2
  %tmp21 = load i8, i8* %tmp20, align 8, !tbaa !42
  %tmp22 = icmp eq i8 %tmp21, 0
  br i1 %tmp22, label %bb25, label %bb23

bb23:                                             ; preds = %bb18
  %tmp24 = call %_domain_DefaultRectangularDom_1_int64_t_F @chpl__initCopy2(%_domain_DefaultRectangularDom_1_int64_t_F* %tmp, i64 %arg, i32 %arg3)
  br label %bb27

bb25:                                             ; preds = %bb18
  %tmp26 = load %_domain_DefaultRectangularDom_1_int64_t_F, %_domain_DefaultRectangularDom_1_int64_t_F* %tmp, align 8
  br label %bb27

bb27:                                             ; preds = %bb25, %bb23
  %.01 = phi %_domain_DefaultRectangularDom_1_int64_t_F [ %tmp24, %bb23 ], [ %tmp26, %bb25 ]
  store %_domain_DefaultRectangularDom_1_int64_t_F %.01, %_domain_DefaultRectangularDom_1_int64_t_F* @LocaleSpace, align 16
  %tmp28 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%_domain_DefaultRectangularDom_1_int64_t_F* @LocaleSpace to i8*))
  %tmp29 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp30 = add i32 %tmp29, -1
  store i32 %tmp30, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb31

bb31:                                             ; preds = %.split, %bb27
  ret void
}

define internal void @chpl__init_MemConsistency(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_MemConsistency_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @229, i64 0, i64 0), i64 14, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_MemConsistency_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_MemTracking(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit23(%string* @memLog, i64 %arg, i32 %arg1)
  ret void
}

define internal void @chpl__init_MemTracking(i64 %arg, i32 %arg9) {
bb:
  %tmp = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp15 = load i8, i8* @chpl__init_MemTracking_p, align 1, !tbaa !2
  %tmp16 = icmp eq i8 %tmp15, 0
  br i1 %tmp16, label %bb17, label %bb80

bb17:                                             ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @246, i64 0, i64 0), i64 11, i64 %arg, i32 %arg9)
  %tmp18 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp19 = add i32 %tmp18, 1
  store i32 %tmp19, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_MemTracking_p, align 1, !tbaa !8
  tail call void @chpl_addModule(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @246, i64 0, i64 0), i8* bitcast (void (i64, i32)* @chpl__deinit_MemTracking to i8*), i64 %arg, i32 %arg9)
  %tmp20 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @128, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp20, label %bb21, label %bb24

bb21:                                             ; preds = %bb17
  %tmp22 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @128, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp23 = tail call i8 @_command_line_cast4(i8* %tmp22, i64 %arg, i32 %arg9)
  br label %bb24

bb24:                                             ; preds = %bb17, %bb21
  %.0 = phi i8 [ %tmp23, %bb21 ], [ 0, %bb17 ]
  store i8 %.0, i8* @memTrack, align 1, !tbaa !2
  %tmp25 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @memTrack)
  %tmp26 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @129, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp26, label %bb27, label %bb30

bb27:                                             ; preds = %bb24
  %tmp28 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @129, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp29 = tail call i8 @_command_line_cast5(i8* %tmp28, i64 %arg, i32 %arg9)
  br label %bb30

bb30:                                             ; preds = %bb24, %bb27
  %.02 = phi i8 [ %tmp29, %bb27 ], [ 0, %bb24 ]
  store i8 %.02, i8* @memStats, align 1, !tbaa !2
  %tmp31 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @memStats)
  %tmp32 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @130, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp32, label %bb33, label %bb36

bb33:                                             ; preds = %bb30
  %tmp34 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @130, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp35 = tail call i8 @_command_line_cast12(i8* %tmp34, i64 %arg, i32 %arg9)
  br label %bb36

bb36:                                             ; preds = %bb30, %bb33
  %.04 = phi i8 [ %tmp35, %bb33 ], [ 0, %bb30 ]
  store i8 %.04, i8* @memLeaksByType, align 1, !tbaa !2
  %tmp37 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @memLeaksByType)
  %tmp38 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @131, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp38, label %bb39, label %bb42

bb39:                                             ; preds = %bb36
  %tmp40 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @131, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp41 = tail call i8 @_command_line_cast3(i8* %tmp40, i64 %arg, i32 %arg9)
  br label %bb42

bb42:                                             ; preds = %bb36, %bb39
  %.08 = phi i8 [ %tmp41, %bb39 ], [ 0, %bb36 ]
  store i8 %.08, i8* @memLeaks, align 1, !tbaa !2
  %tmp43 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @memLeaks)
  %tmp44 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @132, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp44, label %bb45, label %bb48

bb45:                                             ; preds = %bb42
  %tmp46 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @132, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp47 = tail call i64 @_command_line_cast6(i8* %tmp46, i64 %arg, i32 %arg9)
  br label %bb48

bb48:                                             ; preds = %bb42, %bb45
  %.07 = phi i64 [ %tmp47, %bb45 ], [ 0, %bb42 ]
  store i64 %.07, i64* @memMax, align 8, !tbaa !127
  %tmp49 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @memMax to i8*))
  %tmp50 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @134, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp50, label %bb51, label %bb54

bb51:                                             ; preds = %bb48
  %tmp52 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @134, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp53 = tail call i64 @_command_line_cast7(i8* %tmp52, i64 %arg, i32 %arg9)
  br label %bb54

bb54:                                             ; preds = %bb48, %bb51
  %.06 = phi i64 [ %tmp53, %bb51 ], [ 0, %bb48 ]
  store i64 %.06, i64* @memThreshold, align 8, !tbaa !127
  %tmp55 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @memThreshold to i8*))
  %tmp56 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @135, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp56, label %bb58, label %bb57

bb57:                                             ; preds = %bb54
  call void @init34(%string* %tmp, i64 %arg, i32 %arg9)
  br label %bb60

bb58:                                             ; preds = %bb54
  %tmp59 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @135, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  call void @_command_line_cast8(i8* %tmp59, %string* %tmp10, i64 %arg, i32 %arg9)
  br label %bb60

bb60:                                             ; preds = %bb58, %bb57
  %.05.in = phi %string* [ %tmp, %bb57 ], [ %tmp10, %bb58 ]
  %.05 = load %string, %string* %.05.in, align 8
  store %string %.05, %string* @memLog, align 16
  %tmp61 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @memLog to i8*))
  %tmp62 = call i1 @chpl_config_has_value(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @137, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp62, label %bb64, label %bb63

bb63:                                             ; preds = %bb60
  call void @init34(%string* %tmp11, i64 %arg, i32 %arg9)
  br label %bb66

bb64:                                             ; preds = %bb60
  %tmp65 = call i8* @chpl_config_get_value(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @137, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  call void @_command_line_cast9(i8* %tmp65, %string* %tmp12, i64 %arg, i32 %arg9)
  br label %bb66

bb66:                                             ; preds = %bb64, %bb63
  %.03.in = phi %string* [ %tmp11, %bb63 ], [ %tmp12, %bb64 ]
  %.03 = load %string, %string* %.03.in, align 8
  store %string %.03, %string* @memLeaksLog, align 16
  %tmp67 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @memLeaksLog to i8*))
  %tmp68 = call i1 @chpl_config_has_value(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @138, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp68, label %bb70, label %bb69

bb69:                                             ; preds = %bb66
  call void @init34(%string* %tmp13, i64 %arg, i32 %arg9)
  br label %bb72

bb70:                                             ; preds = %bb66
  %tmp71 = call i8* @chpl_config_get_value(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @138, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  call void @_command_line_cast11(i8* %tmp71, %string* %tmp14, i64 %arg, i32 %arg9)
  br label %bb72

bb72:                                             ; preds = %bb70, %bb69
  %.01.in = phi %string* [ %tmp13, %bb69 ], [ %tmp14, %bb70 ]
  %.01 = load %string, %string* %.01.in, align 8
  store %string %.01, %string* @memLeaksByDesc, align 16
  %tmp73 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* bitcast (%string* @memLeaksByDesc to i8*))
  %tmp74 = load i64, i64* @memMax, align 8, !tbaa !127
  store i64 %tmp74, i64* @cMemMax, align 8, !tbaa !127
  %tmp75 = call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @cMemMax to i8*))
  %tmp76 = load i64, i64* @memThreshold, align 8, !tbaa !127
  store i64 %tmp76, i64* @cMemThreshold, align 8, !tbaa !127
  %tmp77 = call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @cMemThreshold to i8*))
  %tmp78 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp79 = add i32 %tmp78, -1
  store i32 %tmp79, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb80

bb80:                                             ; preds = %.split, %bb72
  ret void
}

define void @chpl_memTracking_returnConfigVals(i8* nonnull %arg, i8* nonnull %arg1, i8* nonnull %arg2, i8** nonnull %arg3, i8* nonnull %arg4, i64* nonnull %arg5, i64* nonnull %arg6, i8** nonnull %arg7, i8** nonnull %arg8) {
bb:
  %tmp = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %struct.chpl_localeID_t, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp16 = load %string, %string* @memLeaksLog, align 16
  store %string %tmp16, %string* %tmp, align 8
  %tmp17 = load %string, %string* @memLog, align 16
  store %string %tmp17, %string* %tmp9, align 8
  %tmp18 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp18, %string* %tmp10, align 8
  %tmp19 = load %string, %string* @memLeaksByDesc, align 16
  store %string %tmp19, %string* %tmp11, align 8
  %tmp20 = load i64, i64* @cMemThreshold, align 8, !tbaa !127
  %tmp21 = load i64, i64* @cMemMax, align 8, !tbaa !127
  %tmp22 = load i8, i8* @memLeaks, align 1, !tbaa !2
  %tmp23 = load i8, i8* @memLeaksByType, align 1, !tbaa !2
  %tmp24 = load i8, i8* @memStats, align 1, !tbaa !2
  %tmp25 = load i8, i8* @memTrack, align 1, !tbaa !2
  store i8 %tmp25, i8* %arg, align 1, !tbaa !2
  store i8 %tmp24, i8* %arg1, align 1, !tbaa !2
  store i8 %tmp23, i8* %arg2, align 1, !tbaa !2
  store i8 %tmp22, i8* %arg4, align 1, !tbaa !2
  store i64 %tmp21, i64* %arg5, align 8, !tbaa !127
  store i64 %tmp20, i64* %arg6, align 8, !tbaa !127
  %tmp26 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp27 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp26, i32 -2)
  %tmp28 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp12, i64 0, i32 0
  store i32 %tmp27, i32* %tmp28, align 8, !tbaa !110
  %tmp29 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp12, i64 89, i32 41)
  %tmp30 = call i64 @id(%chpl_locale_object* %tmp29, i64 89, i32 41)
  %tmp31 = icmp eq i64 %tmp30, 0
  br i1 %tmp31, label %bb83, label %bb32

bb32:                                             ; preds = %.split
  %tmp33 = getelementptr inbounds %string, %string* %tmp11, i64 0, i32 0
  %tmp34 = load i64, i64* %tmp33, align 8, !tbaa !175
  %tmp35 = icmp eq i64 %tmp34, 0
  br i1 %tmp35, label %bb48, label %bb36

bb36:                                             ; preds = %bb32
  call void @init35(%string* %tmp13, %string* %tmp11, i8 1, i64 91, i32 41)
  %tmp37 = getelementptr inbounds %string, %string* %tmp13, i64 0, i32 3
  store i8 0, i8* %tmp37, align 8, !tbaa !329
  %tmp38 = getelementptr inbounds %string, %string* %tmp13, i64 0, i32 4
  %tmp39 = load i32, i32* %tmp38, align 4, !tbaa !178
  %tmp40 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp41 = icmp eq i32 %tmp39, %tmp40
  br i1 %tmp41, label %bb43, label %bb42

bb42:                                             ; preds = %bb36
  call void @halt(%string* %tmp10, i64 94, i32 41)
  br label %bb43

bb43:                                             ; preds = %bb36, %bb42
  %tmp44 = getelementptr inbounds %string, %string* %tmp13, i64 0, i32 2
  %tmp45 = bitcast i8** %tmp44 to i64*
  %tmp46 = load i64, i64* %tmp45, align 8, !tbaa !179
  %tmp47 = bitcast i8** %arg3 to i64*
  store i64 %tmp46, i64* %tmp47, align 8, !tbaa !227
  call void @deinit23(%string* %tmp13, i64 91, i32 41)
  br label %bb49

bb48:                                             ; preds = %bb32
  store i8* null, i8** %arg3, align 8, !tbaa !227
  br label %bb49

bb49:                                             ; preds = %bb43, %bb48
  %tmp50 = getelementptr inbounds %string, %string* %tmp9, i64 0, i32 0
  %tmp51 = load i64, i64* %tmp50, align 8, !tbaa !175
  %tmp52 = icmp eq i64 %tmp51, 0
  br i1 %tmp52, label %bb65, label %bb53

bb53:                                             ; preds = %bb49
  call void @init35(%string* %tmp14, %string* %tmp9, i8 1, i64 100, i32 41)
  %tmp54 = getelementptr inbounds %string, %string* %tmp14, i64 0, i32 3
  store i8 0, i8* %tmp54, align 8, !tbaa !329
  %tmp55 = getelementptr inbounds %string, %string* %tmp14, i64 0, i32 4
  %tmp56 = load i32, i32* %tmp55, align 4, !tbaa !178
  %tmp57 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp58 = icmp eq i32 %tmp56, %tmp57
  br i1 %tmp58, label %bb60, label %bb59

bb59:                                             ; preds = %bb53
  call void @halt(%string* %tmp10, i64 103, i32 41)
  br label %bb60

bb60:                                             ; preds = %bb53, %bb59
  %tmp61 = getelementptr inbounds %string, %string* %tmp14, i64 0, i32 2
  %tmp62 = bitcast i8** %tmp61 to i64*
  %tmp63 = load i64, i64* %tmp62, align 8, !tbaa !179
  %tmp64 = bitcast i8** %arg7 to i64*
  store i64 %tmp63, i64* %tmp64, align 8, !tbaa !227
  call void @deinit23(%string* %tmp14, i64 100, i32 41)
  br label %bb66

bb65:                                             ; preds = %bb49
  store i8* null, i8** %arg7, align 8, !tbaa !227
  br label %bb66

bb66:                                             ; preds = %bb60, %bb65
  %tmp67 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 0
  %tmp68 = load i64, i64* %tmp67, align 8, !tbaa !175
  %tmp69 = icmp eq i64 %tmp68, 0
  br i1 %tmp69, label %bb82, label %bb70

bb70:                                             ; preds = %bb66
  call void @init35(%string* %tmp15, %string* %tmp, i8 1, i64 109, i32 41)
  %tmp71 = getelementptr inbounds %string, %string* %tmp15, i64 0, i32 3
  store i8 0, i8* %tmp71, align 8, !tbaa !329
  %tmp72 = getelementptr inbounds %string, %string* %tmp15, i64 0, i32 4
  %tmp73 = load i32, i32* %tmp72, align 4, !tbaa !178
  %tmp74 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp75 = icmp eq i32 %tmp73, %tmp74
  br i1 %tmp75, label %bb77, label %bb76

bb76:                                             ; preds = %bb70
  call void @halt(%string* %tmp10, i64 112, i32 41)
  br label %bb77

bb77:                                             ; preds = %bb70, %bb76
  %tmp78 = getelementptr inbounds %string, %string* %tmp15, i64 0, i32 2
  %tmp79 = bitcast i8** %tmp78 to i64*
  %tmp80 = load i64, i64* %tmp79, align 8, !tbaa !179
  %tmp81 = bitcast i8** %arg8 to i64*
  store i64 %tmp80, i64* %tmp81, align 8, !tbaa !227
  call void @deinit23(%string* %tmp15, i64 109, i32 41)
  br label %bb114

bb82:                                             ; preds = %bb66
  store i8* null, i8** %arg8, align 8, !tbaa !227
  br label %bb114

bb83:                                             ; preds = %.split
  %tmp84 = getelementptr inbounds %string, %string* %tmp11, i64 0, i32 4
  %tmp85 = load i32, i32* %tmp84, align 4, !tbaa !178
  %tmp86 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp87 = icmp eq i32 %tmp85, %tmp86
  br i1 %tmp87, label %bb89, label %bb88

bb88:                                             ; preds = %bb83
  call void @halt(%string* %tmp10, i64 118, i32 41)
  br label %bb89

bb89:                                             ; preds = %bb83, %bb88
  %tmp90 = getelementptr inbounds %string, %string* %tmp11, i64 0, i32 2
  %tmp91 = bitcast i8** %tmp90 to i64*
  %tmp92 = load i64, i64* %tmp91, align 8, !tbaa !179
  %tmp93 = bitcast i8** %arg3 to i64*
  store i64 %tmp92, i64* %tmp93, align 8, !tbaa !227
  %tmp94 = getelementptr inbounds %string, %string* %tmp9, i64 0, i32 4
  %tmp95 = load i32, i32* %tmp94, align 4, !tbaa !178
  %tmp96 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp97 = icmp eq i32 %tmp95, %tmp96
  br i1 %tmp97, label %bb99, label %bb98

bb98:                                             ; preds = %bb89
  call void @halt(%string* %tmp10, i64 119, i32 41)
  br label %bb99

bb99:                                             ; preds = %bb89, %bb98
  %tmp100 = getelementptr inbounds %string, %string* %tmp9, i64 0, i32 2
  %tmp101 = bitcast i8** %tmp100 to i64*
  %tmp102 = load i64, i64* %tmp101, align 8, !tbaa !179
  %tmp103 = bitcast i8** %arg7 to i64*
  store i64 %tmp102, i64* %tmp103, align 8, !tbaa !227
  %tmp104 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 4
  %tmp105 = load i32, i32* %tmp104, align 4, !tbaa !178
  %tmp106 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp107 = icmp eq i32 %tmp105, %tmp106
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb99
  call void @halt(%string* %tmp10, i64 120, i32 41)
  br label %bb109

bb109:                                            ; preds = %bb99, %bb108
  %tmp110 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 2
  %tmp111 = bitcast i8** %tmp110 to i64*
  %tmp112 = load i64, i64* %tmp111, align 8, !tbaa !179
  %tmp113 = bitcast i8** %arg8 to i64*
  store i64 %tmp112, i64* %tmp113, align 8, !tbaa !227
  br label %bb114

bb114:                                            ; preds = %bb77, %bb82, %bb109
  ret void
}

define void @chpl__init_PrintModuleInitOrder(i64 %arg, i32 %arg1) #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_PrintModuleInitOrder_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb17

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @222, i64 0, i64 0), i64 20, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_PrintModuleInitOrder_p, align 1, !tbaa !8
  %tmp6 = tail call i1 @chpl_config_has_value(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @121, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  br i1 %tmp6, label %bb7, label %bb10

bb7:                                              ; preds = %bb3
  %tmp8 = tail call i8* @chpl_config_get_value(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @121, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  %tmp9 = tail call i8 @_command_line_cast14(i8* %tmp8, i64 %arg, i32 %arg1)
  br label %bb10

bb10:                                             ; preds = %bb3, %bb7
  %.0 = phi i8 [ %tmp9, %bb7 ], [ 0, %bb3 ]
  store i8 %.0, i8* @printModuleInitOrder, align 1, !tbaa !2
  %tmp11 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @printModuleInitOrder)
  store i32 2, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp12 = icmp eq i8 %.0, 0
  br i1 %tmp12, label %bb14, label %bb13

bb13:                                             ; preds = %bb10
  tail call void @initPrint()
  br label %bb14

bb14:                                             ; preds = %bb10, %bb13
  %tmp15 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp16 = add i32 %tmp15, -1
  store i32 %tmp16, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb17

bb17:                                             ; preds = %.split, %bb14
  ret void
}

define internal void @printModuleInit(i8* %arg, i8* %arg1, i64 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @printModuleInitOrder, align 1, !tbaa !2
  %tmp5 = icmp eq i8 %tmp, 0
  br i1 %tmp5, label %bb12, label %bb6

bb6:                                              ; preds = %.split
  %tmp7 = trunc i64 %arg2 to i32
  %tmp8 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp9 = add i32 %tmp7, 2
  %tmp10 = add i32 %tmp9, %tmp8
  %tmp11 = tail call i32 (i8*, ...) @printf(i8* %arg, i32 %tmp10, i8* %arg1)
  br label %bb12

bb12:                                             ; preds = %.split, %bb6
  ret void
}

define internal void @initPrint() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str, i64 0, i64 0))
  ret void
}

define internal void @chpl__init_String(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_String_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb18

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @226, i64 0, i64 0), i64 6, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_String_p, align 1, !tbaa !8
  tail call void @chpl__init_CString(i64 %arg, i32 %arg1)
  tail call void @chpl__init_SysCTypes(i64 %arg, i32 %arg1)
  tail call void @chpl__init_StringCasts(i64 %arg, i32 %arg1)
  store i8 65, i8* @uint_A, align 1, !tbaa !8
  %tmp6 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_A)
  store i8 90, i8* @uint_Z, align 1, !tbaa !8
  %tmp7 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_Z)
  store i8 97, i8* @uint_a, align 1, !tbaa !8
  %tmp8 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_a)
  store i8 122, i8* @uint_z, align 1, !tbaa !8
  %tmp9 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_z)
  store i8 48, i8* @uint_0, align 1, !tbaa !8
  %tmp10 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_0)
  store i8 57, i8* @uint_9, align 1, !tbaa !8
  %tmp11 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_9)
  store i8 32, i8* @uint_space, align 1, !tbaa !8
  %tmp12 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_space)
  store i8 9, i8* @uint_tab, align 1, !tbaa !8
  %tmp13 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_tab)
  store i8 10, i8* @uint_newline, align 1, !tbaa !8
  %tmp14 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_newline)
  store i8 13, i8* @uint_return, align 1, !tbaa !8
  %tmp15 = tail call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @uint_return)
  %tmp16 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp17 = add i32 %tmp16, -1
  store i32 %tmp17, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb18

bb18:                                             ; preds = %.split, %bb3
  ret void
}

define internal i16 @offset_STR_COPY_DATA() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i16 @chpl_memhook_md_num()
  %tmp1 = sub i16 18, %tmp
  ret i16 %tmp1
}

define internal i16 @offset_STR_COPY_REMOTE() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i16 @chpl_memhook_md_num()
  %tmp1 = sub i16 19, %tmp
  ret i16 %tmp1
}

define internal i8* @copyRemoteBuffer(i64 %arg, i8* %arg1, i64 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = add nsw i64 %arg2, 1
  %tmp5 = tail call i16 @offset_STR_COPY_REMOTE()
  %tmp6 = tail call i8* @chpl_here_alloc(i64 %tmp, i16 %tmp5, i64 %arg3, i32 %arg4)
  %tmp7 = trunc i64 %arg to i32
  %tmp8 = trunc i64 %arg3 to i32
  tail call void @chpl_gen_comm_get(i8* %tmp6, i32 %tmp7, i8* %arg1, i64 %arg2, i32 -1, i32 0, i32 %tmp8, i32 %arg4)
  %tmp9 = getelementptr inbounds i8, i8* %tmp6, i64 %arg2
  store i8 0, i8* %tmp9, align 1, !tbaa !8
  ret i8* %tmp6
}

define internal void @init34(%string* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  store i64 0, i64* %tmp, align 8, !tbaa !175
  %tmp3 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 0, i64* %tmp3, align 8, !tbaa !330
  %tmp4 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  store i8* null, i8** %tmp4, align 8, !tbaa !179
  %tmp5 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  store i8 1, i8* %tmp5, align 1, !tbaa !329
  %tmp6 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp7 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  store i32 %tmp7, i32* %tmp6, align 4, !tbaa !178
  ret void
}

define internal void @init35(%string* nonnull %arg, %string* nonnull %arg1, i8 %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %string, %string* %arg1, i64 0, i32 0
  %tmp5 = load i64, i64* %tmp, align 8, !tbaa !175
  %tmp6 = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  store i64 0, i64* %tmp6, align 8, !tbaa !175
  %tmp7 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 0, i64* %tmp7, align 8, !tbaa !330
  %tmp8 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  store i8* null, i8** %tmp8, align 8, !tbaa !179
  %tmp9 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  store i8 %arg2, i8* %tmp9, align 1, !tbaa !329
  %tmp10 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp11 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  store i32 %tmp11, i32* %tmp10, align 4, !tbaa !178
  %tmp12 = icmp eq i64 %tmp5, 0
  br i1 %tmp12, label %bb33, label %bb13

bb13:                                             ; preds = %.split
  store i64 %tmp5, i64* %tmp6, align 8, !tbaa !175
  %tmp14 = icmp eq i8 %arg2, 0
  br i1 %tmp14, label %bb25, label %bb15

bb15:                                             ; preds = %bb13
  %tmp16 = add nsw i64 %tmp5, 1
  %tmp17 = tail call i64 @chpl_here_good_alloc_size(i64 %tmp16, i64 %arg3, i32 %arg4)
  %tmp18 = tail call i16 @offset_STR_COPY_DATA()
  %tmp19 = tail call i8* @chpl_here_alloc(i64 %tmp17, i16 %tmp18, i64 %arg3, i32 %arg4)
  store i8* %tmp19, i8** %tmp8, align 8, !tbaa !179
  %tmp20 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 2
  %tmp21 = load i8*, i8** %tmp20, align 8, !tbaa !179
  %tmp22 = load i64, i64* %tmp, align 8, !tbaa !175
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp19, i8* align 1 %tmp21, i64 %tmp22, i1 false)
  %tmp23 = load i8*, i8** %tmp8, align 8, !tbaa !179
  %tmp24 = getelementptr inbounds i8, i8* %tmp23, i64 %tmp5
  store i8 0, i8* %tmp24, align 1, !tbaa !8
  br label %bb32

bb25:                                             ; preds = %bb13
  %tmp26 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 2
  %tmp27 = bitcast i8** %tmp26 to i64*
  %tmp28 = load i64, i64* %tmp27, align 8, !tbaa !179
  %tmp29 = bitcast i8** %tmp8 to i64*
  store i64 %tmp28, i64* %tmp29, align 8, !tbaa !179
  %tmp30 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 1
  %tmp31 = load i64, i64* %tmp30, align 8, !tbaa !330
  br label %bb32

bb32:                                             ; preds = %bb25, %bb15
  %storemerge = phi i64 [ %tmp17, %bb15 ], [ %tmp31, %bb25 ]
  store i64 %storemerge, i64* %tmp7, align 8, !tbaa !330
  br label %bb33

bb33:                                             ; preds = %.split, %bb32
  ret void
}

define internal void @init36(%string* nonnull %arg, i8* %arg1, i64 %arg2, i8 %arg3, i8 %arg4, i64 %arg5, i32 %arg6) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  store i64 0, i64* %tmp, align 8, !tbaa !175
  %tmp7 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 0, i64* %tmp7, align 8, !tbaa !330
  %tmp8 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  store i8* null, i8** %tmp8, align 8, !tbaa !179
  %tmp9 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  store i8 %arg3, i8* %tmp9, align 1, !tbaa !329
  %tmp10 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp11 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  store i32 %tmp11, i32* %tmp10, align 4, !tbaa !178
  %tmp12 = add nsw i64 %arg2, 1
  tail call void @reinitString(%string* %arg, i8* %arg1, i64 %arg2, i64 %tmp12, i8 %arg4, i64 %arg5, i32 %arg6)
  ret void
}

define internal void @init37(%string* nonnull %arg, i8* %arg1, i64 %arg2, i64 %arg3, i8 %arg4, i8 %arg5, i64 %arg6, i32 %arg7) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  store i64 0, i64* %tmp, align 8, !tbaa !175
  %tmp8 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 0, i64* %tmp8, align 8, !tbaa !330
  %tmp9 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  store i8* null, i8** %tmp9, align 8, !tbaa !179
  %tmp10 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  store i8 %arg4, i8* %tmp10, align 1, !tbaa !329
  %tmp11 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp12 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  store i32 %tmp12, i32* %tmp11, align 4, !tbaa !178
  tail call void @reinitString(%string* %arg, i8* %arg1, i64 %arg2, i64 %arg3, i8 %arg5, i64 %arg6, i32 %arg7)
  ret void
}

define internal void @deinit23(%string* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  %tmp4 = load i8, i8* %tmp3, align 1, !tbaa !329
  %tmp5 = icmp eq i8 %tmp4, 0
  br i1 %tmp5, label %bb10, label %bb6

bb6:                                              ; preds = %.split
  %tmp7 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp8 = load i8*, i8** %tmp7, align 8, !tbaa !179
  %tmp9 = icmp eq i8* %tmp8, null
  br label %bb10

bb10:                                             ; preds = %bb6, %.split
  %.0 = phi i1 [ %tmp9, %bb6 ], [ true, %.split ]
  br i1 %.0, label %bb16, label %bb11

bb11:                                             ; preds = %bb10
  %tmp12 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp13 = load i32, i32* %tmp12, align 4, !tbaa !178
  call void @chpl_buildLocaleID(i32 %tmp13, i32 -2, %struct.chpl_localeID_t* %tmp, i64 %arg1, i32 %arg2)
  %tmp14 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp15 = load i8*, i8** %tmp14, align 8, !tbaa !179
  call void @chpl_here_free(i8* %tmp15, i64 %arg1, i32 %arg2)
  br label %bb16

bb16:                                             ; preds = %bb10, %bb11
  ret void
}

define internal void @reinitString(%string* nonnull %arg, i8* %arg8, i64 %arg9, i64 %arg10, i8 %arg11, i64 %arg12, i32 %arg13) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  %tmp14 = load i64, i64* %tmp, align 8, !tbaa !175
  %tmp15 = icmp eq i64 %tmp14, 0
  %tmp16 = icmp eq i8* %arg8, null
  %narrow = and i1 %tmp15, %tmp16
  br i1 %narrow, label %bb70, label %bb17

bb17:                                             ; preds = %.split
  %tmp18 = icmp eq i64 %arg9, 0
  br i1 %tmp18, label %bb55, label %bb19

bb19:                                             ; preds = %bb17
  %tmp20 = icmp eq i8 %arg11, 0
  %tmp21 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  %tmp22 = load i8, i8* %tmp21, align 1, !tbaa !329
  %tmp23 = icmp eq i8 %tmp22, 0
  br i1 %tmp20, label %bb48, label %bb24

bb24:                                             ; preds = %bb19
  br i1 %tmp23, label %bb29, label %bb25

bb25:                                             ; preds = %bb24
  %tmp26 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  %tmp27 = load i64, i64* %tmp26, align 8, !tbaa !330
  %tmp28 = icmp sgt i64 %tmp27, %arg9
  br label %bb29

bb29:                                             ; preds = %bb25, %bb24
  %.03 = phi i1 [ %tmp28, %bb25 ], [ false, %bb24 ]
  br i1 %.03, label %bb43, label %bb30

bb30:                                             ; preds = %bb29
  %tmp31 = icmp eq i8 %tmp22, 0
  %tmp32 = or i1 %tmp15, %tmp31
  br i1 %tmp32, label %bb36, label %bb33

bb33:                                             ; preds = %bb30
  %tmp34 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp35 = load i8*, i8** %tmp34, align 8, !tbaa !179
  tail call void @chpl_here_free(i8* %tmp35, i64 %arg12, i32 %arg13)
  br label %bb36

bb36:                                             ; preds = %bb30, %bb33
  %tmp37 = add nsw i64 %arg9, 1
  %tmp38 = tail call i64 @chpl_here_good_alloc_size(i64 %tmp37, i64 %arg12, i32 %arg13)
  %tmp39 = tail call i16 @offset_STR_COPY_DATA()
  %tmp40 = tail call i8* @chpl_here_alloc(i64 %tmp38, i16 %tmp39, i64 %arg12, i32 %arg13)
  %tmp41 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  store i8* %tmp40, i8** %tmp41, align 8, !tbaa !179
  %tmp42 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 %tmp38, i64* %tmp42, align 8, !tbaa !330
  store i8 1, i8* %tmp21, align 1, !tbaa !329
  br label %bb43

bb43:                                             ; preds = %bb29, %bb36
  %tmp44 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp45 = load i8*, i8** %tmp44, align 8, !tbaa !179
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %tmp45, i8* align 1 %arg8, i64 %arg9, i1 false)
  %tmp46 = load i8*, i8** %tmp44, align 8, !tbaa !179
  %tmp47 = getelementptr inbounds i8, i8* %tmp46, i64 %arg9
  store i8 0, i8* %tmp47, align 1, !tbaa !8
  br label %bb69

bb48:                                             ; preds = %bb19
  %narrow6.demorgan = or i1 %tmp23, %tmp15
  br i1 %narrow6.demorgan, label %bb52, label %bb49

bb49:                                             ; preds = %bb48
  %tmp50 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp51 = load i8*, i8** %tmp50, align 8, !tbaa !179
  tail call void @chpl_here_free(i8* %tmp51, i64 %arg12, i32 %arg13)
  br label %bb52

bb52:                                             ; preds = %bb48, %bb49
  %tmp53 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  store i8* %arg8, i8** %tmp53, align 8, !tbaa !179
  %tmp54 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 %arg10, i64* %tmp54, align 8, !tbaa !330
  br label %bb69

bb55:                                             ; preds = %bb17
  %tmp56 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  %tmp57 = load i8, i8* %tmp56, align 1, !tbaa !329
  %tmp58 = icmp eq i8 %tmp57, 0
  %tmp59 = or i1 %tmp15, %tmp58
  br i1 %tmp59, label %bb63, label %bb60

bb60:                                             ; preds = %bb55
  %tmp61 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp62 = load i8*, i8** %tmp61, align 8, !tbaa !179
  tail call void @chpl_here_free(i8* %tmp62, i64 %arg12, i32 %arg13)
  br label %bb63

bb63:                                             ; preds = %bb55, %bb60
  %tmp64 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  store i64 0, i64* %tmp64, align 8, !tbaa !330
  %tmp65 = icmp eq i8 %arg11, 0
  %tmp66 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  br i1 %tmp65, label %bb68, label %bb67

bb67:                                             ; preds = %bb63
  store i8* null, i8** %tmp66, align 8, !tbaa !179
  br label %bb69

bb68:                                             ; preds = %bb63
  store i8* %arg8, i8** %tmp66, align 8, !tbaa !179
  br label %bb69

bb69:                                             ; preds = %bb67, %bb68, %bb43, %bb52
  store i64 %arg9, i64* %tmp, align 8, !tbaa !175
  br label %bb70

bb70:                                             ; preds = %.split, %bb69
  ret void
}

define internal void @_getView(%string* nonnull %arg, %range_int64_t_bounded_F %arg14, %range_int64_t_bounded_F* nonnull %arg15, i64 %arg16, i32 %arg17) {
bb:
  %tmp = alloca %range_int64_t_boundedLow_F, align 8
  %tmp18 = alloca %range_int64_t_bounded_F, align 8
  %tmp19 = alloca %range_int64_t_bounded_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @chpl_build_low_bounded_range(i64 1, %range_int64_t_boundedLow_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp20 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp21 = insertvalue %range_int64_t_boundedLow_F %tmp20, i64 %.unpack2, 1
  %tmp22 = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  %tmp23 = load i64, i64* %tmp22, align 8, !tbaa !175
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp21, i64 %tmp23, %range_int64_t_bounded_F* %tmp18, i64 %arg16, i32 %arg17)
  %.elt3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp18, i64 0, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp24 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack4, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp18, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp25 = insertvalue %range_int64_t_bounded_F %tmp24, i64 %.unpack6, 1
  call void @this4(%range_int64_t_bounded_F %arg14, %range_int64_t_bounded_F %tmp25, %range_int64_t_bounded_F* %tmp19)
  %.elt7 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp19, i64 0, i32 0
  %.unpack8 = load i64, i64* %.elt7, align 8
  %.elt9 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp19, i64 0, i32 1
  %.unpack10 = load i64, i64* %.elt9, align 8
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg15, i64 0, i32 0
  store i64 %.unpack8, i64* %.repack, align 8
  %.repack12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %arg15, i64 0, i32 1
  store i64 %.unpack10, i64* %.repack12, align 8
  ret void
}

define internal void @this8(%string* nonnull %arg, %range_int64_t_bounded_F %arg18, %string* nonnull %arg19, i64 %arg20, i32 %arg21) {
bb:
  %tmp = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %range_int64_t_bounded_F, align 8
  %tmp24 = alloca %range_int64_t_bounded_F, align 8
  %tmp25 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp26 = alloca %range_int64_t_boundedLow_F, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp27 = load %string, %string* @_str_literal_361, align 16
  store %string %tmp27, %string* %tmp, align 8
  call void @init34(%string* %tmp22, i64 %arg20, i32 %arg21)
  %tmp28 = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  %tmp29 = load i64, i64* %tmp28, align 8, !tbaa !175
  %tmp30 = icmp eq i64 %tmp29, 0
  br i1 %tmp30, label %bb84, label %bb31

bb31:                                             ; preds = %.split
  call void @_getView(%string* %arg, %range_int64_t_bounded_F %arg18, %range_int64_t_bounded_F* %tmp23, i64 %arg20, i32 %arg21)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp23, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp32 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp23, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp33 = insertvalue %range_int64_t_bounded_F %tmp32, i64 %.unpack6, 1
  %tmp34 = call i64 @length(%range_int64_t_bounded_F %tmp33)
  %tmp35 = icmp slt i64 %tmp34, 1
  br i1 %tmp35, label %bb36, label %bb37

bb36:                                             ; preds = %bb31
  call void @chpl___ASSIGN_2(%string* %tmp22, %string* %tmp, i64 %arg20, i32 %arg21)
  br label %bb84

bb37:                                             ; preds = %bb31
  %tmp38 = call i64 @length(%range_int64_t_bounded_F %tmp33)
  %tmp39 = getelementptr inbounds %string, %string* %tmp22, i64 0, i32 0
  store i64 %tmp38, i64* %tmp39, align 8, !tbaa !175
  %tmp40 = add nsw i64 %tmp38, 1
  %tmp41 = call i64 @chpl_here_good_alloc_size(i64 %tmp40, i64 %arg20, i32 %arg21)
  %tmp42 = icmp sgt i64 %tmp41, 16
  %.04 = select i1 %tmp42, i64 %tmp41, i64 16
  %tmp43 = getelementptr inbounds %string, %string* %tmp22, i64 0, i32 1
  store i64 %.04, i64* %tmp43, align 8, !tbaa !330
  %tmp44 = call i16 @offset_STR_COPY_DATA()
  %tmp45 = load i64, i64* %tmp43, align 8, !tbaa !330
  %tmp46 = call i8* @chpl_here_alloc(i64 %tmp45, i16 %tmp44, i64 %arg20, i32 %arg21)
  %tmp47 = getelementptr inbounds %string, %string* %tmp22, i64 0, i32 2
  store i8* %tmp46, i8** %tmp47, align 8, !tbaa !179
  %tmp48 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp49 = load i32, i32* %tmp48, align 4, !tbaa !178
  %tmp50 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp51 = icmp ne i32 %tmp49, %tmp50
  br i1 %tmp51, label %bb52, label %bb58

bb52:                                             ; preds = %bb37
  %tmp53 = sext i32 %tmp49 to i64
  %tmp54 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp55 = load i8*, i8** %tmp54, align 8, !tbaa !179
  %tmp56 = load i64, i64* %tmp28, align 8, !tbaa !175
  %tmp57 = call i8* @copyRemoteBuffer(i64 %tmp53, i8* %tmp55, i64 %tmp56, i64 %arg20, i32 %arg21)
  br label %bb61

bb58:                                             ; preds = %bb37
  %tmp59 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp60 = load i8*, i8** %tmp59, align 8, !tbaa !179
  br label %bb61

bb61:                                             ; preds = %bb58, %bb52
  %.03 = phi i8* [ %tmp57, %bb52 ], [ %tmp60, %bb58 ]
  %tmp62 = load i8*, i8** %tmp47, align 8, !tbaa !179
  %.repack = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 0
  store i64 %.unpack, i64* %.repack, align 8
  %.repack8 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 1
  store i64 %.unpack6, i64* %.repack8, align 8
  %tmp63 = bitcast %range_int64_t_bounded_F* %tmp24 to i8*
  %tmp64 = call {}* @llvm.invariant.start.p0i8(i64 16, i8* %tmp63)
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp25)
  %.elt10 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp25, i64 0, i32 0
  %.unpack11 = load i64, i64* %.elt10, align 8
  %.elt12 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp25, i64 0, i32 1
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp65 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 1
  %tmp66 = load i64, i64* %tmp65, align 8, !tbaa !220
  %.repack14 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp26, i64 0, i32 0
  store i64 %.unpack11, i64* %.repack14, align 8
  %.repack16 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp26, i64 0, i32 1
  store i64 %.unpack13, i64* %.repack16, align 8
  %tmp67 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp24, i64 0, i32 0
  %tmp68 = load i64, i64* %tmp67, align 8, !tbaa !219
  %tmp69 = icmp sgt i64 %tmp68, %tmp66
  br i1 %tmp69, label %bb80, label %.preheader

.preheader:                                       ; preds = %bb61
  %tmp70 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp26, i64 0, i32 0
  %tmp71 = load i64, i64* %tmp70, align 8, !tbaa !216
  br label %bb72

bb72:                                             ; preds = %.preheader, %bb72
  %.02 = phi i64 [ %tmp77, %bb72 ], [ %tmp68, %.preheader ]
  %.0 = phi i64 [ %tmp78, %bb72 ], [ %tmp71, %.preheader ]
  %tmp73 = getelementptr inbounds i8, i8* %tmp62, i64 %.0
  %tmp74 = add nsw i64 %.02, -1
  %tmp75 = getelementptr inbounds i8, i8* %.03, i64 %tmp74
  %tmp76 = load i8, i8* %tmp75, align 1, !tbaa !8
  store i8 %tmp76, i8* %tmp73, align 1, !tbaa !8
  %tmp77 = add nsw i64 %.02, 1
  %tmp78 = add nsw i64 %.0, 1
  %tmp79 = icmp slt i64 %.02, %tmp66
  br i1 %tmp79, label %bb72, label %.loopexit

.loopexit:                                        ; preds = %bb72
  br label %bb80

bb80:                                             ; preds = %.loopexit, %bb61
  %tmp81 = load i64, i64* %tmp39, align 8, !tbaa !175
  %tmp82 = getelementptr inbounds i8, i8* %tmp62, i64 %tmp81
  store i8 0, i8* %tmp82, align 1, !tbaa !8
  br i1 %tmp51, label %bb83, label %bb84

bb83:                                             ; preds = %bb80
  call void @chpl_here_free(i8* %.03, i64 %arg20, i32 %arg21)
  br label %bb84

bb84:                                             ; preds = %bb36, %bb83, %bb80, %.split
  %.01 = load %string, %string* %tmp22, align 8
  store %string %.01, %string* %arg19, align 8
  ret void
}

define internal void @strip(%string* nonnull %arg, %string* nonnull %arg39, i8 %arg40, i8 %arg41, %string* nonnull %arg42, i64 %arg43, i32 %arg44) {
bb:
  %tmp = alloca %string, align 8
  %tmp45 = alloca %string, align 8
  %tmp46 = alloca %string, align 8
  %tmp47 = alloca %string, align 8
  %tmp48 = alloca %string, align 8
  %tmp49 = alloca %string, align 8
  %tmp50 = alloca %string, align 8
  %tmp51 = alloca %string, align 8
  %tmp52 = alloca %range_int64_t_boundedLow_F, align 8
  %tmp53 = alloca %range_int64_t_bounded_F, align 8
  %tmp54 = alloca %range_int64_t_bounded_T, align 8
  %tmp55 = alloca %range_int64_t_bounded_T, align 8
  %tmp56 = alloca %range_int64_t_bounded_T, align 8
  %tmp57 = alloca %range_int64_t_bounded_T, align 8
  %tmp58 = alloca %range_int64_t_bounded_T, align 8
  %tmp59 = alloca %range_int64_t_bounded_T, align 8
  %tmp60 = alloca %range_int64_t_bounded_T, align 8
  %tmp61 = alloca %range_int64_t_bounded_F, align 8
  %tmp62 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp63 = load %string, %string* @_str_literal_763, align 16
  store %string %tmp63, %string* %tmp, align 8
  %tmp64 = bitcast %string* %tmp to i8*
  %tmp65 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp64)
  %tmp66 = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  %tmp67 = load i64, i64* %tmp66, align 8, !tbaa !175
  %tmp68 = icmp eq i64 %tmp67, 0
  br i1 %tmp68, label %bb69, label %bb72

bb69:                                             ; preds = %.split
  %tmp70 = load %string, %string* @_str_literal_385, align 16
  store %string %tmp70, %string* %tmp45, align 8
  call void @init35(%string* %tmp46, %string* %tmp45, i8 1, i64 %arg43, i32 %arg44)
  %tmp71 = load %string, %string* %tmp46, align 8
  br label %bb226

bb72:                                             ; preds = %.split
  %tmp73 = getelementptr inbounds %string, %string* %arg39, i64 0, i32 0
  %tmp74 = load i64, i64* %tmp73, align 8, !tbaa !175
  %tmp75 = icmp eq i64 %tmp74, 0
  br i1 %tmp75, label %bb76, label %bb78

bb76:                                             ; preds = %bb72
  call void @init35(%string* %tmp47, %string* %arg, i8 1, i64 %arg43, i32 %arg44)
  %tmp77 = load %string, %string* %tmp47, align 8
  br label %bb226

bb78:                                             ; preds = %bb72
  call void @init35(%string* %tmp49, %string* %arg, i8 0, i64 %arg43, i32 %arg44)
  %tmp79 = load %string, %string* %tmp49, align 8
  store %string %tmp79, %string* %tmp48, align 8
  %tmp80 = bitcast %string* %tmp48 to i8*
  %tmp81 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp80)
  call void @init35(%string* %tmp51, %string* %arg39, i8 0, i64 %arg43, i32 %arg44)
  %tmp82 = load %string, %string* %tmp51, align 8
  store %string %tmp82, %string* %tmp50, align 8
  %tmp83 = bitcast %string* %tmp50 to i8*
  %tmp84 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp83)
  %tmp85 = getelementptr inbounds %string, %string* %tmp48, i64 0, i32 0
  %tmp86 = load i64, i64* %tmp85, align 8, !tbaa !175
  %tmp87 = icmp eq i8 %arg40, 0
  br i1 %tmp87, label %bb121, label %bb88

bb88:                                             ; preds = %bb78
  %tmp89 = icmp slt i64 %tmp86, 0
  br i1 %tmp89, label %bb90, label %bb91

bb90:                                             ; preds = %bb88
  call void @halt(%string* %tmp, i64 %arg43, i32 %arg44)
  br label %bb91

bb91:                                             ; preds = %bb88, %bb90
  %tmp92 = icmp eq i64 %tmp86, 0
  %tmp93 = add nsw i64 %tmp86, -1
  %.09 = select i1 %tmp92, i64 0, i64 %tmp93
  %.08 = zext i1 %tmp92 to i64
  %tmp94 = icmp slt i64 %.09, %.08
  br i1 %tmp94, label %bb121, label %.preheader33

.preheader33:                                     ; preds = %bb91
  br label %bb95

bb95:                                             ; preds = %.preheader33, %bb114
  %.014 = phi i64 [ %tmp115, %bb114 ], [ 1, %.preheader33 ]
  %.010 = phi i64 [ %tmp116, %bb114 ], [ %.08, %.preheader33 ]
  %tmp96 = getelementptr inbounds %string, %string* %tmp50, i64 0, i32 0
  %tmp97 = load i64, i64* %tmp96, align 8, !tbaa !175
  %tmp98 = icmp slt i64 %tmp97, 0
  br i1 %tmp98, label %bb99, label %bb100

bb99:                                             ; preds = %bb95
  call void @halt(%string* %tmp, i64 %arg43, i32 %arg44)
  br label %bb100

bb100:                                            ; preds = %bb95, %bb99
  %tmp101 = icmp eq i64 %tmp97, 0
  %tmp102 = add nsw i64 %tmp97, -1
  %.012 = select i1 %tmp101, i64 0, i64 %tmp102
  %.011 = zext i1 %tmp101 to i64
  %tmp103 = icmp slt i64 %.012, %.011
  br i1 %tmp103, label %.loopexit34, label %.preheader31

.preheader31:                                     ; preds = %bb100
  br label %bb104

bb104:                                            ; preds = %.preheader31, %bb118
  %.013 = phi i64 [ %tmp119, %bb118 ], [ %.011, %.preheader31 ]
  %tmp105 = getelementptr inbounds %string, %string* %tmp48, i64 0, i32 2
  %tmp106 = load i8*, i8** %tmp105, align 8, !tbaa !179
  %tmp107 = getelementptr inbounds i8, i8* %tmp106, i64 %.010
  %tmp108 = load i8, i8* %tmp107, align 1, !tbaa !8
  %tmp109 = getelementptr inbounds %string, %string* %tmp50, i64 0, i32 2
  %tmp110 = load i8*, i8** %tmp109, align 8, !tbaa !179
  %tmp111 = getelementptr inbounds i8, i8* %tmp110, i64 %.013
  %tmp112 = load i8, i8* %tmp111, align 1, !tbaa !8
  %tmp113 = icmp eq i8 %tmp108, %tmp112
  br i1 %tmp113, label %bb114, label %bb118

bb114:                                            ; preds = %bb104
  %tmp115 = add nuw nsw i64 %.014, 1
  %tmp116 = add nuw nsw i64 %.010, 1
  %tmp117 = icmp slt i64 %.010, %.09
  br i1 %tmp117, label %bb95, label %.loopexit34

bb118:                                            ; preds = %bb104
  %tmp119 = add nuw nsw i64 %.013, 1
  %tmp120 = icmp slt i64 %.013, %.012
  br i1 %tmp120, label %bb104, label %.loopexit32

.loopexit32:                                      ; preds = %bb118
  %.014.lcssa38 = phi i64 [ %.014, %bb118 ]
  br label %bb121

.loopexit34:                                      ; preds = %bb100, %bb114
  %.3.ph = phi i64 [ %tmp115, %bb114 ], [ %.014, %bb100 ]
  br label %bb121

bb121:                                            ; preds = %.loopexit34, %.loopexit32, %bb78, %bb91
  %.3 = phi i64 [ 1, %bb78 ], [ 1, %bb91 ], [ %.014.lcssa38, %.loopexit32 ], [ %.3.ph, %.loopexit34 ]
  %tmp122 = icmp eq i8 %arg41, 0
  br i1 %tmp122, label %bb222, label %bb123

bb123:                                            ; preds = %bb121
  call void @chpl_build_low_bounded_range(i64 0, %range_int64_t_boundedLow_F* %tmp52)
  %.elt21 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp52, i64 0, i32 0
  %.unpack22 = load i64, i64* %.elt21, align 8
  %tmp124 = insertvalue %range_int64_t_boundedLow_F undef, i64 %.unpack22, 0
  %.elt23 = getelementptr inbounds %range_int64_t_boundedLow_F, %range_int64_t_boundedLow_F* %tmp52, i64 0, i32 1
  %.unpack24 = load i64, i64* %.elt23, align 8
  %tmp125 = insertvalue %range_int64_t_boundedLow_F %tmp124, i64 %.unpack24, 1
  %tmp126 = load i64, i64* %tmp85, align 8, !tbaa !175
  call void @chpl___POUND_(%range_int64_t_boundedLow_F %tmp125, i64 %tmp126, %range_int64_t_bounded_F* %tmp53, i64 %arg43, i32 %arg44)
  %.elt25 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp53, i64 0, i32 0
  %.unpack26 = load i64, i64* %.elt25, align 8
  %tmp127 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack26, 0
  %.elt27 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp53, i64 0, i32 1
  %.unpack28 = load i64, i64* %.elt27, align 8
  %tmp128 = insertvalue %range_int64_t_bounded_F %tmp127, i64 %.unpack28, 1
  call void @chpl_by_help(%range_int64_t_bounded_F %tmp128, i64 -1, %range_int64_t_bounded_T* %tmp54)
  %tmp129 = load %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp54, align 8
  %tmp130 = call i8 @isAmbiguous(%range_int64_t_bounded_T %tmp129)
  %tmp131 = icmp eq i8 %tmp130, 0
  br i1 %tmp131, label %bb134, label %bb132

bb132:                                            ; preds = %bb123
  %tmp133 = trunc i64 %arg43 to i32
  call void @chpl_error(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @227, i64 0, i64 0), i32 %tmp133, i32 %arg44)
  br label %bb134

bb134:                                            ; preds = %bb123, %bb132
  store %range_int64_t_bounded_T %tmp129, %range_int64_t_bounded_T* %tmp55, align 8
  %tmp135 = bitcast %range_int64_t_bounded_T* %tmp55 to i8*
  %tmp136 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp135)
  %tmp137 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp55, i64 0, i32 2
  %tmp138 = load i64, i64* %tmp137, align 8, !tbaa !224
  %tmp139 = icmp sgt i64 %tmp138, 0
  br i1 %tmp139, label %bb140, label %bb147

bb140:                                            ; preds = %bb134
  %tmp141 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp55, i64 0, i32 3
  %tmp142 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp55, i64 0, i32 0
  %tmp143 = load i64, i64* %tmp141, align 8, !tbaa !225
  %tmp144 = load i64, i64* %tmp142, align 8, !tbaa !221
  %tmp145 = call i64 @chpl__diffMod(i64 %tmp143, i64 %tmp144, i64 %tmp138)
  %tmp146 = add nsw i64 %tmp145, %tmp144
  br label %bb154

bb147:                                            ; preds = %bb134
  %tmp148 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp55, i64 0, i32 1
  %tmp149 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp55, i64 0, i32 3
  %tmp150 = load i64, i64* %tmp148, align 8, !tbaa !223
  %tmp151 = load i64, i64* %tmp149, align 8, !tbaa !225
  %tmp152 = call i64 @chpl__diffMod(i64 %tmp150, i64 %tmp151, i64 %tmp138)
  %tmp153 = sub nsw i64 %tmp150, %tmp152
  br label %bb154

bb154:                                            ; preds = %bb147, %bb140
  %.06 = phi i64 [ %tmp146, %bb140 ], [ %tmp153, %bb147 ]
  store %range_int64_t_bounded_T %tmp129, %range_int64_t_bounded_T* %tmp56, align 8
  %tmp155 = bitcast %range_int64_t_bounded_T* %tmp56 to i8*
  %tmp156 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp155)
  store %range_int64_t_bounded_T %tmp129, %range_int64_t_bounded_T* %tmp57, align 8
  %tmp157 = bitcast %range_int64_t_bounded_T* %tmp57 to i8*
  %tmp158 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp157)
  %tmp159 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp56, i64 0, i32 0
  %tmp160 = load i64, i64* %tmp159, align 8, !tbaa !221
  %tmp161 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp57, i64 0, i32 1
  %tmp162 = load i64, i64* %tmp161, align 8, !tbaa !223
  %tmp163 = icmp sgt i64 %tmp160, %tmp162
  br i1 %tmp163, label %bb190, label %bb164

bb164:                                            ; preds = %bb154
  store %range_int64_t_bounded_T %tmp129, %range_int64_t_bounded_T* %tmp58, align 8
  %tmp165 = bitcast %range_int64_t_bounded_T* %tmp58 to i8*
  %tmp166 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp165)
  %tmp167 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp58, i64 0, i32 2
  %tmp168 = load i64, i64* %tmp167, align 8, !tbaa !224
  %tmp169 = icmp sgt i64 %tmp168, 0
  br i1 %tmp169, label %bb170, label %bb177

bb170:                                            ; preds = %bb164
  %tmp171 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp58, i64 0, i32 1
  %tmp172 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp58, i64 0, i32 3
  %tmp173 = load i64, i64* %tmp171, align 8, !tbaa !223
  %tmp174 = load i64, i64* %tmp172, align 8, !tbaa !225
  %tmp175 = call i64 @chpl__diffMod(i64 %tmp173, i64 %tmp174, i64 %tmp168)
  %tmp176 = sub nsw i64 %tmp173, %tmp175
  br label %bb184

bb177:                                            ; preds = %bb164
  %tmp178 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp58, i64 0, i32 3
  %tmp179 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp58, i64 0, i32 0
  %tmp180 = load i64, i64* %tmp178, align 8, !tbaa !225
  %tmp181 = load i64, i64* %tmp179, align 8, !tbaa !221
  %tmp182 = call i64 @chpl__diffMod(i64 %tmp180, i64 %tmp181, i64 %tmp168)
  %tmp183 = add nsw i64 %tmp182, %tmp181
  br label %bb184

bb184:                                            ; preds = %bb177, %bb170
  %.04 = phi i64 [ %tmp176, %bb170 ], [ %tmp183, %bb177 ]
  store %range_int64_t_bounded_T %tmp129, %range_int64_t_bounded_T* %tmp59, align 8
  %tmp185 = bitcast %range_int64_t_bounded_T* %tmp59 to i8*
  %tmp186 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp185)
  %tmp187 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp59, i64 0, i32 2
  %tmp188 = load i64, i64* %tmp187, align 8, !tbaa !224
  %tmp189 = add nsw i64 %tmp188, %.04
  br label %bb190

bb190:                                            ; preds = %bb184, %bb154
  %.05 = phi i64 [ %tmp189, %bb184 ], [ %.06, %bb154 ]
  %tmp191 = icmp eq i64 %.06, %.05
  br i1 %tmp191, label %bb222, label %.preheader29

.preheader29:                                     ; preds = %bb190
  br label %bb192

bb192:                                            ; preds = %.preheader29, %bb211
  %.015 = phi i64 [ %tmp212, %bb211 ], [ %tmp86, %.preheader29 ]
  %.07 = phi i64 [ %tmp217, %bb211 ], [ %.06, %.preheader29 ]
  %tmp193 = getelementptr inbounds %string, %string* %tmp50, i64 0, i32 0
  %tmp194 = load i64, i64* %tmp193, align 8, !tbaa !175
  %tmp195 = icmp slt i64 %tmp194, 0
  br i1 %tmp195, label %bb196, label %bb197

bb196:                                            ; preds = %bb192
  call void @halt(%string* %tmp, i64 %arg43, i32 %arg44)
  br label %bb197

bb197:                                            ; preds = %bb192, %bb196
  %tmp198 = icmp eq i64 %tmp194, 0
  %tmp199 = add nsw i64 %tmp194, -1
  %.03 = zext i1 %tmp198 to i64
  %.02 = select i1 %tmp198, i64 0, i64 %tmp199
  %tmp200 = icmp slt i64 %.02, %.03
  br i1 %tmp200, label %.loopexit30, label %.preheader

.preheader:                                       ; preds = %bb197
  br label %bb201

bb201:                                            ; preds = %.preheader, %bb219
  %.01 = phi i64 [ %tmp220, %bb219 ], [ %.03, %.preheader ]
  %tmp202 = getelementptr inbounds %string, %string* %tmp48, i64 0, i32 2
  %tmp203 = load i8*, i8** %tmp202, align 8, !tbaa !179
  %tmp204 = getelementptr inbounds i8, i8* %tmp203, i64 %.07
  %tmp205 = load i8, i8* %tmp204, align 1, !tbaa !8
  %tmp206 = getelementptr inbounds %string, %string* %tmp50, i64 0, i32 2
  %tmp207 = load i8*, i8** %tmp206, align 8, !tbaa !179
  %tmp208 = getelementptr inbounds i8, i8* %tmp207, i64 %.01
  %tmp209 = load i8, i8* %tmp208, align 1, !tbaa !8
  %tmp210 = icmp eq i8 %tmp205, %tmp209
  br i1 %tmp210, label %bb211, label %bb219

bb211:                                            ; preds = %bb201
  %tmp212 = add nsw i64 %.015, -1
  store %range_int64_t_bounded_T %tmp129, %range_int64_t_bounded_T* %tmp60, align 8
  %tmp213 = bitcast %range_int64_t_bounded_T* %tmp60 to i8*
  %tmp214 = call {}* @llvm.invariant.start.p0i8(i64 40, i8* %tmp213)
  %tmp215 = getelementptr inbounds %range_int64_t_bounded_T, %range_int64_t_bounded_T* %tmp60, i64 0, i32 2
  %tmp216 = load i64, i64* %tmp215, align 8, !tbaa !224
  %tmp217 = add nsw i64 %tmp216, %.07
  %tmp218 = icmp eq i64 %tmp217, %.05
  br i1 %tmp218, label %.loopexit30, label %bb192

bb219:                                            ; preds = %bb201
  %tmp220 = add nuw nsw i64 %.01, 1
  %tmp221 = icmp slt i64 %.01, %.02
  br i1 %tmp221, label %bb201, label %.loopexit

.loopexit:                                        ; preds = %bb219
  %.015.lcssa37 = phi i64 [ %.015, %bb219 ]
  br label %bb222

.loopexit30:                                      ; preds = %bb211, %bb197
  %.318.ph = phi i64 [ %tmp212, %bb211 ], [ %.015, %bb197 ]
  br label %bb222

bb222:                                            ; preds = %.loopexit30, %.loopexit, %bb190, %bb121
  %.318 = phi i64 [ %tmp86, %bb121 ], [ %tmp86, %bb190 ], [ %.015.lcssa37, %.loopexit ], [ %.318.ph, %.loopexit30 ]
  call void @chpl_build_bounded_range(i64 %.3, i64 %.318, %range_int64_t_bounded_F* %tmp61)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp61, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp223 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt19 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp61, i64 0, i32 1
  %.unpack20 = load i64, i64* %.elt19, align 8
  %tmp224 = insertvalue %range_int64_t_bounded_F %tmp223, i64 %.unpack20, 1
  call void @this8(%string* %tmp48, %range_int64_t_bounded_F %tmp224, %string* %tmp62, i64 %arg43, i32 %arg44)
  %tmp225 = load %string, %string* %tmp62, align 8
  call void @deinit23(%string* %tmp50, i64 %arg43, i32 %arg44)
  call void @deinit23(%string* %tmp48, i64 %arg43, i32 %arg44)
  br label %bb226

bb226:                                            ; preds = %bb222, %bb76, %bb69
  %.0 = phi %string [ %tmp71, %bb69 ], [ %tmp77, %bb76 ], [ %tmp225, %bb222 ]
  store %string %.0, %string* %arg42, align 8
  ret void
}

define internal void @chpl___ASSIGN_2(%string* nonnull %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %string, %string* %arg1, i64 0, i32 2
  %tmp4 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 0
  %tmp5 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 1
  %tmp6 = load i8*, i8** %tmp, align 8, !tbaa !179
  %tmp7 = load i64, i64* %tmp4, align 8, !tbaa !175
  %tmp8 = load i64, i64* %tmp5, align 8, !tbaa !330
  tail call void @reinitString(%string* %arg, i8* %tmp6, i64 %tmp7, i64 %tmp8, i8 1, i64 %arg2, i32 %arg3)
  ret void
}

define internal void @chpl___PLUS_(%string* nonnull %arg, %string* nonnull %arg1, %string* nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp7 = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  %tmp8 = load i64, i64* %tmp7, align 8, !tbaa !175
  %tmp9 = icmp eq i64 %tmp8, 0
  br i1 %tmp9, label %bb10, label %bb11

bb10:                                             ; preds = %.split
  call void @init35(%string* %tmp, %string* %arg1, i8 1, i64 %arg3, i32 %arg4)
  br label %bb51

bb11:                                             ; preds = %.split
  %tmp12 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 0
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !175
  %tmp14 = icmp eq i64 %tmp13, 0
  br i1 %tmp14, label %bb15, label %bb16

bb15:                                             ; preds = %bb11
  call void @init35(%string* %tmp5, %string* %arg, i8 1, i64 %arg3, i32 %arg4)
  br label %bb51

bb16:                                             ; preds = %bb11
  call void @init34(%string* %tmp6, i64 %arg3, i32 %arg4)
  %tmp17 = getelementptr inbounds %string, %string* %tmp6, i64 0, i32 0
  %tmp18 = add nsw i64 %tmp13, %tmp8
  store i64 %tmp18, i64* %tmp17, align 8, !tbaa !175
  %tmp19 = add nsw i64 %tmp18, 1
  %tmp20 = call i64 @chpl_here_good_alloc_size(i64 %tmp19, i64 %arg3, i32 %arg4)
  %tmp21 = getelementptr inbounds %string, %string* %tmp6, i64 0, i32 1
  store i64 %tmp20, i64* %tmp21, align 8, !tbaa !330
  %tmp22 = call i16 @offset_STR_COPY_DATA()
  %tmp23 = call i8* @chpl_here_alloc(i64 %tmp20, i16 %tmp22, i64 %arg3, i32 %arg4)
  %tmp24 = getelementptr inbounds %string, %string* %tmp6, i64 0, i32 2
  store i8* %tmp23, i8** %tmp24, align 8, !tbaa !179
  %tmp25 = getelementptr inbounds %string, %string* %tmp6, i64 0, i32 3
  store i8 1, i8* %tmp25, align 8, !tbaa !329
  %tmp26 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp27 = load i32, i32* %tmp26, align 4, !tbaa !178
  %tmp28 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp29 = icmp eq i32 %tmp27, %tmp28
  %tmp30 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp31 = load i8*, i8** %tmp30, align 8, !tbaa !179
  br i1 %tmp29, label %bb34, label %bb32

bb32:                                             ; preds = %bb16
  %tmp33 = trunc i64 %arg3 to i32
  call void @chpl_gen_comm_get(i8* %tmp23, i32 %tmp27, i8* %tmp31, i64 %tmp8, i32 -1, i32 1, i32 %tmp33, i32 %arg4)
  br label %bb35

bb34:                                             ; preds = %bb16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp23, i8* align 1 %tmp31, i64 %tmp8, i1 false)
  br label %bb35

bb35:                                             ; preds = %bb34, %bb32
  %tmp36 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 4
  %tmp37 = load i32, i32* %tmp36, align 4, !tbaa !178
  %tmp38 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp39 = icmp eq i32 %tmp37, %tmp38
  %tmp40 = load i8*, i8** %tmp24, align 8, !tbaa !179
  %tmp41 = getelementptr inbounds i8, i8* %tmp40, i64 %tmp8
  %tmp42 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 2
  %tmp43 = load i8*, i8** %tmp42, align 8, !tbaa !179
  br i1 %tmp39, label %bb46, label %bb44

bb44:                                             ; preds = %bb35
  %tmp45 = trunc i64 %arg3 to i32
  call void @chpl_gen_comm_get(i8* %tmp41, i32 %tmp37, i8* %tmp43, i64 %tmp13, i32 -1, i32 2, i32 %tmp45, i32 %arg4)
  br label %bb47

bb46:                                             ; preds = %bb35
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp41, i8* align 1 %tmp43, i64 %tmp13, i1 false)
  br label %bb47

bb47:                                             ; preds = %bb46, %bb44
  %tmp48 = load i8*, i8** %tmp24, align 8, !tbaa !179
  %tmp49 = load i64, i64* %tmp17, align 8, !tbaa !175
  %tmp50 = getelementptr inbounds i8, i8* %tmp48, i64 %tmp49
  store i8 0, i8* %tmp50, align 1, !tbaa !8
  br label %bb51

bb51:                                             ; preds = %bb47, %bb15, %bb10
  %.0.in = phi %string* [ %tmp, %bb10 ], [ %tmp5, %bb15 ], [ %tmp6, %bb47 ]
  %.0 = load %string, %string* %.0.in, align 8
  store %string %.0, %string* %arg2, align 8
  ret void
}

define internal void @chpl___PLUS__ASSIGN_(%string* nonnull %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 0
  %tmp5 = load i64, i64* %tmp4, align 8, !tbaa !175
  %tmp6 = icmp eq i64 %tmp5, 0
  br i1 %tmp6, label %bb57, label %bb7

bb7:                                              ; preds = %.split
  %tmp8 = getelementptr inbounds %string, %string* %arg, i64 0, i32 4
  %tmp9 = load i32, i32* %tmp8, align 4, !tbaa !178
  call void @chpl_buildLocaleID(i32 %tmp9, i32 -2, %struct.chpl_localeID_t* %tmp, i64 %arg2, i32 %arg3)
  %tmp10 = load i64, i64* %tmp4, align 8, !tbaa !175
  %tmp11 = getelementptr inbounds %string, %string* %arg, i64 0, i32 0
  %tmp12 = load i64, i64* %tmp11, align 8, !tbaa !175
  %tmp13 = add nsw i64 %tmp12, %tmp10
  %tmp14 = getelementptr inbounds %string, %string* %arg, i64 0, i32 1
  %tmp15 = load i64, i64* %tmp14, align 8, !tbaa !330
  %tmp16 = icmp sgt i64 %tmp15, %tmp13
  br i1 %tmp16, label %bb39, label %bb17

bb17:                                             ; preds = %bb7
  %tmp18 = sitofp i64 %tmp12 to double
  %tmp19 = fmul double %tmp18, 1.500000e+00
  %tmp20 = add nsw i64 %tmp13, 1
  %tmp21 = sitofp i64 %tmp20 to double
  %tmp22 = fcmp olt double %tmp19, %tmp21
  %.0 = select i1 %tmp22, double %tmp21, double %tmp19
  %tmp23 = fptosi double %.0 to i64
  %tmp24 = call i64 @chpl_here_good_alloc_size(i64 %tmp23, i64 %arg2, i32 %arg3)
  %tmp25 = getelementptr inbounds %string, %string* %arg, i64 0, i32 3
  %tmp26 = load i8, i8* %tmp25, align 1, !tbaa !329
  %tmp27 = icmp eq i8 %tmp26, 0
  %tmp28 = call i16 @offset_STR_COPY_DATA()
  br i1 %tmp27, label %bb33, label %bb29

bb29:                                             ; preds = %bb17
  %tmp30 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp31 = load i8*, i8** %tmp30, align 8, !tbaa !179
  %tmp32 = call i8* @chpl_here_realloc(i8* %tmp31, i64 %tmp24, i16 %tmp28, i64 %arg2, i32 %arg3)
  store i8* %tmp32, i8** %tmp30, align 8, !tbaa !179
  br label %bb38

bb33:                                             ; preds = %bb17
  %tmp34 = call i8* @chpl_here_alloc(i64 %tmp24, i16 %tmp28, i64 %arg2, i32 %arg3)
  %tmp35 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp36 = load i8*, i8** %tmp35, align 8, !tbaa !179
  %tmp37 = load i64, i64* %tmp11, align 8, !tbaa !175
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp34, i8* align 1 %tmp36, i64 %tmp37, i1 false)
  store i8* %tmp34, i8** %tmp35, align 8, !tbaa !179
  store i8 1, i8* %tmp25, align 1, !tbaa !329
  br label %bb38

bb38:                                             ; preds = %bb33, %bb29
  store i64 %tmp24, i64* %tmp14, align 8, !tbaa !330
  br label %bb39

bb39:                                             ; preds = %bb7, %bb38
  %tmp40 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 4
  %tmp41 = load i32, i32* %tmp40, align 4, !tbaa !178
  %tmp42 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp43 = icmp eq i32 %tmp41, %tmp42
  %tmp44 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp45 = load i8*, i8** %tmp44, align 8, !tbaa !179
  %tmp46 = load i64, i64* %tmp11, align 8, !tbaa !175
  %tmp47 = getelementptr inbounds i8, i8* %tmp45, i64 %tmp46
  %tmp48 = getelementptr inbounds %string, %string* %arg1, i64 0, i32 2
  %tmp49 = load i8*, i8** %tmp48, align 8, !tbaa !179
  br i1 %tmp43, label %bb52, label %bb50

bb50:                                             ; preds = %bb39
  %tmp51 = trunc i64 %arg2 to i32
  call void @chpl_gen_comm_get(i8* %tmp47, i32 %tmp41, i8* %tmp49, i64 %tmp10, i32 -1, i32 3, i32 %tmp51, i32 %arg3)
  br label %bb53

bb52:                                             ; preds = %bb39
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp47, i8* align 1 %tmp49, i64 %tmp10, i1 false)
  br label %bb53

bb53:                                             ; preds = %bb52, %bb50
  store i64 %tmp13, i64* %tmp11, align 8, !tbaa !175
  %tmp54 = getelementptr inbounds %string, %string* %arg, i64 0, i32 2
  %tmp55 = load i8*, i8** %tmp54, align 8, !tbaa !179
  %tmp56 = getelementptr inbounds i8, i8* %tmp55, i64 %tmp13
  store i8 0, i8* %tmp56, align 1, !tbaa !8
  br label %bb57

bb57:                                             ; preds = %.split, %bb53
  ret void
}

define internal i8 @chpl___EQUALS__(%string* nonnull %arg, %string* nonnull %arg4, i64 %arg5, i32 %arg6) {
bb:
  %tmp = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init35(%string* %tmp7, %string* %arg, i8 0, i64 %arg5, i32 %arg6)
  %tmp10 = load %string, %string* %tmp7, align 8
  store %string %tmp10, %string* %tmp, align 8
  call void @init35(%string* %tmp9, %string* %arg4, i8 0, i64 %arg5, i32 %arg6)
  %tmp11 = load %string, %string* %tmp9, align 8
  store %string %tmp11, %string* %tmp8, align 8
  %tmp12 = getelementptr inbounds %string, %string* %tmp8, i64 0, i32 0
  %tmp13 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 0
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !175
  %tmp15 = load i64, i64* %tmp12, align 8, !tbaa !175
  %tmp16 = icmp eq i64 %tmp14, %tmp15
  br i1 %tmp16, label %bb17, label %bb27

bb17:                                             ; preds = %.split
  %tmp18 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 2
  %tmp19 = load i8*, i8** %tmp18, align 8, !tbaa !179
  %tmp20 = getelementptr inbounds %string, %string* %tmp8, i64 0, i32 2
  %tmp21 = load i8*, i8** %tmp20, align 8, !tbaa !179
  %tmp22 = call i32 @memcmp(i8* %tmp19, i8* %tmp21, i64 %tmp15)
  %tmp23 = icmp eq i32 %tmp22, 0
  br i1 %tmp23, label %bb24, label %bb26

bb24:                                             ; preds = %bb17
  %tmp25 = icmp slt i64 %tmp15, %tmp14
  br i1 %tmp25, label %bb27, label %bb26

bb26:                                             ; preds = %bb24, %bb17
  %phitmp = icmp eq i32 %tmp22, 0
  %phitmp3 = zext i1 %phitmp to i8
  br label %bb27

bb27:                                             ; preds = %bb26, %bb24, %.split
  %.02 = phi i8 [ 0, %.split ], [ %phitmp3, %bb26 ], [ 0, %bb24 ]
  call void @deinit23(%string* %tmp8, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp, i64 %arg5, i32 %arg6)
  ret i8 %.02
}

define internal void @_cast2(i8* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init34(%string* %tmp, i64 %arg2, i32 %arg3)
  %tmp4 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 0
  %tmp5 = call i64 @string_length(i8* %arg)
  store i64 %tmp5, i64* %tmp4, align 8, !tbaa !175
  %tmp6 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 1
  %tmp7 = add nsw i64 %tmp5, 1
  store i64 %tmp7, i64* %tmp6, align 8, !tbaa !330
  %tmp8 = icmp sgt i64 %tmp5, 0
  br i1 %tmp8, label %bb9, label %bb12

bb9:                                              ; preds = %.split
  %tmp10 = trunc i64 %arg2 to i32
  %tmp11 = call i8* @string_copy(i8* %arg, i32 %tmp10, i32 %arg3)
  br label %bb12

bb12:                                             ; preds = %.split, %bb9
  %.0 = phi i8* [ %tmp11, %bb9 ], [ null, %.split ]
  %tmp13 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 2
  store i8* %.0, i8** %tmp13, align 8, !tbaa !179
  %tmp14 = getelementptr inbounds %string, %string* %tmp, i64 0, i32 3
  store i8 1, i8* %tmp14, align 8, !tbaa !329
  %tmp15 = load %string, %string* %tmp, align 8
  store %string %tmp15, %string* %arg1, align 8
  ret void
}

define internal void @chpl__init_StringCasts(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_StringCasts_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @251, i64 0, i64 0), i64 11, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_StringCasts_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal i8 @_cast3(%string* nonnull %arg, %chpl_Error_object** nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp14 = load %string, %string* @_str_literal_1968, align 16
  store %string %tmp14, %string* %tmp, align 8
  %tmp15 = bitcast %string* %tmp to i8*
  %tmp16 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp15)
  %tmp17 = load %string, %string* @_str_literal_1952, align 16
  store %string %tmp17, %string* %tmp4, align 8
  %tmp18 = bitcast %string* %tmp4 to i8*
  %tmp19 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp18)
  %tmp20 = load %string, %string* @_str_literal_1964, align 16
  store %string %tmp20, %string* %tmp5, align 8
  %tmp21 = bitcast %string* %tmp5 to i8*
  %tmp22 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp21)
  %tmp23 = load %string, %string* @_str_literal_590, align 16
  store %string %tmp23, %string* %tmp6, align 8
  %tmp24 = bitcast %string* %tmp6 to i8*
  %tmp25 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp24)
  %tmp26 = load %string, %string* @_str_literal_1966, align 16
  store %string %tmp26, %string* %tmp7, align 8
  %tmp27 = bitcast %string* %tmp7 to i8*
  %tmp28 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp27)
  call void @strip(%string* %arg, %string* @_str_literal_383, i8 1, i8 1, %string* %tmp9, i64 %arg2, i32 %arg3)
  %tmp29 = load %string, %string* %tmp9, align 8
  store %string %tmp29, %string* %tmp8, align 8
  %tmp30 = getelementptr inbounds %string, %string* %tmp8, i64 0, i32 0
  %tmp31 = load i64, i64* %tmp30, align 8, !tbaa !175
  %tmp32 = icmp eq i64 %tmp31, 0
  br i1 %tmp32, label %bb33, label %bb37

bb33:                                             ; preds = %.split
  %tmp34 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp7, i64 %arg2, i32 %arg3)
  %tmp35 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp34, i64 0, i32 0
  %tmp36 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp35, i64 %arg2, i32 %arg3)
  store %chpl_Error_object* %tmp36, %chpl_Error_object** %arg1, align 8, !tbaa !125
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  br label %bb51

bb37:                                             ; preds = %.split
  %tmp38 = call i8 @chpl___EQUALS__(%string* %tmp8, %string* %tmp6, i64 %arg2, i32 %arg3)
  %tmp39 = icmp eq i8 %tmp38, 0
  br i1 %tmp39, label %bb41, label %bb40

bb40:                                             ; preds = %bb37
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  br label %bb51

bb41:                                             ; preds = %bb37
  %tmp42 = call i8 @chpl___EQUALS__(%string* %tmp8, %string* %tmp5, i64 %arg2, i32 %arg3)
  %tmp43 = icmp eq i8 %tmp42, 0
  br i1 %tmp43, label %bb45, label %bb44

bb44:                                             ; preds = %bb41
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  br label %bb51

bb45:                                             ; preds = %bb41
  call void @chpl___PLUS_(%string* %tmp4, %string* %arg, %string* %tmp11, i64 %arg2, i32 %arg3)
  %tmp46 = load %string, %string* %tmp11, align 8
  store %string %tmp46, %string* %tmp10, align 8
  call void @chpl___PLUS_(%string* %tmp10, %string* %tmp, %string* %tmp13, i64 %arg2, i32 %arg3)
  %tmp47 = load %string, %string* %tmp13, align 8
  store %string %tmp47, %string* %tmp12, align 8
  %tmp48 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp12, i64 %arg2, i32 %arg3)
  %tmp49 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp48, i64 0, i32 0
  %tmp50 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp49, i64 %arg2, i32 %arg3)
  store %chpl_Error_object* %tmp50, %chpl_Error_object** %arg1, align 8, !tbaa !125
  call void @deinit23(%string* %tmp12, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp10, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  br label %bb51

bb51:                                             ; preds = %bb45, %bb44, %bb40, %bb33
  %.0 = phi i8 [ undef, %bb33 ], [ 1, %bb40 ], [ 0, %bb44 ], [ undef, %bb45 ]
  ret i8 %.0
}

define internal void @_cast4(i64 %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca i8, align 1
  %tmp5 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = load %string, %string* @_str_literal_314, align 16
  store %string %tmp6, %string* %tmp, align 8
  store i8 0, i8* %tmp4, align 1, !tbaa !8
  %tmp7 = call i8* @integral_to_c_string(i64 %arg, i32 8, i1 true, i8* nonnull %tmp4)
  %tmp8 = load i8, i8* %tmp4, align 1, !tbaa !2
  %tmp9 = icmp eq i8 %tmp8, 0
  br i1 %tmp9, label %bb16, label %bb10

bb10:                                             ; preds = %.split
  %tmp11 = call %chpl_IllegalArgumentError_object* @_new3(%string* %tmp, i64 %arg2, i32 %arg3)
  %tmp12 = getelementptr inbounds %chpl_IllegalArgumentError_object, %chpl_IllegalArgumentError_object* %tmp11, i64 0, i32 0
  %tmp13 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp12, i64 %arg2, i32 %arg3)
  %tmp14 = icmp eq %chpl_Error_object* %tmp13, null
  br i1 %tmp14, label %bb16, label %bb15

bb15:                                             ; preds = %bb10
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp13, i64 %arg2, i32 %arg3)
  br label %bb16

bb16:                                             ; preds = %bb15, %bb10, %.split
  call void @init34(%string* %tmp5, i64 %arg2, i32 %arg3)
  %tmp17 = getelementptr inbounds %string, %string* %tmp5, i64 0, i32 2
  store i8* %tmp7, i8** %tmp17, align 8, !tbaa !179
  %tmp18 = call i64 @strlen(i8* %tmp7)
  %tmp19 = getelementptr inbounds %string, %string* %tmp5, i64 0, i32 0
  store i64 %tmp18, i64* %tmp19, align 8, !tbaa !175
  %tmp20 = getelementptr inbounds %string, %string* %tmp5, i64 0, i32 1
  %tmp21 = add nsw i64 %tmp18, 1
  store i64 %tmp21, i64* %tmp20, align 8, !tbaa !330
  %tmp22 = load %string, %string* %tmp5, align 8
  store %string %tmp22, %string* %arg1, align 8
  ret void
}

define internal %chpl_object_object* @_construct_object(%chpl_object_object* %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret %chpl_object_object* %arg
}

define internal void @chpl__auto_destroy_object(%chpl_object_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpl__heapAllocateGlobals() #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define void @chpl__init_preInit(i64 %arg, i32 %arg1) #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  store i8 0, i8* @chpl__init_ChapelStringLiterals_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelBase_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelStandard_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_PrintModuleInitOrder_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_CPtr_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_CString_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_String_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelDebugPrint_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_MemConsistency_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_Atomics_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelThreads_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelTuple_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelRange_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_AlignedTSupport_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelTaskDataHelp_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocaleModel_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelLocale_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_DefaultRectangular_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocalesArray_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelArray_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelDistribution_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelIO_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocaleTree_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_DefaultAssociative_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ExternalArray_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelTaskTable_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_MemTracking_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelUtil_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelError_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelDynDispHack_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelTaskData_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_StringCasts_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocaleModelHelpFlat_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocaleModelHelpMem_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocaleModelHelpSetup_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_LocaleModelHelpRuntime_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_ChapelNumLocales_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_matrix_multiplication_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_Assert_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_SysCTypes_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_DSIUtil_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_Sort_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_List_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_SysBasic_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_FormattedIO_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_IO_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_RangeChunk_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_Sys_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_SysError_p, align 1, !tbaa !8
  store i8 0, i8* @chpl__init_Regexp_p, align 1, !tbaa !8
  ret void
}

define internal void @chpl__init_Assert(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_Assert_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @258, i64 0, i64 0), i64 6, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_Assert_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @assert_chpl(i8 %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = icmp eq i8 %arg, 0
  br i1 %tmp, label %bb3, label %bb5

bb3:                                              ; preds = %.split
  %tmp4 = trunc i64 %arg1 to i32
  tail call void @chpl_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @259, i64 0, i64 0), i32 %tmp4, i32 %arg2)
  br label %bb5

bb5:                                              ; preds = %bb3, %.split
  ret void
}

define internal void @chpl__init_DSIUtil(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_DSIUtil_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @261, i64 0, i64 0), i64 7, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_DSIUtil_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @createTuple_chpl(i64 %arg, [1 x i64]* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [1 x i64], [1 x i64]* %arg1, i64 0, i64 0
  store i64 %arg, i64* %tmp, align 8, !tbaa !138
  ret void
}

define internal void @createTuple_chpl2(i64 %arg, [2 x i64]* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds [2 x i64], [2 x i64]* %arg1, i64 0, i64 0
  store i64 %arg, i64* %tmp, align 8, !tbaa !138
  %tmp2 = getelementptr inbounds [2 x i64], [2 x i64]* %arg1, i64 0, i64 1
  store i64 %arg, i64* %tmp2, align 8, !tbaa !138
  ret void
}

define internal void @_computeChunkStuff_chpl(i64 %arg, i8 %arg16, i64 %arg17, [1 x %range_int64_t_bounded_F]* nonnull %arg18, [2 x i64]* nonnull %arg19, i64 %arg20, i32 %arg21) {
bb:
  %tmp = alloca [2 x i64], align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg18, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp22 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt10 = getelementptr inbounds [1 x %range_int64_t_bounded_F], [1 x %range_int64_t_bounded_F]* %arg18, i64 0, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %tmp23 = insertvalue %range_int64_t_bounded_F %tmp22, i64 %.unpack11, 1
  %tmp24 = tail call i64 @length(%range_int64_t_bounded_F %tmp23)
  %tmp25 = tail call i64 @_computeNumChunks_chpl(i64 %arg, i8 %arg16, i64 %arg17, i64 %tmp24, i64 %arg20, i32 %arg21)
  %tmp26 = icmp eq i64 %tmp25, 0
  br i1 %tmp26, label %bb27, label %bb30

bb27:                                             ; preds = %.split
  %tmp28 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 0, i64* %tmp28, align 8, !tbaa !138
  %tmp29 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 -1, i64* %tmp29, align 8, !tbaa !138
  br label %bb46

bb30:                                             ; preds = %.split
  %tmp31 = icmp sgt i64 %tmp25, 0
  %tmp32 = zext i1 %tmp31 to i8
  tail call void @assert_chpl(i8 %tmp32, i64 %arg20, i32 %arg21)
  %tmp33 = tail call %range_int64_t_bounded_F* @this7([1 x %range_int64_t_bounded_F]* %arg18, i64 1)
  %.elt12 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp33, i64 0, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp34 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp33, i64 0, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp35 = insertvalue %range_int64_t_bounded_F %tmp34, i64 %.unpack15, 1
  %tmp36 = tail call i64 @length(%range_int64_t_bounded_F %tmp35)
  %tmp37 = icmp ult i64 %tmp36, %tmp25
  br i1 %tmp37, label %bb38, label %bb40

bb38:                                             ; preds = %bb30
  %tmp39 = icmp eq i64 %tmp36, 0
  %.13 = select i1 %tmp39, i64 -1, i64 1
  br label %bb40

bb40:                                             ; preds = %bb38, %bb30
  %.06 = phi i64 [ -1, %bb38 ], [ 1, %bb30 ]
  %.35 = phi i64 [ %.13, %bb38 ], [ -1, %bb30 ]
  %.3 = phi i64 [ %tmp36, %bb38 ], [ 0, %bb30 ]
  %tmp41 = icmp eq i64 %.06, -1
  %tmp42 = icmp ult i64 %.3, %tmp25
  %tmp43 = and i1 %tmp41, %tmp42
  %.19 = select i1 %tmp43, i64 %.3, i64 %tmp25
  %.17 = select i1 %tmp41, i64 %.35, i64 %.06
  %tmp44 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 %.19, i64* %tmp44, align 8, !tbaa !138
  %tmp45 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 %.17, i64* %tmp45, align 8, !tbaa !138
  br label %bb46

bb46:                                             ; preds = %bb40, %bb27
  %tmp47 = getelementptr inbounds [2 x i64], [2 x i64]* %arg19, i64 0, i64 0
  %tmp48 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp49 = load i64, i64* %tmp48, align 8, !tbaa !138
  store i64 %tmp49, i64* %tmp47, align 8, !tbaa !138
  %tmp50 = getelementptr inbounds [2 x i64], [2 x i64]* %arg19, i64 0, i64 1
  %tmp51 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp52 = load i64, i64* %tmp51, align 8, !tbaa !138
  store i64 %tmp52, i64* %tmp50, align 8, !tbaa !138
  ret void
}

define internal void @_computeChunkStuff_chpl2(i64 %arg, i8 %arg20, i64 %arg21, [2 x %range_int64_t_bounded_F]* nonnull %arg22, [2 x i64]* nonnull %arg23, i64 %arg24, i32 %arg25) {
bb:
  %tmp = alloca [2 x i64], align 8
  br label %.split

.split:                                           ; preds = %bb
  %.elt = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg22, i64 0, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp26 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt10 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg22, i64 0, i64 0, i32 1
  %.unpack11 = load i64, i64* %.elt10, align 8
  %tmp27 = insertvalue %range_int64_t_bounded_F %tmp26, i64 %.unpack11, 1
  %tmp28 = tail call i64 @length(%range_int64_t_bounded_F %tmp27)
  %.elt12 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg22, i64 0, i64 1, i32 0
  %.unpack13 = load i64, i64* %.elt12, align 8
  %tmp29 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack13, 0
  %.elt14 = getelementptr inbounds [2 x %range_int64_t_bounded_F], [2 x %range_int64_t_bounded_F]* %arg22, i64 0, i64 1, i32 1
  %.unpack15 = load i64, i64* %.elt14, align 8
  %tmp30 = insertvalue %range_int64_t_bounded_F %tmp29, i64 %.unpack15, 1
  %tmp31 = tail call i64 @length(%range_int64_t_bounded_F %tmp30)
  %tmp32 = mul i64 %tmp31, %tmp28
  %tmp33 = tail call i64 @_computeNumChunks_chpl(i64 %arg, i8 %arg20, i64 %arg21, i64 %tmp32, i64 %arg24, i32 %arg25)
  %tmp34 = icmp eq i64 %tmp33, 0
  br i1 %tmp34, label %bb35, label %bb38

bb35:                                             ; preds = %.split
  %tmp36 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 0, i64* %tmp36, align 8, !tbaa !138
  %tmp37 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 -1, i64* %tmp37, align 8, !tbaa !138
  br label %bb57

bb38:                                             ; preds = %.split
  %tmp39 = icmp sgt i64 %tmp33, 0
  %tmp40 = zext i1 %tmp39 to i8
  tail call void @assert_chpl(i8 %tmp40, i64 %arg24, i32 %arg25)
  br label %bb41

bb41:                                             ; preds = %bb38, %bb47
  %.02 = phi i64 [ -1, %bb38 ], [ %.13, %bb47 ]
  %.01 = phi i64 [ 0, %bb38 ], [ %.1, %bb47 ]
  %.0 = phi i64 [ 1, %bb38 ], [ %tmp49, %bb47 ]
  %tmp42 = tail call %range_int64_t_bounded_F* @this5([2 x %range_int64_t_bounded_F]* %arg22, i64 %.0)
  %.elt16 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 0
  %.unpack17 = load i64, i64* %.elt16, align 8
  %tmp43 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack17, 0
  %.elt18 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp42, i64 0, i32 1
  %.unpack19 = load i64, i64* %.elt18, align 8
  %tmp44 = insertvalue %range_int64_t_bounded_F %tmp43, i64 %.unpack19, 1
  %tmp45 = tail call i64 @length(%range_int64_t_bounded_F %tmp44)
  %tmp46 = icmp ult i64 %tmp45, %tmp33
  br i1 %tmp46, label %bb47, label %bb51

bb47:                                             ; preds = %bb41
  %tmp48 = icmp ugt i64 %tmp45, %.01
  %.13 = select i1 %tmp48, i64 %.0, i64 %.02
  %.1 = select i1 %tmp48, i64 %tmp45, i64 %.01
  %tmp49 = add nuw nsw i64 %.0, 1
  %tmp50 = icmp ult i64 %tmp49, 3
  br i1 %tmp50, label %bb41, label %bb51

bb51:                                             ; preds = %bb41, %bb47
  %.06 = phi i64 [ %.0, %bb41 ], [ -1, %bb47 ]
  %.35 = phi i64 [ %.02, %bb41 ], [ %.13, %bb47 ]
  %.3 = phi i64 [ %.01, %bb41 ], [ %.1, %bb47 ]
  %tmp52 = icmp eq i64 %.06, -1
  %tmp53 = icmp ult i64 %.3, %tmp33
  %tmp54 = and i1 %tmp52, %tmp53
  %.19 = select i1 %tmp54, i64 %.3, i64 %tmp33
  %.17 = select i1 %tmp52, i64 %.35, i64 %.06
  %tmp55 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 %.19, i64* %tmp55, align 8, !tbaa !138
  %tmp56 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 %.17, i64* %tmp56, align 8, !tbaa !138
  br label %bb57

bb57:                                             ; preds = %bb51, %bb35
  %tmp58 = getelementptr inbounds [2 x i64], [2 x i64]* %arg23, i64 0, i64 0
  %tmp59 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp60 = load i64, i64* %tmp59, align 8, !tbaa !138
  store i64 %tmp60, i64* %tmp58, align 8, !tbaa !138
  %tmp61 = getelementptr inbounds [2 x i64], [2 x i64]* %arg23, i64 0, i64 1
  %tmp62 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp63 = load i64, i64* %tmp62, align 8, !tbaa !138
  store i64 %tmp63, i64* %tmp61, align 8, !tbaa !138
  ret void
}

define internal i64 @_computeNumChunks_chpl(i64 %arg, i8 %arg9, i64 %arg10, i64 %arg11, i64 %arg12, i32 %arg13) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp14 = icmp eq i64 %arg11, 0
  br i1 %tmp14, label %bb40, label %bb15

bb15:                                             ; preds = %.split
  %tmp16 = icmp eq i8 %arg9, 0
  br i1 %tmp16, label %bb17, label %bb25

bb17:                                             ; preds = %bb15
  %tmp18 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp19 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp18, i32 -2)
  %tmp20 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp19, i32* %tmp20, align 8, !tbaa !110
  %tmp21 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg12, i32 %arg13)
  %tmp22 = call i64 @runningTasks(%chpl_locale_object* %tmp21)
  %tmp23 = icmp sgt i64 %tmp22, %arg
  %.neg7 = add i64 %arg, 1
  %tmp24 = sub i64 %.neg7, %tmp22
  %.03 = select i1 %tmp23, i64 1, i64 %tmp24
  br label %bb25

bb25:                                             ; preds = %bb15, %bb17
  %.06 = phi i64 [ %arg, %bb15 ], [ %.03, %bb17 ]
  %tmp26 = icmp sgt i64 %arg10, 0
  br i1 %tmp26, label %bb27, label %bb38

bb27:                                             ; preds = %bb25
  %tmp28 = mul nsw i64 %.06, %arg10
  %tmp29 = icmp ule i64 %tmp28, %arg11
  %tmp30 = icmp slt i64 %.06, 2
  %tmp31 = or i1 %tmp30, %tmp29
  br i1 %tmp31, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %bb27
  br label %bb32

bb32:                                             ; preds = %.lr.ph, %bb32
  %.18 = phi i64 [ %.06, %.lr.ph ], [ %tmp33, %bb32 ]
  %tmp33 = add nsw i64 %.18, -1
  %tmp34 = mul nsw i64 %tmp33, %arg10
  %tmp35 = icmp ule i64 %tmp34, %arg11
  %tmp36 = icmp slt i64 %.18, 3
  %tmp37 = or i1 %tmp36, %tmp35
  br i1 %tmp37, label %..loopexit_crit_edge, label %bb32

..loopexit_crit_edge:                             ; preds = %bb32
  %.lcssa = phi i64 [ %tmp33, %bb32 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %bb27
  %.1.lcssa = phi i64 [ %.lcssa, %..loopexit_crit_edge ], [ %.06, %bb27 ]
  br label %bb38

bb38:                                             ; preds = %.loopexit, %bb25
  %.2 = phi i64 [ %.06, %bb25 ], [ %.1.lcssa, %.loopexit ]
  %tmp39 = icmp ugt i64 %.2, %arg11
  %.3 = select i1 %tmp39, i64 %arg11, i64 %.2
  br label %bb40

bb40:                                             ; preds = %.split, %bb38
  %.04 = phi i64 [ 0, %.split ], [ %.3, %bb38 ]
  ret i64 %.04
}

define internal i64 @_computeNumChunks_chpl2(i64 %arg, i8 %arg8, i64 %arg9, i64 %arg10, i64 %arg11, i32 %arg12) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp13 = icmp slt i64 %arg10, 1
  br i1 %tmp13, label %bb39, label %bb14

bb14:                                             ; preds = %.split
  %tmp15 = icmp eq i8 %arg8, 0
  br i1 %tmp15, label %bb16, label %bb24

bb16:                                             ; preds = %bb14
  %tmp17 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp18 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp17, i32 -2)
  %tmp19 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp18, i32* %tmp19, align 8, !tbaa !110
  %tmp20 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg11, i32 %arg12)
  %tmp21 = call i64 @runningTasks(%chpl_locale_object* %tmp20)
  %tmp22 = icmp sgt i64 %tmp21, %arg
  %.neg6 = add i64 %arg, 1
  %tmp23 = sub i64 %.neg6, %tmp21
  %.03 = select i1 %tmp22, i64 1, i64 %tmp23
  br label %bb24

bb24:                                             ; preds = %bb14, %bb16
  %.05 = phi i64 [ %arg, %bb14 ], [ %.03, %bb16 ]
  %tmp25 = icmp sgt i64 %arg9, 0
  br i1 %tmp25, label %bb26, label %bb37

bb26:                                             ; preds = %bb24
  %tmp27 = mul nsw i64 %.05, %arg9
  %tmp28 = icmp ule i64 %tmp27, %arg10
  %tmp29 = icmp slt i64 %.05, 2
  %tmp30 = or i1 %tmp29, %tmp28
  br i1 %tmp30, label %.loopexit, label %.lr.ph

.lr.ph:                                           ; preds = %bb26
  br label %bb31

bb31:                                             ; preds = %.lr.ph, %bb31
  %.17 = phi i64 [ %.05, %.lr.ph ], [ %tmp32, %bb31 ]
  %tmp32 = add nsw i64 %.17, -1
  %tmp33 = mul nsw i64 %tmp32, %arg9
  %tmp34 = icmp ule i64 %tmp33, %arg10
  %tmp35 = icmp slt i64 %.17, 3
  %tmp36 = or i1 %tmp35, %tmp34
  br i1 %tmp36, label %..loopexit_crit_edge, label %bb31

..loopexit_crit_edge:                             ; preds = %bb31
  %.lcssa = phi i64 [ %tmp32, %bb31 ]
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %bb26
  %.1.lcssa = phi i64 [ %.lcssa, %..loopexit_crit_edge ], [ %.05, %bb26 ]
  br label %bb37

bb37:                                             ; preds = %.loopexit, %bb24
  %.2 = phi i64 [ %.05, %bb24 ], [ %.1.lcssa, %.loopexit ]
  %tmp38 = icmp ugt i64 %.2, %arg10
  %.3 = select i1 %tmp38, i64 %arg10, i64 %.2
  br label %bb39

bb39:                                             ; preds = %bb37, %.split
  %.04 = phi i64 [ 0, %.split ], [ %.3, %bb37 ]
  ret i64 %.04
}

define internal i64 @_computeNumChunks_chpl3(i64 %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load i64, i64* @dataParMinGranularity, align 8, !tbaa !138
  %tmp4 = load i8, i8* @dataParIgnoreRunningTasks, align 1, !tbaa !2
  %tmp5 = load i64, i64* @dataParTasksPerLocale, align 8, !tbaa !138
  %tmp6 = icmp eq i64 %tmp5, 0
  br i1 %tmp6, label %bb7, label %bb14

bb7:                                              ; preds = %.split
  %tmp8 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp9 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp8, i32 -2)
  %tmp10 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp9, i32* %tmp10, align 8, !tbaa !110
  %tmp11 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg1, i32 %arg2)
  %tmp12 = getelementptr inbounds %chpl_locale_object, %chpl_locale_object* %tmp11, i64 0, i32 6
  %tmp13 = load i64, i64* %tmp12, align 8, !tbaa !210
  br label %bb14

bb14:                                             ; preds = %.split, %bb7
  %.0 = phi i64 [ %tmp13, %bb7 ], [ %tmp5, %.split ]
  %tmp15 = call i64 @_computeNumChunks_chpl2(i64 %.0, i8 %tmp4, i64 %tmp3, i64 %arg, i64 %arg1, i32 %arg2)
  ret i64 %tmp15
}

define internal i64 @intCeilXDivByY_chpl(i64 %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = add i64 %arg, -1
  %tmp2 = udiv i64 %tmp, %arg1
  %tmp3 = add i64 %tmp2, 1
  ret i64 %tmp3
}

define internal void @_computeBlock_chpl(i64 %arg, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, [2 x i64]* nonnull %arg7, i64 %arg8, i32 %arg9) {
bb:
  %tmp = alloca [2 x i64], align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp10 = icmp eq i64 %arg, 0
  br i1 %tmp10, label %bb11, label %bb14

bb11:                                             ; preds = %.split
  %tmp12 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 1, i64* %tmp12, align 8, !tbaa !138
  %tmp13 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 0, i64* %tmp13, align 8, !tbaa !138
  br label %bb32

bb14:                                             ; preds = %.split
  %tmp15 = icmp eq i64 %arg3, 0
  br i1 %tmp15, label %bb20, label %bb16

bb16:                                             ; preds = %bb14
  %tmp17 = mul i64 %arg3, %arg
  %tmp18 = tail call i64 @intCeilXDivByY_chpl(i64 %tmp17, i64 %arg2)
  %tmp19 = add nsw i64 %tmp18, %arg6
  br label %bb20

bb20:                                             ; preds = %bb16, %bb14
  %.01 = phi i64 [ %tmp19, %bb16 ], [ %arg5, %bb14 ]
  %tmp21 = add nsw i64 %arg2, -1
  %tmp22 = icmp eq i64 %tmp21, %arg3
  br i1 %tmp22, label %bb29, label %bb23

bb23:                                             ; preds = %bb20
  %tmp24 = add nsw i64 %arg3, 1
  %tmp25 = mul i64 %tmp24, %arg
  %tmp26 = tail call i64 @intCeilXDivByY_chpl(i64 %tmp25, i64 %arg2)
  %tmp27 = add i64 %arg6, -1
  %tmp28 = add i64 %tmp27, %tmp26
  br label %bb29

bb29:                                             ; preds = %bb20, %bb23
  %.0 = phi i64 [ %tmp28, %bb23 ], [ %arg4, %bb20 ]
  %tmp30 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  store i64 %.01, i64* %tmp30, align 8, !tbaa !138
  %tmp31 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  store i64 %.0, i64* %tmp31, align 8, !tbaa !138
  br label %bb32

bb32:                                             ; preds = %bb29, %bb11
  %tmp33 = getelementptr inbounds [2 x i64], [2 x i64]* %arg7, i64 0, i64 0
  %tmp34 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 0
  %tmp35 = load i64, i64* %tmp34, align 8, !tbaa !138
  store i64 %tmp35, i64* %tmp33, align 8, !tbaa !138
  %tmp36 = getelementptr inbounds [2 x i64], [2 x i64]* %arg7, i64 0, i64 1
  %tmp37 = getelementptr inbounds [2 x i64], [2 x i64]* %tmp, i64 0, i64 1
  %tmp38 = load i64, i64* %tmp37, align 8, !tbaa !138
  store i64 %tmp38, i64* %tmp36, align 8, !tbaa !138
  ret void
}

define internal void @chpl__init_FormattedIO(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_FormattedIO_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @265, i64 0, i64 0), i64 11, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_FormattedIO_p, align 1, !tbaa !8
  tail call void @chpl__init_IO(i64 %arg, i32 %arg1)
  tail call void @chpl__init_Regexp(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_IO(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @deinit_chpl2(%channel_T_dynamic_T_chpl* @stderr_chpl)
  tail call void @deinit_chpl2(%channel_T_dynamic_T_chpl* @stdout_chpl)
  tail call void @deinit_chpl4(%channel_F_dynamic_T_chpl* @stdin_chpl)
  tail call void @deinit23(%string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 5), i64 %arg, i32 %arg1)
  tail call void @deinit23(%string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 4), i64 %arg, i32 %arg1)
  tail call void @deinit23(%string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 3), i64 %arg, i32 %arg1)
  tail call void @deinit23(%string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 2), i64 %arg, i32 %arg1)
  tail call void @deinit23(%string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 1), i64 %arg, i32 %arg1)
  tail call void @deinit23(%string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 0), i64 %arg, i32 %arg1)
  ret void
}

define internal void @chpl__init_IO(i64 %arg, i32 %arg31) {
bb:
  %tmp = alloca %string, align 8
  %tmp32 = alloca %string, align 8
  %tmp33 = alloca %string, align 8
  %tmp34 = alloca %string, align 8
  %tmp35 = alloca %string, align 8
  %tmp36 = alloca %string, align 8
  %tmp37 = alloca %string, align 8
  %tmp38 = alloca %string, align 8
  %tmp39 = alloca %string, align 8
  %tmp40 = alloca %string, align 8
  %tmp41 = alloca %string, align 8
  %tmp42 = alloca %string, align 8
  %tmp43 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp44 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp45 = alloca %channel_T_dynamic_T_chpl, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp46 = load i8, i8* @chpl__init_IO_p, align 1, !tbaa !2
  %tmp47 = icmp eq i8 %tmp46, 0
  br i1 %tmp47, label %bb48, label %bb82

bb48:                                             ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @266, i64 0, i64 0), i64 2, i64 %arg, i32 %arg31)
  %tmp49 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp50 = add i32 %tmp49, 1
  store i32 %tmp50, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_IO_p, align 1, !tbaa !8
  tail call void @chpl__init_SysBasic(i64 %arg, i32 %arg31)
  tail call void @chpl__init_SysError(i64 %arg, i32 %arg31)
  tail call void @chpl__init_FormattedIO(i64 %arg, i32 %arg31)
  tail call void @chpl_addModule(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @266, i64 0, i64 0), i8* bitcast (void (i64, i32)* @chpl__deinit_IO to i8*), i64 %arg, i32 %arg31)
  %tmp51 = load %string, %string* @_str_literal_2485, align 16
  %tmp52 = load %string, %string* @_str_literal_2483, align 16
  %tmp53 = load %string, %string* @_str_literal_2481, align 16
  %tmp54 = load %string, %string* @_str_literal_2479, align 16
  %tmp55 = load %string, %string* @_str_literal_2477, align 16
  %tmp56 = load %string, %string* @_str_literal_405, align 16
  store i32 0, i32* @IOHINT_NONE_chpl, align 4, !tbaa !6
  %tmp57 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @IOHINT_NONE_chpl to i8*))
  store i32 256, i32* @IOHINT_RANDOM_chpl, align 4, !tbaa !6
  %tmp58 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @IOHINT_RANDOM_chpl to i8*))
  store i32 512, i32* @IOHINT_SEQUENTIAL_chpl, align 4, !tbaa !6
  %tmp59 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @IOHINT_SEQUENTIAL_chpl to i8*))
  store i32 4096, i32* @IOHINT_CACHED_chpl, align 4, !tbaa !6
  %tmp60 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @IOHINT_CACHED_chpl to i8*))
  store i32 8192, i32* @IOHINT_PARALLEL_chpl, align 4, !tbaa !6
  %tmp61 = tail call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (i32* @IOHINT_PARALLEL_chpl to i8*))
  store %string %tmp56, %string* %tmp, align 8
  store %string %tmp55, %string* %tmp32, align 8
  store %string %tmp54, %string* %tmp33, align 8
  store %string %tmp53, %string* %tmp34, align 8
  store %string %tmp52, %string* %tmp35, align 8
  store %string %tmp51, %string* %tmp36, align 8
  call void @init35(%string* %tmp37, %string* %tmp, i8 1, i64 %arg, i32 %arg31)
  %tmp62 = load %string, %string* %tmp37, align 8
  call void @init35(%string* %tmp38, %string* %tmp32, i8 1, i64 %arg, i32 %arg31)
  %tmp63 = load %string, %string* %tmp38, align 8
  call void @init35(%string* %tmp39, %string* %tmp33, i8 1, i64 %arg, i32 %arg31)
  %tmp64 = load %string, %string* %tmp39, align 8
  call void @init35(%string* %tmp40, %string* %tmp34, i8 1, i64 %arg, i32 %arg31)
  %tmp65 = load %string, %string* %tmp40, align 8
  call void @init35(%string* %tmp41, %string* %tmp35, i8 1, i64 %arg, i32 %arg31)
  %tmp66 = load %string, %string* %tmp41, align 8
  call void @init35(%string* %tmp42, %string* %tmp36, i8 1, i64 %arg, i32 %arg31)
  %tmp67 = load %string, %string* %tmp42, align 8
  store %string %tmp62, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 0), align 16
  store %string %tmp63, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 1), align 16
  store %string %tmp64, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 2), align 16
  store %string %tmp65, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 3), align 16
  store %string %tmp66, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 4), align 16
  store %string %tmp67, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 5), align 16
  call void @stdinInit_chpl(%channel_F_dynamic_T_chpl* %tmp43, i64 %arg, i32 %arg31)
  %tmp68 = bitcast %channel_F_dynamic_T_chpl* %tmp43 to i64*
  %.unpack10 = load i64, i64* %tmp68, align 8
  %.elt1 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp43, i64 0, i32 1
  %tmp69 = bitcast %struct.qio_channel_s** %.elt1 to i64*
  %.unpack29 = load i64, i64* %tmp69, align 8
  %.elt3 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp43, i64 0, i32 2
  %tmp70 = bitcast %chpl_locale_object** %.elt3 to i64*
  %.unpack48 = load i64, i64* %tmp70, align 8
  store i64 %.unpack10, i64* bitcast (%channel_F_dynamic_T_chpl* @stdin_chpl to i64*), align 16
  store i64 %.unpack29, i64* bitcast (%struct.qio_channel_s** getelementptr inbounds (%channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* @stdin_chpl, i64 0, i32 1) to i64*), align 8
  store i64 %.unpack48, i64* bitcast (%chpl_locale_object** getelementptr inbounds (%channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* @stdin_chpl, i64 0, i32 2) to i64*), align 16
  %tmp71 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%channel_F_dynamic_T_chpl* @stdin_chpl to i8*))
  call void @stdoutInit_chpl(%channel_T_dynamic_T_chpl* %tmp44, i64 %arg, i32 %arg31)
  %tmp72 = bitcast %channel_T_dynamic_T_chpl* %tmp44 to i64*
  %.unpack20 = load i64, i64* %tmp72, align 8
  %.elt11 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp44, i64 0, i32 1
  %tmp73 = bitcast %struct.qio_channel_s** %.elt11 to i64*
  %.unpack1219 = load i64, i64* %tmp73, align 8
  %.elt13 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp44, i64 0, i32 2
  %tmp74 = bitcast %chpl_locale_object** %.elt13 to i64*
  %.unpack1418 = load i64, i64* %tmp74, align 8
  store i64 %.unpack20, i64* bitcast (%channel_T_dynamic_T_chpl* @stdout_chpl to i64*), align 16
  store i64 %.unpack1219, i64* bitcast (%struct.qio_channel_s** getelementptr inbounds (%channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* @stdout_chpl, i64 0, i32 1) to i64*), align 8
  store i64 %.unpack1418, i64* bitcast (%chpl_locale_object** getelementptr inbounds (%channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* @stdout_chpl, i64 0, i32 2) to i64*), align 16
  %tmp75 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%channel_T_dynamic_T_chpl* @stdout_chpl to i8*))
  call void @stderrInit_chpl(%channel_T_dynamic_T_chpl* %tmp45, i64 %arg, i32 %arg31)
  %tmp76 = bitcast %channel_T_dynamic_T_chpl* %tmp45 to i64*
  %.unpack30 = load i64, i64* %tmp76, align 8
  %.elt21 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp45, i64 0, i32 1
  %tmp77 = bitcast %struct.qio_channel_s** %.elt21 to i64*
  %.unpack2229 = load i64, i64* %tmp77, align 8
  %.elt23 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp45, i64 0, i32 2
  %tmp78 = bitcast %chpl_locale_object** %.elt23 to i64*
  %.unpack2428 = load i64, i64* %tmp78, align 8
  store i64 %.unpack30, i64* bitcast (%channel_T_dynamic_T_chpl* @stderr_chpl to i64*), align 16
  store i64 %.unpack2229, i64* bitcast (%struct.qio_channel_s** getelementptr inbounds (%channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* @stderr_chpl, i64 0, i32 1) to i64*), align 8
  store i64 %.unpack2428, i64* bitcast (%chpl_locale_object** getelementptr inbounds (%channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* @stderr_chpl, i64 0, i32 2) to i64*), align 16
  %tmp79 = call {}* @llvm.invariant.start.p0i8(i64 24, i8* bitcast (%channel_T_dynamic_T_chpl* @stderr_chpl to i8*))
  %tmp80 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp81 = add i32 %tmp80, -1
  store i32 %tmp81, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb82

bb82:                                             ; preds = %.split, %bb48
  ret void
}

define internal void @defaultIOStyle_chpl(%struct.qio_style_s* nonnull %arg) {
bb:
  %tmp = alloca %struct.qio_style_s, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @qio_style_init_default(%struct.qio_style_s* nonnull %tmp)
  %tmp1 = load %struct.qio_style_s, %struct.qio_style_s* %tmp, align 8
  store %struct.qio_style_s %tmp1, %struct.qio_style_s* %arg, align 8
  ret void
}

define internal void @init_chpl(%file_chpl* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp4 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp3, i32 -2)
  %tmp5 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i64 0, i32 0
  store i32 %tmp4, i32* %tmp5, align 8, !tbaa !110
  %tmp6 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp, i64 %arg1, i32 %arg2)
  %tmp7 = getelementptr inbounds %file_chpl, %file_chpl* %arg, i64 0, i32 0
  store %chpl_locale_object* %tmp6, %chpl_locale_object** %tmp7, align 8, !tbaa !331
  %tmp8 = getelementptr inbounds %file_chpl, %file_chpl* %arg, i64 0, i32 1
  store %struct.qio_file_s* null, %struct.qio_file_s** %tmp8, align 8, !tbaa !334
  ret void
}

define internal void @check_chpl(%file_chpl* nonnull %arg, %chpl_Error_object** nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = load %string, %string* @_str_literal_2255, align 16
  store %string %tmp4, %string* %tmp, align 8
  %tmp5 = bitcast %string* %tmp to i8*
  %tmp6 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp5)
  %tmp7 = getelementptr inbounds %file_chpl, %file_chpl* %arg, i64 0, i32 1
  %tmp8 = bitcast %struct.qio_file_s** %tmp7 to i8**
  %tmp9 = load i8*, i8** %tmp8, align 8, !tbaa !334
  %tmp10 = tail call i1 @is_c_nil(i8* %tmp9)
  br i1 %tmp10, label %bb11, label %bb15

bb11:                                             ; preds = %.split
  %tmp12 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 9, %string* %tmp, i64 %arg2, i32 %arg3)
  %tmp13 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp12, i64 0, i32 0
  %tmp14 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp13, i64 %arg2, i32 %arg3)
  store %chpl_Error_object* %tmp14, %chpl_Error_object** %arg1, align 8, !tbaa !125
  br label %bb15

bb15:                                             ; preds = %.split, %bb11
  ret void
}

define internal void @deinit_chpl(%file_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %file_chpl, %file_chpl* %arg, i64 0, i32 1
  %tmp1 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp, align 8, !tbaa !334
  tail call void @qio_file_release(%struct.qio_file_s* %tmp1)
  store %struct.qio_file_s* null, %struct.qio_file_s** %tmp, align 8, !tbaa !334
  ret void
}

define internal void @_style_chpl(%file_chpl* nonnull %arg, %chpl_Error_object** nonnull %arg1, %struct.qio_style_s* nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  %tmp5 = alloca %struct.qio_style_s, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @check_chpl(%file_chpl* %arg, %chpl_Error_object** %tmp, i64 %arg3, i32 %arg4)
  %tmp6 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp7 = icmp eq %chpl_Error_object* %tmp6, null
  br i1 %tmp7, label %bb9, label %bb8

bb8:                                              ; preds = %.split
  store %chpl_Error_object* %tmp6, %chpl_Error_object** %arg1, align 8, !tbaa !125
  br label %bb13

bb9:                                              ; preds = %.split
  %tmp10 = getelementptr inbounds %file_chpl, %file_chpl* %arg, i64 0, i32 1
  %tmp11 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp10, align 8, !tbaa !334
  call void @qio_file_get_style(%struct.qio_file_s* %tmp11, %struct.qio_style_s* nonnull %tmp5)
  %tmp12 = load %struct.qio_style_s, %struct.qio_style_s* %tmp5, align 8
  br label %bb13

bb13:                                             ; preds = %bb9, %bb8
  %.0 = phi %struct.qio_style_s [ undef, %bb8 ], [ %tmp12, %bb9 ]
  store %struct.qio_style_s %.0, %struct.qio_style_s* %arg2, align 8
  ret void
}

define internal void @path_chpl(%file_chpl* nonnull %arg, %chpl_Error_object** nonnull %arg2, %string* nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %string, align 8
  %tmp6 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp6, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca i8*, align 8
  %tmp9 = alloca i8*, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp12, align 8
  %tmp13 = load %string, %string* @_str_literal_2273, align 16
  store %string %tmp13, %string* %tmp, align 8
  %tmp14 = bitcast %string* %tmp to i8*
  %tmp15 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp14)
  store %chpl_Error_object* null, %chpl_Error_object** %tmp6, align 8, !tbaa !123
  call void @check_chpl(%file_chpl* %arg, %chpl_Error_object** %tmp6, i64 %arg4, i32 %arg5)
  %tmp16 = load %chpl_Error_object*, %chpl_Error_object** %tmp6, align 8, !tbaa !125
  %tmp17 = icmp eq %chpl_Error_object* %tmp16, null
  br i1 %tmp17, label %bb19, label %bb18

bb18:                                             ; preds = %.split
  store %chpl_Error_object* %tmp16, %chpl_Error_object** %arg2, align 8, !tbaa !125
  br label %bb53

bb19:                                             ; preds = %.split
  call void @init34(%string* %tmp7, i64 %arg4, i32 %arg5)
  %tmp20 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  store i8* null, i8** %tmp8, align 8, !tbaa !227
  store i8* null, i8** %tmp9, align 8, !tbaa !227
  %tmp21 = getelementptr inbounds %file_chpl, %file_chpl* %arg, i64 0, i32 1
  %tmp22 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp21, align 8, !tbaa !334
  %tmp23 = call %struct.qio_err_s* @qio_file_path(%struct.qio_file_s* %tmp22, i8** nonnull %tmp8)
  %tmp24 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp23)
  %tmp25 = icmp eq i32 %tmp24, 0
  br i1 %tmp25, label %bb26, label %bb30

bb26:                                             ; preds = %bb19
  %tmp27 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp21, align 8, !tbaa !334
  %tmp28 = load i8*, i8** %tmp8, align 8, !tbaa !227
  %tmp29 = call %struct.qio_err_s* @qio_shortest_path(%struct.qio_file_s* %tmp27, i8** nonnull %tmp9, i8* %tmp28)
  br label %bb30

bb30:                                             ; preds = %bb26, %bb19
  %.01 = phi %struct.qio_err_s* [ %tmp29, %bb26 ], [ %tmp23, %bb19 ]
  %tmp31 = load i8*, i8** %tmp8, align 8, !tbaa !227
  %tmp32 = call i32 @string_compare(i8* %tmp31, i8* null)
  %tmp33 = icmp eq i32 %tmp32, 0
  br i1 %tmp33, label %bb36, label %bb34

bb34:                                             ; preds = %bb30
  %tmp35 = trunc i64 %arg4 to i32
  call void @chpl_rt_free_c_string(i8** nonnull %tmp8, i32 %tmp35, i32 %arg5)
  br label %bb36

bb36:                                             ; preds = %bb30, %bb34
  %tmp37 = call i32 @qio_err_iserr(%struct.qio_err_s* %.01)
  %tmp38 = icmp eq i32 %tmp37, 0
  br i1 %tmp38, label %bb39, label %bb44

bb39:                                             ; preds = %bb36
  %tmp40 = load i8*, i8** %tmp9, align 8, !tbaa !227
  %tmp41 = call i64 @string_length(i8* %tmp40)
  %tmp42 = load i8*, i8** %tmp9, align 8, !tbaa !227
  call void @init36(%string* %tmp11, i8* %tmp42, i64 %tmp41, i8 1, i8 0, i64 %arg4, i32 %arg5)
  %tmp43 = load %string, %string* %tmp11, align 8
  store %string %tmp43, %string* %tmp10, align 8
  call void @chpl___ASSIGN_2(%string* %tmp7, %string* %tmp10, i64 %arg4, i32 %arg5)
  call void @deinit23(%string* %tmp10, i64 %arg4, i32 %arg5)
  br label %bb44

bb44:                                             ; preds = %bb39, %bb36
  %tmp45 = call i32 @qio_err_iserr(%struct.qio_err_s* %.01)
  %tmp46 = icmp eq i32 %tmp45, 0
  br i1 %tmp46, label %bb51, label %bb47

bb47:                                             ; preds = %bb44
  store %chpl_Error_object* null, %chpl_Error_object** %tmp12, align 8, !tbaa !123
  call void @ioerror_chpl3(%struct.qio_err_s* %.01, %string* %tmp, %chpl_Error_object** %tmp12, i64 %arg4, i32 %arg5)
  %tmp48 = load %chpl_Error_object*, %chpl_Error_object** %tmp12, align 8, !tbaa !125
  %tmp49 = icmp eq %chpl_Error_object* %tmp48, null
  br i1 %tmp49, label %bb51, label %bb50

bb50:                                             ; preds = %bb47
  store %chpl_Error_object* %tmp48, %chpl_Error_object** %arg2, align 8, !tbaa !125
  call void @deinit23(%string* %tmp7, i64 %arg4, i32 %arg5)
  br label %bb53

bb51:                                             ; preds = %bb47, %bb44
  %tmp52 = load %string, %string* %tmp7, align 8
  br label %bb53

bb53:                                             ; preds = %bb51, %bb50, %bb18
  %.0 = phi %string [ undef, %bb18 ], [ undef, %bb50 ], [ %tmp52, %bb51 ]
  store %string %.0, %string* %arg3, align 8
  ret void
}

define internal void @tryGetPath_chpl(%file_chpl* nonnull %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = load %string, %string* @_str_literal_2276, align 16
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @path_chpl(%file_chpl* %arg, %chpl_Error_object** %tmp, %string* %tmp4, i64 %arg2, i32 %arg3)
  %tmp8 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp9 = icmp eq %chpl_Error_object* %tmp8, null
  br i1 %tmp9, label %bb11, label %bb10

bb10:                                             ; preds = %.split
  store %string %tmp7, %string* %tmp5, align 8
  call void @init35(%string* %tmp6, %string* %tmp5, i8 1, i64 %arg2, i32 %arg3)
  br label %bb11

bb11:                                             ; preds = %.split, %bb10
  %.0.in = phi %string* [ %tmp6, %bb10 ], [ %tmp4, %.split ]
  %.0 = load %string, %string* %.0.in, align 8
  store %string %.0, %string* %arg1, align 8
  ret void
}

define internal void @openfd_chpl(i32 %arg, i32 %arg5, %struct.qio_style_s* nonnull %arg6, %chpl_Error_object** nonnull %arg7, %file_chpl* nonnull %arg8, i64 %arg9, i32 %arg10) {
bb:
  %tmp = alloca %string, align 8
  %tmp11 = alloca %struct.qio_style_s, align 8
  %tmp12 = alloca %file_chpl, align 8
  %tmp13 = alloca %struct.chpl_localeID_t, align 8
  %tmp14 = alloca i8*, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp20, align 8
  %tmp21 = load %string, %string* @_str_literal_2350, align 16
  store %string %tmp21, %string* %tmp, align 8
  %tmp22 = bitcast %string* %tmp to i8*
  %tmp23 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp22)
  %tmp24 = load %string, %string* @_str_literal_2276, align 16
  %tmp25 = load %struct.qio_style_s, %struct.qio_style_s* %arg6, align 8
  store %struct.qio_style_s %tmp25, %struct.qio_style_s* %tmp11, align 8
  call void @init_chpl(%file_chpl* %tmp12, i64 %arg9, i32 %arg10)
  %tmp26 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp27 = call i32 @chpl_rt_buildLocaleID(i32 %tmp26, i32 -2)
  %tmp28 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp13, i64 0, i32 0
  store i32 %tmp27, i32* %tmp28, align 8, !tbaa !110
  %tmp29 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp13, i64 %arg9, i32 %arg10)
  %tmp30 = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 0
  store %chpl_locale_object* %tmp29, %chpl_locale_object** %tmp30, align 8, !tbaa !331
  %tmp31 = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 1
  %tmp32 = call %struct._IO_FILE* @chpl_cnullfile()
  %tmp33 = call %struct.qio_err_s* @qio_file_init(%struct.qio_file_s** nonnull %tmp31, %struct._IO_FILE* %tmp32, i32 %arg, i32 %arg5, %struct.qio_style_s* nonnull %tmp11, i32 0)
  %tmp34 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp33)
  %tmp35 = icmp eq i32 %tmp34, 0
  br i1 %tmp35, label %bb50, label %bb36

bb36:                                             ; preds = %.split
  store i8* null, i8** %tmp14, align 8, !tbaa !227
  %tmp37 = call %struct.qio_err_s* @qio_file_path_for_fd(i32 %arg, i8** nonnull %tmp14)
  %tmp38 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp37)
  %tmp39 = icmp eq i32 %tmp38, 0
  br i1 %tmp39, label %bb41, label %bb40

bb40:                                             ; preds = %bb36
  store %string %tmp24, %string* %tmp17, align 8
  call void @init35(%string* %tmp18, %string* %tmp17, i8 1, i64 %arg9, i32 %arg10)
  br label %bb45

bb41:                                             ; preds = %bb36
  %tmp42 = load i8*, i8** %tmp14, align 8, !tbaa !227
  %tmp43 = call i64 @string_length(i8* %tmp42)
  %tmp44 = load i8*, i8** %tmp14, align 8, !tbaa !227
  call void @init36(%string* %tmp19, i8* %tmp44, i64 %tmp43, i8 1, i8 0, i64 %arg9, i32 %arg10)
  br label %bb45

bb45:                                             ; preds = %bb41, %bb40
  %storemerge.in = phi %string* [ %tmp18, %bb40 ], [ %tmp19, %bb41 ]
  %storemerge = load %string, %string* %storemerge.in, align 8
  store %string %storemerge, %string* %tmp16, align 8
  call void @init35(%string* %tmp15, %string* %tmp16, i8 1, i64 %arg9, i32 %arg10)
  store %chpl_Error_object* null, %chpl_Error_object** %tmp20, align 8, !tbaa !123
  call void @ioerror_chpl2(%struct.qio_err_s* %tmp33, %string* %tmp, %string* %tmp15, %chpl_Error_object** %tmp20, i64 %arg9, i32 %arg10)
  %tmp46 = load %chpl_Error_object*, %chpl_Error_object** %tmp20, align 8, !tbaa !125
  %tmp47 = icmp eq %chpl_Error_object* %tmp46, null
  br i1 %tmp47, label %bb49, label %bb48

bb48:                                             ; preds = %bb45
  store %chpl_Error_object* %tmp46, %chpl_Error_object** %arg7, align 8, !tbaa !125
  call void @deinit23(%string* %tmp16, i64 %arg9, i32 %arg10)
  call void @deinit23(%string* %tmp15, i64 %arg9, i32 %arg10)
  call void @deinit_chpl(%file_chpl* %tmp12)
  br label %bb53

bb49:                                             ; preds = %bb45
  call void @deinit23(%string* %tmp16, i64 %arg9, i32 %arg10)
  call void @deinit23(%string* %tmp15, i64 %arg9, i32 %arg10)
  br label %bb50

bb50:                                             ; preds = %.split, %bb49
  %.elt = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp51 = insertvalue %file_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt1 = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 1
  %.unpack2 = load %struct.qio_file_s*, %struct.qio_file_s** %.elt1, align 8
  %tmp52 = insertvalue %file_chpl %tmp51, %struct.qio_file_s* %.unpack2, 1
  br label %bb53

bb53:                                             ; preds = %bb50, %bb48
  %.0 = phi %file_chpl [ undef, %bb48 ], [ %tmp52, %bb50 ]
  %.repack = getelementptr inbounds %file_chpl, %file_chpl* %arg8, i64 0, i32 0
  %.0.elt = extractvalue %file_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack, align 8
  %.repack3 = getelementptr inbounds %file_chpl, %file_chpl* %arg8, i64 0, i32 1
  %.0.elt4 = extractvalue %file_chpl %.0, 1
  store %struct.qio_file_s* %.0.elt4, %struct.qio_file_s** %.repack3, align 8
  ret void
}

define internal void @openfp_chpl(%struct._IO_FILE* %arg, i32 %arg5, %struct.qio_style_s* nonnull %arg6, %chpl_Error_object** nonnull %arg7, %file_chpl* nonnull %arg8, i64 %arg9, i32 %arg10) {
bb:
  %tmp = alloca %string, align 8
  %tmp11 = alloca %struct.qio_style_s, align 8
  %tmp12 = alloca %file_chpl, align 8
  %tmp13 = alloca %struct.chpl_localeID_t, align 8
  %tmp14 = alloca i8*, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp20, align 8
  %tmp21 = load %string, %string* @_str_literal_2354, align 16
  store %string %tmp21, %string* %tmp, align 8
  %tmp22 = bitcast %string* %tmp to i8*
  %tmp23 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp22)
  %tmp24 = load %string, %string* @_str_literal_2276, align 16
  %tmp25 = load %struct.qio_style_s, %struct.qio_style_s* %arg6, align 8
  store %struct.qio_style_s %tmp25, %struct.qio_style_s* %tmp11, align 8
  call void @init_chpl(%file_chpl* %tmp12, i64 %arg9, i32 %arg10)
  %tmp26 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp27 = call i32 @chpl_rt_buildLocaleID(i32 %tmp26, i32 -2)
  %tmp28 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp13, i64 0, i32 0
  store i32 %tmp27, i32* %tmp28, align 8, !tbaa !110
  %tmp29 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp13, i64 %arg9, i32 %arg10)
  %tmp30 = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 0
  store %chpl_locale_object* %tmp29, %chpl_locale_object** %tmp30, align 8, !tbaa !331
  %tmp31 = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 1
  %tmp32 = call %struct.qio_err_s* @qio_file_init(%struct.qio_file_s** nonnull %tmp31, %struct._IO_FILE* %arg, i32 -1, i32 %arg5, %struct.qio_style_s* nonnull %tmp11, i32 1)
  %tmp33 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp32)
  %tmp34 = icmp eq i32 %tmp33, 0
  br i1 %tmp34, label %bb49, label %bb35

bb35:                                             ; preds = %.split
  store i8* null, i8** %tmp14, align 8, !tbaa !227
  %tmp36 = call %struct.qio_err_s* @qio_file_path_for_fp(%struct._IO_FILE* %arg, i8** nonnull %tmp14)
  %tmp37 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp36)
  %tmp38 = icmp eq i32 %tmp37, 0
  br i1 %tmp38, label %bb40, label %bb39

bb39:                                             ; preds = %bb35
  store %string %tmp24, %string* %tmp17, align 8
  call void @init35(%string* %tmp18, %string* %tmp17, i8 1, i64 %arg9, i32 %arg10)
  br label %bb44

bb40:                                             ; preds = %bb35
  %tmp41 = load i8*, i8** %tmp14, align 8, !tbaa !227
  %tmp42 = call i64 @string_length(i8* %tmp41)
  %tmp43 = load i8*, i8** %tmp14, align 8, !tbaa !227
  call void @init36(%string* %tmp19, i8* %tmp43, i64 %tmp42, i8 1, i8 0, i64 %arg9, i32 %arg10)
  br label %bb44

bb44:                                             ; preds = %bb40, %bb39
  %storemerge.in = phi %string* [ %tmp18, %bb39 ], [ %tmp19, %bb40 ]
  %storemerge = load %string, %string* %storemerge.in, align 8
  store %string %storemerge, %string* %tmp16, align 8
  call void @init35(%string* %tmp15, %string* %tmp16, i8 1, i64 %arg9, i32 %arg10)
  store %chpl_Error_object* null, %chpl_Error_object** %tmp20, align 8, !tbaa !123
  call void @ioerror_chpl2(%struct.qio_err_s* %tmp32, %string* %tmp, %string* %tmp15, %chpl_Error_object** %tmp20, i64 %arg9, i32 %arg10)
  %tmp45 = load %chpl_Error_object*, %chpl_Error_object** %tmp20, align 8, !tbaa !125
  %tmp46 = icmp eq %chpl_Error_object* %tmp45, null
  br i1 %tmp46, label %bb48, label %bb47

bb47:                                             ; preds = %bb44
  store %chpl_Error_object* %tmp45, %chpl_Error_object** %arg7, align 8, !tbaa !125
  call void @deinit23(%string* %tmp16, i64 %arg9, i32 %arg10)
  call void @deinit23(%string* %tmp15, i64 %arg9, i32 %arg10)
  call void @deinit_chpl(%file_chpl* %tmp12)
  br label %bb52

bb48:                                             ; preds = %bb44
  call void @deinit23(%string* %tmp16, i64 %arg9, i32 %arg10)
  call void @deinit23(%string* %tmp15, i64 %arg9, i32 %arg10)
  br label %bb49

bb49:                                             ; preds = %.split, %bb48
  %.elt = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp50 = insertvalue %file_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt1 = getelementptr inbounds %file_chpl, %file_chpl* %tmp12, i64 0, i32 1
  %.unpack2 = load %struct.qio_file_s*, %struct.qio_file_s** %.elt1, align 8
  %tmp51 = insertvalue %file_chpl %tmp50, %struct.qio_file_s* %.unpack2, 1
  br label %bb52

bb52:                                             ; preds = %bb49, %bb47
  %.0 = phi %file_chpl [ undef, %bb47 ], [ %tmp51, %bb49 ]
  %.repack = getelementptr inbounds %file_chpl, %file_chpl* %arg8, i64 0, i32 0
  %.0.elt = extractvalue %file_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack, align 8
  %.repack3 = getelementptr inbounds %file_chpl, %file_chpl* %arg8, i64 0, i32 1
  %.0.elt4 = extractvalue %file_chpl %.0, 1
  store %struct.qio_file_s* %.0.elt4, %struct.qio_file_s** %.repack3, align 8
  ret void
}

define internal void @chpl___ASSIGN_3(%channel_T_dynamic_T_chpl* nonnull %arg, %channel_T_dynamic_T_chpl* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg1, i64 0, i32 1
  %tmp2 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !335
  tail call void @qio_channel_retain(%struct.qio_channel_s* %tmp2)
  %tmp3 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  %tmp4 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp3, align 8, !tbaa !335
  tail call void @qio_channel_release(%struct.qio_channel_s* %tmp4)
  %tmp5 = bitcast %channel_T_dynamic_T_chpl* %arg1 to i64*
  %tmp6 = load i64, i64* %tmp5, align 8, !tbaa !338
  %tmp7 = bitcast %channel_T_dynamic_T_chpl* %arg to i64*
  store i64 %tmp6, i64* %tmp7, align 8, !tbaa !338
  %tmp8 = bitcast %struct.qio_channel_s** %tmp to i64*
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !335
  %tmp10 = bitcast %struct.qio_channel_s** %tmp3 to i64*
  store i64 %tmp9, i64* %tmp10, align 8, !tbaa !335
  ret void
}

define internal void @chpl___ASSIGN_4(%channel_F_dynamic_T_chpl* nonnull %arg, %channel_F_dynamic_T_chpl* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg1, i64 0, i32 1
  %tmp2 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !339
  tail call void @qio_channel_retain(%struct.qio_channel_s* %tmp2)
  %tmp3 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 1
  %tmp4 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp3, align 8, !tbaa !339
  tail call void @qio_channel_release(%struct.qio_channel_s* %tmp4)
  %tmp5 = bitcast %channel_F_dynamic_T_chpl* %arg1 to i64*
  %tmp6 = load i64, i64* %tmp5, align 8, !tbaa !341
  %tmp7 = bitcast %channel_F_dynamic_T_chpl* %arg to i64*
  store i64 %tmp6, i64* %tmp7, align 8, !tbaa !341
  %tmp8 = bitcast %struct.qio_channel_s** %tmp to i64*
  %tmp9 = load i64, i64* %tmp8, align 8, !tbaa !339
  %tmp10 = bitcast %struct.qio_channel_s** %tmp3 to i64*
  store i64 %tmp9, i64* %tmp10, align 8, !tbaa !339
  ret void
}

define internal void @init_chpl2(%channel_F_dynamic_T_chpl* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 0
  store %chpl_locale_object* null, %chpl_locale_object** %tmp, align 8, !tbaa !341
  %tmp3 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 1
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp3, align 8, !tbaa !339
  %tmp4 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 2
  store %chpl_locale_object* null, %chpl_locale_object** %tmp4, align 8, !tbaa !342
  ret void
}

define internal void @init_chpl3(%channel_T_dynamic_T_chpl* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 0
  store %chpl_locale_object* null, %chpl_locale_object** %tmp, align 8, !tbaa !338
  %tmp3 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp3, align 8, !tbaa !335
  %tmp4 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 2
  store %chpl_locale_object* null, %chpl_locale_object** %tmp4, align 8, !tbaa !343
  ret void
}

define internal void @init_chpl4(%channel_T_dynamic_F_chpl* nonnull %arg, %chpl_locale_object* %arg1, %struct.qio_channel_s* %arg2, %chpl_locale_object* %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 0
  store %chpl_locale_object* %arg1, %chpl_locale_object** %tmp, align 8, !tbaa !344
  %tmp4 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  store %struct.qio_channel_s* %arg2, %struct.qio_channel_s** %tmp4, align 8, !tbaa !346
  %tmp5 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 2
  store %chpl_locale_object* %arg3, %chpl_locale_object** %tmp5, align 8, !tbaa !347
  ret void
}

define internal void @init_chpl5(%channel_T_dynamic_T_chpl* nonnull %arg, %file_chpl* nonnull %arg1, %struct.qio_err_s** nonnull %arg2, i32 %arg3, i64 %arg4, i64 %arg5, %struct.qio_style_s* nonnull %arg6, i64 %arg7, i32 %arg8) {
bb:
  %tmp = alloca %struct.qio_style_s, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp9 = load %struct.qio_style_s, %struct.qio_style_s* %arg6, align 8
  store %struct.qio_style_s %tmp9, %struct.qio_style_s* %tmp, align 8
  %tmp10 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 0
  store %chpl_locale_object* null, %chpl_locale_object** %tmp10, align 8, !tbaa !338
  %tmp11 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp11, align 8, !tbaa !335
  %tmp12 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 2
  store %chpl_locale_object* null, %chpl_locale_object** %tmp12, align 8, !tbaa !343
  %tmp13 = bitcast %file_chpl* %arg1 to i64*
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !331
  %tmp15 = bitcast %channel_T_dynamic_T_chpl* %arg to i64*
  store i64 %tmp14, i64* %tmp15, align 8, !tbaa !338
  %tmp16 = getelementptr inbounds %file_chpl, %file_chpl* %arg1, i64 0, i32 1
  %tmp17 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp16, align 8, !tbaa !334
  %tmp18 = call %struct.qio_err_s* @qio_channel_create(%struct.qio_channel_s** nonnull %tmp11, %struct.qio_file_s* %tmp17, i32 %arg3, i32 0, i32 1, i64 %arg4, i64 %arg5, %struct.qio_style_s* nonnull %tmp)
  store %struct.qio_err_s* %tmp18, %struct.qio_err_s** %arg2, align 8, !tbaa !348
  ret void
}

define internal void @init_chpl6(%channel_F_dynamic_T_chpl* nonnull %arg, %file_chpl* nonnull %arg1, %struct.qio_err_s** nonnull %arg2, i32 %arg3, i64 %arg4, i64 %arg5, %struct.qio_style_s* nonnull %arg6, i64 %arg7, i32 %arg8) {
bb:
  %tmp = alloca %struct.qio_style_s, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp9 = load %struct.qio_style_s, %struct.qio_style_s* %arg6, align 8
  store %struct.qio_style_s %tmp9, %struct.qio_style_s* %tmp, align 8
  %tmp10 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 0
  store %chpl_locale_object* null, %chpl_locale_object** %tmp10, align 8, !tbaa !341
  %tmp11 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 1
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp11, align 8, !tbaa !339
  %tmp12 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 2
  store %chpl_locale_object* null, %chpl_locale_object** %tmp12, align 8, !tbaa !342
  %tmp13 = bitcast %file_chpl* %arg1 to i64*
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !331
  %tmp15 = bitcast %channel_F_dynamic_T_chpl* %arg to i64*
  store i64 %tmp14, i64* %tmp15, align 8, !tbaa !341
  %tmp16 = getelementptr inbounds %file_chpl, %file_chpl* %arg1, i64 0, i32 1
  %tmp17 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp16, align 8, !tbaa !334
  %tmp18 = call %struct.qio_err_s* @qio_channel_create(%struct.qio_channel_s** nonnull %tmp11, %struct.qio_file_s* %tmp17, i32 %arg3, i32 1, i32 0, i64 %arg4, i64 %arg5, %struct.qio_style_s* nonnull %tmp)
  store %struct.qio_err_s* %tmp18, %struct.qio_err_s** %arg2, align 8, !tbaa !348
  ret void
}

define internal void @deinit_chpl2(%channel_T_dynamic_T_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !335
  tail call void @qio_channel_release(%struct.qio_channel_s* %tmp1)
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp, align 8, !tbaa !335
  ret void
}

define internal void @deinit_chpl3(%channel_T_dynamic_F_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !346
  tail call void @qio_channel_release(%struct.qio_channel_s* %tmp1)
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp, align 8, !tbaa !346
  ret void
}

define internal void @deinit_chpl4(%channel_F_dynamic_T_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 1
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !339
  tail call void @qio_channel_release(%struct.qio_channel_s* %tmp1)
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp, align 8, !tbaa !339
  ret void
}

define internal void @init_chpl7(%ioNewline_chpl* nonnull %arg, i8 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %ioNewline_chpl, %ioNewline_chpl* %arg, i64 0, i32 0
  store i8 %arg1, i8* %tmp, align 1, !tbaa !349
  ret void
}

define internal void @init_chpl8(%ioLiteral_chpl* nonnull %arg, %string* nonnull %arg1, i8 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load %string, %string* %arg1, align 8
  %tmp3 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %arg, i64 0, i32 0
  store %string %tmp, %string* %tmp3, align 8
  %tmp4 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %arg, i64 0, i32 1
  store i8 %arg2, i8* %tmp4, align 1, !tbaa !351
  ret void
}

define internal void @_ch_ioerror_chpl(%channel_T_dynamic_T_chpl* nonnull %arg, %struct.qio_err_s* %arg1, %string* nonnull %arg2, %chpl_Error_object** nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca i8*, align 8
  %tmp8 = alloca i64, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8
  %tmp12 = load %string, %string* @_str_literal_2276, align 16
  store %string %tmp12, %string* %tmp, align 8
  %tmp13 = bitcast %string* %tmp to i8*
  %tmp14 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp13)
  call void @init35(%string* %tmp6, %string* %tmp, i8 1, i64 %arg4, i32 %arg5)
  store i8* null, i8** %tmp7, align 8, !tbaa !227
  store i64 0, i64* %tmp8, align 8, !tbaa !138
  %tmp15 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp16 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  %tmp17 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp16, align 8, !tbaa !335
  %tmp18 = call %struct.qio_err_s* @qio_channel_path_offset(i32 1, %struct.qio_channel_s* %tmp17, i8** nonnull %tmp7, i64* nonnull %tmp8)
  %tmp19 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp18)
  %tmp20 = icmp eq i32 %tmp19, 0
  br i1 %tmp20, label %bb21, label %bb27

bb21:                                             ; preds = %.split
  %tmp22 = load i8*, i8** %tmp7, align 8, !tbaa !227
  %tmp23 = call i64 @string_length(i8* %tmp22)
  %tmp24 = load i8*, i8** %tmp7, align 8, !tbaa !227
  call void @init36(%string* %tmp10, i8* %tmp24, i64 %tmp23, i8 1, i8 0, i64 %arg4, i32 %arg5)
  %tmp25 = load %string, %string* %tmp10, align 8
  store %string %tmp25, %string* %tmp9, align 8
  call void @chpl___ASSIGN_2(%string* %tmp6, %string* %tmp9, i64 %arg4, i32 %arg5)
  %tmp26 = load i64, i64* %tmp8, align 8, !tbaa !138
  call void @deinit23(%string* %tmp9, i64 %arg4, i32 %arg5)
  br label %bb27

bb27:                                             ; preds = %bb21, %.split
  %.0 = phi i64 [ %tmp26, %bb21 ], [ -1, %.split ]
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !123
  call void @ioerror_chpl(%struct.qio_err_s* %arg1, %string* %arg2, %string* %tmp6, i64 %.0, %chpl_Error_object** %tmp11, i64 %arg4, i32 %arg5)
  %tmp28 = load %chpl_Error_object*, %chpl_Error_object** %tmp11, align 8, !tbaa !125
  %tmp29 = icmp eq %chpl_Error_object* %tmp28, null
  br i1 %tmp29, label %bb31, label %bb30

bb30:                                             ; preds = %bb27
  store %chpl_Error_object* %tmp28, %chpl_Error_object** %arg3, align 8, !tbaa !125
  call void @deinit23(%string* %tmp6, i64 %arg4, i32 %arg5)
  br label %bb32

bb31:                                             ; preds = %bb27
  call void @deinit23(%string* %tmp6, i64 %arg4, i32 %arg5)
  br label %bb32

bb32:                                             ; preds = %bb31, %bb30
  ret void
}

define internal void @_ch_ioerror_chpl2(%channel_T_dynamic_F_chpl* nonnull %arg, %struct.qio_err_s* %arg1, %string* nonnull %arg2, %chpl_Error_object** nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca i8*, align 8
  %tmp8 = alloca i64, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8
  %tmp12 = load %string, %string* @_str_literal_2276, align 16
  store %string %tmp12, %string* %tmp, align 8
  %tmp13 = bitcast %string* %tmp to i8*
  %tmp14 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp13)
  call void @init35(%string* %tmp6, %string* %tmp, i8 1, i64 %arg4, i32 %arg5)
  store i8* null, i8** %tmp7, align 8, !tbaa !227
  store i64 0, i64* %tmp8, align 8, !tbaa !138
  %tmp15 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp16 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp17 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp16, align 8, !tbaa !346
  %tmp18 = call %struct.qio_err_s* @qio_channel_path_offset(i32 0, %struct.qio_channel_s* %tmp17, i8** nonnull %tmp7, i64* nonnull %tmp8)
  %tmp19 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp18)
  %tmp20 = icmp eq i32 %tmp19, 0
  br i1 %tmp20, label %bb21, label %bb27

bb21:                                             ; preds = %.split
  %tmp22 = load i8*, i8** %tmp7, align 8, !tbaa !227
  %tmp23 = call i64 @string_length(i8* %tmp22)
  %tmp24 = load i8*, i8** %tmp7, align 8, !tbaa !227
  call void @init36(%string* %tmp10, i8* %tmp24, i64 %tmp23, i8 1, i8 0, i64 %arg4, i32 %arg5)
  %tmp25 = load %string, %string* %tmp10, align 8
  store %string %tmp25, %string* %tmp9, align 8
  call void @chpl___ASSIGN_2(%string* %tmp6, %string* %tmp9, i64 %arg4, i32 %arg5)
  %tmp26 = load i64, i64* %tmp8, align 8, !tbaa !138
  call void @deinit23(%string* %tmp9, i64 %arg4, i32 %arg5)
  br label %bb27

bb27:                                             ; preds = %bb21, %.split
  %.0 = phi i64 [ %tmp26, %bb21 ], [ -1, %.split ]
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !123
  call void @ioerror_chpl(%struct.qio_err_s* %arg1, %string* %arg2, %string* %tmp6, i64 %.0, %chpl_Error_object** %tmp11, i64 %arg4, i32 %arg5)
  %tmp28 = load %chpl_Error_object*, %chpl_Error_object** %tmp11, align 8, !tbaa !125
  %tmp29 = icmp eq %chpl_Error_object* %tmp28, null
  br i1 %tmp29, label %bb31, label %bb30

bb30:                                             ; preds = %bb27
  store %chpl_Error_object* %tmp28, %chpl_Error_object** %arg3, align 8, !tbaa !125
  call void @deinit23(%string* %tmp6, i64 %arg4, i32 %arg5)
  br label %bb32

bb31:                                             ; preds = %bb27
  call void @deinit23(%string* %tmp6, i64 %arg4, i32 %arg5)
  br label %bb32

bb32:                                             ; preds = %bb31, %bb30
  ret void
}

define internal void @reader_chpl(%file_chpl* nonnull %arg, i64 %arg33, i64 %arg34, i32 %arg35, %struct.qio_style_s* nonnull %arg36, %chpl_Error_object** nonnull %arg37, %channel_F_dynamic_T_chpl* nonnull %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp41, align 8
  %tmp42 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp43 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp44 = alloca %struct.qio_err_s*, align 8
  %tmp45 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp46 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp47 = alloca %struct.qio_style_s, align 8
  %tmp48 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp48, align 8
  %tmp49 = alloca %string, align 8
  %tmp50 = alloca %string, align 8
  %tmp51 = load %string, %string* @_str_literal_2419, align 16
  store %string %tmp51, %string* %tmp, align 8
  %tmp52 = bitcast %string* %tmp to i8*
  %tmp53 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp52)
  store %chpl_Error_object* null, %chpl_Error_object** %tmp41, align 8, !tbaa !123
  call void @check_chpl(%file_chpl* %arg, %chpl_Error_object** %tmp41, i64 %arg39, i32 %arg40)
  %tmp54 = load %chpl_Error_object*, %chpl_Error_object** %tmp41, align 8, !tbaa !125
  %tmp55 = icmp eq %chpl_Error_object* %tmp54, null
  br i1 %tmp55, label %bb57, label %bb56

bb56:                                             ; preds = %.split
  store %chpl_Error_object* %tmp54, %chpl_Error_object** %arg37, align 8, !tbaa !125
  br label %bb85

bb57:                                             ; preds = %.split
  call void @init_chpl2(%channel_F_dynamic_T_chpl* %tmp43, i64 %arg39, i32 %arg40)
  %tmp58 = bitcast %channel_F_dynamic_T_chpl* %tmp43 to i64*
  %.unpack12 = load i64, i64* %tmp58, align 8
  %.elt1 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp43, i64 0, i32 1
  %tmp59 = bitcast %struct.qio_channel_s** %.elt1 to i64*
  %.unpack211 = load i64, i64* %tmp59, align 8
  %.elt3 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp43, i64 0, i32 2
  %tmp60 = bitcast %chpl_locale_object** %.elt3 to i64*
  %.unpack410 = load i64, i64* %tmp60, align 8
  %tmp61 = bitcast %channel_F_dynamic_T_chpl* %tmp42 to i64*
  store i64 %.unpack12, i64* %tmp61, align 8
  %.repack6 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp42, i64 0, i32 1
  %tmp62 = bitcast %struct.qio_channel_s** %.repack6 to i64*
  store i64 %.unpack211, i64* %tmp62, align 8
  %.repack8 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp42, i64 0, i32 2
  %tmp63 = bitcast %chpl_locale_object** %.repack8 to i64*
  store i64 %.unpack410, i64* %tmp63, align 8
  %tmp64 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  store %struct.qio_err_s* %tmp64, %struct.qio_err_s** %tmp44, align 8, !tbaa !348
  %tmp65 = load %struct.qio_style_s, %struct.qio_style_s* %arg36, align 8
  store %struct.qio_style_s %tmp65, %struct.qio_style_s* %tmp47, align 8
  call void @init_chpl6(%channel_F_dynamic_T_chpl* %tmp46, %file_chpl* %arg, %struct.qio_err_s** %tmp44, i32 %arg35, i64 %arg33, i64 %arg34, %struct.qio_style_s* %tmp47, i64 %arg39, i32 %arg40)
  %tmp66 = bitcast %channel_F_dynamic_T_chpl* %tmp46 to i64*
  %.unpack24 = load i64, i64* %tmp66, align 8
  %.elt13 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp46, i64 0, i32 1
  %tmp67 = bitcast %struct.qio_channel_s** %.elt13 to i64*
  %.unpack1423 = load i64, i64* %tmp67, align 8
  %.elt15 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp46, i64 0, i32 2
  %tmp68 = bitcast %chpl_locale_object** %.elt15 to i64*
  %.unpack1622 = load i64, i64* %tmp68, align 8
  %tmp69 = bitcast %channel_F_dynamic_T_chpl* %tmp45 to i64*
  store i64 %.unpack24, i64* %tmp69, align 8
  %.repack18 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp45, i64 0, i32 1
  %tmp70 = bitcast %struct.qio_channel_s** %.repack18 to i64*
  store i64 %.unpack1423, i64* %tmp70, align 8
  %.repack20 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp45, i64 0, i32 2
  %tmp71 = bitcast %chpl_locale_object** %.repack20 to i64*
  store i64 %.unpack1622, i64* %tmp71, align 8
  call void @chpl___ASSIGN_4(%channel_F_dynamic_T_chpl* %tmp42, %channel_F_dynamic_T_chpl* %tmp45)
  call void @deinit_chpl4(%channel_F_dynamic_T_chpl* %tmp45)
  %tmp72 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp44, align 8, !tbaa !348
  %tmp73 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp72)
  %tmp74 = icmp eq i32 %tmp73, 0
  br i1 %tmp74, label %bb81, label %bb75

bb75:                                             ; preds = %bb57
  store %chpl_Error_object* null, %chpl_Error_object** %tmp48, align 8, !tbaa !123
  call void @tryGetPath_chpl(%file_chpl* %arg, %string* %tmp50, i64 %arg39, i32 %arg40)
  %tmp76 = load %string, %string* %tmp50, align 8
  store %string %tmp76, %string* %tmp49, align 8
  %tmp77 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp44, align 8, !tbaa !348
  call void @ioerror_chpl2(%struct.qio_err_s* %tmp77, %string* %tmp, %string* %tmp49, %chpl_Error_object** %tmp48, i64 %arg39, i32 %arg40)
  call void @deinit23(%string* %tmp49, i64 %arg39, i32 %arg40)
  %tmp78 = load %chpl_Error_object*, %chpl_Error_object** %tmp48, align 8, !tbaa !125
  %tmp79 = icmp eq %chpl_Error_object* %tmp78, null
  br i1 %tmp79, label %bb81, label %bb80

bb80:                                             ; preds = %bb75
  store %chpl_Error_object* %tmp78, %chpl_Error_object** %arg37, align 8, !tbaa !125
  call void @deinit_chpl4(%channel_F_dynamic_T_chpl* %tmp42)
  br label %bb85

bb81:                                             ; preds = %bb75, %bb57
  %.elt = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp42, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp82 = insertvalue %channel_F_dynamic_T_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt25 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp42, i64 0, i32 1
  %.unpack26 = load %struct.qio_channel_s*, %struct.qio_channel_s** %.elt25, align 8
  %tmp83 = insertvalue %channel_F_dynamic_T_chpl %tmp82, %struct.qio_channel_s* %.unpack26, 1
  %.elt27 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp42, i64 0, i32 2
  %.unpack28 = load %chpl_locale_object*, %chpl_locale_object** %.elt27, align 8
  %tmp84 = insertvalue %channel_F_dynamic_T_chpl %tmp83, %chpl_locale_object* %.unpack28, 2
  br label %bb85

bb85:                                             ; preds = %bb81, %bb80, %bb56
  %.0 = phi %channel_F_dynamic_T_chpl [ undef, %bb56 ], [ undef, %bb80 ], [ %tmp84, %bb81 ]
  %.repack = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg38, i64 0, i32 0
  %.0.elt = extractvalue %channel_F_dynamic_T_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack, align 8
  %.repack29 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg38, i64 0, i32 1
  %.0.elt30 = extractvalue %channel_F_dynamic_T_chpl %.0, 1
  store %struct.qio_channel_s* %.0.elt30, %struct.qio_channel_s** %.repack29, align 8
  %.repack31 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg38, i64 0, i32 2
  %.0.elt32 = extractvalue %channel_F_dynamic_T_chpl %.0, 2
  store %chpl_locale_object* %.0.elt32, %chpl_locale_object** %.repack31, align 8
  ret void
}

define internal void @writer_chpl(%file_chpl* nonnull %arg, i64 %arg33, i64 %arg34, i32 %arg35, %struct.qio_style_s* nonnull %arg36, %chpl_Error_object** nonnull %arg37, %channel_T_dynamic_T_chpl* nonnull %arg38, i64 %arg39, i32 %arg40) {
bb:
  %tmp = alloca %string, align 8
  %tmp41 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp41, align 8
  %tmp42 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp43 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp44 = alloca %struct.qio_err_s*, align 8
  %tmp45 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp46 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp47 = alloca %struct.qio_style_s, align 8
  %tmp48 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp48, align 8
  %tmp49 = alloca %string, align 8
  %tmp50 = alloca %string, align 8
  %tmp51 = load %string, %string* @_str_literal_2430, align 16
  store %string %tmp51, %string* %tmp, align 8
  %tmp52 = bitcast %string* %tmp to i8*
  %tmp53 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp52)
  store %chpl_Error_object* null, %chpl_Error_object** %tmp41, align 8, !tbaa !123
  call void @check_chpl(%file_chpl* %arg, %chpl_Error_object** %tmp41, i64 %arg39, i32 %arg40)
  %tmp54 = load %chpl_Error_object*, %chpl_Error_object** %tmp41, align 8, !tbaa !125
  %tmp55 = icmp eq %chpl_Error_object* %tmp54, null
  br i1 %tmp55, label %bb57, label %bb56

bb56:                                             ; preds = %.split
  store %chpl_Error_object* %tmp54, %chpl_Error_object** %arg37, align 8, !tbaa !125
  br label %bb85

bb57:                                             ; preds = %.split
  call void @init_chpl3(%channel_T_dynamic_T_chpl* %tmp43, i64 %arg39, i32 %arg40)
  %tmp58 = bitcast %channel_T_dynamic_T_chpl* %tmp43 to i64*
  %.unpack12 = load i64, i64* %tmp58, align 8
  %.elt1 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp43, i64 0, i32 1
  %tmp59 = bitcast %struct.qio_channel_s** %.elt1 to i64*
  %.unpack211 = load i64, i64* %tmp59, align 8
  %.elt3 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp43, i64 0, i32 2
  %tmp60 = bitcast %chpl_locale_object** %.elt3 to i64*
  %.unpack410 = load i64, i64* %tmp60, align 8
  %tmp61 = bitcast %channel_T_dynamic_T_chpl* %tmp42 to i64*
  store i64 %.unpack12, i64* %tmp61, align 8
  %.repack6 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp42, i64 0, i32 1
  %tmp62 = bitcast %struct.qio_channel_s** %.repack6 to i64*
  store i64 %.unpack211, i64* %tmp62, align 8
  %.repack8 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp42, i64 0, i32 2
  %tmp63 = bitcast %chpl_locale_object** %.repack8 to i64*
  store i64 %.unpack410, i64* %tmp63, align 8
  %tmp64 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  store %struct.qio_err_s* %tmp64, %struct.qio_err_s** %tmp44, align 8, !tbaa !348
  %tmp65 = load %struct.qio_style_s, %struct.qio_style_s* %arg36, align 8
  store %struct.qio_style_s %tmp65, %struct.qio_style_s* %tmp47, align 8
  call void @init_chpl5(%channel_T_dynamic_T_chpl* %tmp46, %file_chpl* %arg, %struct.qio_err_s** %tmp44, i32 %arg35, i64 %arg33, i64 %arg34, %struct.qio_style_s* %tmp47, i64 %arg39, i32 %arg40)
  %tmp66 = bitcast %channel_T_dynamic_T_chpl* %tmp46 to i64*
  %.unpack24 = load i64, i64* %tmp66, align 8
  %.elt13 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp46, i64 0, i32 1
  %tmp67 = bitcast %struct.qio_channel_s** %.elt13 to i64*
  %.unpack1423 = load i64, i64* %tmp67, align 8
  %.elt15 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp46, i64 0, i32 2
  %tmp68 = bitcast %chpl_locale_object** %.elt15 to i64*
  %.unpack1622 = load i64, i64* %tmp68, align 8
  %tmp69 = bitcast %channel_T_dynamic_T_chpl* %tmp45 to i64*
  store i64 %.unpack24, i64* %tmp69, align 8
  %.repack18 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp45, i64 0, i32 1
  %tmp70 = bitcast %struct.qio_channel_s** %.repack18 to i64*
  store i64 %.unpack1423, i64* %tmp70, align 8
  %.repack20 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp45, i64 0, i32 2
  %tmp71 = bitcast %chpl_locale_object** %.repack20 to i64*
  store i64 %.unpack1622, i64* %tmp71, align 8
  call void @chpl___ASSIGN_3(%channel_T_dynamic_T_chpl* %tmp42, %channel_T_dynamic_T_chpl* %tmp45)
  call void @deinit_chpl2(%channel_T_dynamic_T_chpl* %tmp45)
  %tmp72 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp44, align 8, !tbaa !348
  %tmp73 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp72)
  %tmp74 = icmp eq i32 %tmp73, 0
  br i1 %tmp74, label %bb81, label %bb75

bb75:                                             ; preds = %bb57
  store %chpl_Error_object* null, %chpl_Error_object** %tmp48, align 8, !tbaa !123
  call void @tryGetPath_chpl(%file_chpl* %arg, %string* %tmp50, i64 %arg39, i32 %arg40)
  %tmp76 = load %string, %string* %tmp50, align 8
  store %string %tmp76, %string* %tmp49, align 8
  %tmp77 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp44, align 8, !tbaa !348
  call void @ioerror_chpl2(%struct.qio_err_s* %tmp77, %string* %tmp, %string* %tmp49, %chpl_Error_object** %tmp48, i64 %arg39, i32 %arg40)
  call void @deinit23(%string* %tmp49, i64 %arg39, i32 %arg40)
  %tmp78 = load %chpl_Error_object*, %chpl_Error_object** %tmp48, align 8, !tbaa !125
  %tmp79 = icmp eq %chpl_Error_object* %tmp78, null
  br i1 %tmp79, label %bb81, label %bb80

bb80:                                             ; preds = %bb75
  store %chpl_Error_object* %tmp78, %chpl_Error_object** %arg37, align 8, !tbaa !125
  call void @deinit_chpl2(%channel_T_dynamic_T_chpl* %tmp42)
  br label %bb85

bb81:                                             ; preds = %bb75, %bb57
  %.elt = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp42, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp82 = insertvalue %channel_T_dynamic_T_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt25 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp42, i64 0, i32 1
  %.unpack26 = load %struct.qio_channel_s*, %struct.qio_channel_s** %.elt25, align 8
  %tmp83 = insertvalue %channel_T_dynamic_T_chpl %tmp82, %struct.qio_channel_s* %.unpack26, 1
  %.elt27 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp42, i64 0, i32 2
  %.unpack28 = load %chpl_locale_object*, %chpl_locale_object** %.elt27, align 8
  %tmp84 = insertvalue %channel_T_dynamic_T_chpl %tmp83, %chpl_locale_object* %.unpack28, 2
  br label %bb85

bb85:                                             ; preds = %bb81, %bb80, %bb56
  %.0 = phi %channel_T_dynamic_T_chpl [ undef, %bb56 ], [ undef, %bb80 ], [ %tmp84, %bb81 ]
  %.repack = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg38, i64 0, i32 0
  %.0.elt = extractvalue %channel_T_dynamic_T_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack, align 8
  %.repack29 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg38, i64 0, i32 1
  %.0.elt30 = extractvalue %channel_T_dynamic_T_chpl %.0, 1
  store %struct.qio_channel_s* %.0.elt30, %struct.qio_channel_s** %.repack29, align 8
  %.repack31 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg38, i64 0, i32 2
  %.0.elt32 = extractvalue %channel_T_dynamic_T_chpl %.0, 2
  store %chpl_locale_object* %.0.elt32, %chpl_locale_object** %.repack31, align 8
  ret void
}

define internal %struct.qio_err_s* @_write_text_internal_chpl(%struct.qio_channel_s* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp6 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp6, %string* %tmp, align 8
  call void @init35(%string* %tmp5, %string* %arg1, i8 0, i64 %arg2, i32 %arg3)
  %tmp7 = load %string, %string* %tmp5, align 8
  store %string %tmp7, %string* %tmp4, align 8
  %tmp8 = bitcast %string* %tmp4 to i8*
  %tmp9 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp8)
  %tmp10 = getelementptr inbounds %string, %string* %tmp4, i64 0, i32 4
  %tmp11 = load i32, i32* %tmp10, align 4, !tbaa !178
  %tmp12 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp13 = icmp eq i32 %tmp11, %tmp12
  br i1 %tmp13, label %bb15, label %bb14

bb14:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg2, i32 %arg3)
  br label %bb15

bb15:                                             ; preds = %.split, %bb14
  %tmp16 = getelementptr inbounds %string, %string* %tmp4, i64 0, i32 2
  %tmp17 = load i8*, i8** %tmp16, align 8, !tbaa !179
  %tmp18 = getelementptr inbounds %string, %string* %tmp4, i64 0, i32 0
  %tmp19 = load i64, i64* %tmp18, align 8, !tbaa !175
  %tmp20 = call %struct.qio_err_s* @qio_channel_print_string(i32 0, %struct.qio_channel_s* %arg, i8* %tmp17, i64 %tmp19)
  call void @deinit23(%string* %tmp4, i64 %arg2, i32 %arg3)
  ret %struct.qio_err_s* %tmp20
}

define internal %struct.qio_err_s* @_write_text_internal_chpl2(%struct.qio_channel_s* %arg, double %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca double, align 8
  br label %.split

.split:                                           ; preds = %bb
  store double %arg1, double* %tmp, align 8, !tbaa !111
  %tmp4 = bitcast double* %tmp to i8*
  %tmp5 = call %struct.qio_err_s* @qio_channel_print_float(i32 0, %struct.qio_channel_s* %arg, i8* %tmp4, i64 8)
  ret %struct.qio_err_s* %tmp5
}

define internal void @writeIt_chpl(%channel_T_dynamic_F_chpl* nonnull %arg, %ioLiteral_chpl* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %struct.chpl_localeID_t, align 8
  %tmp7 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp7, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp10, %string* %tmp, align 8
  %tmp11 = load %string, %string* @_str_literal_2383, align 16
  store %string %tmp11, %string* %tmp4, align 8
  %tmp12 = bitcast %string* %tmp4 to i8*
  %tmp13 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp12)
  %tmp14 = load %string, %string* @_str_literal_2380, align 16
  store %string %tmp14, %string* %tmp5, align 8
  %tmp15 = bitcast %string* %tmp5 to i8*
  %tmp16 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp15)
  %tmp17 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 2
  %tmp18 = bitcast %chpl_locale_object** %tmp17 to %chpl_object_object**
  %tmp19 = load %chpl_object_object*, %chpl_object_object** %tmp18, align 8, !tbaa !347
  %tmp20 = icmp eq %chpl_object_object* %tmp19, null
  br i1 %tmp20, label %bb21, label %bb26

bb21:                                             ; preds = %.split
  %tmp22 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp23 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp22, i32 -2)
  %tmp24 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp6, i64 0, i32 0
  store i32 %tmp23, i32* %tmp24, align 8, !tbaa !110
  %tmp25 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp6, i64 %arg2, i32 %arg3)
  br label %bb26

bb26:                                             ; preds = %bb21, %.split
  %tmp27 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp28 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp29 = bitcast %struct.qio_channel_s** %tmp28 to i8**
  %tmp30 = load i8*, i8** %tmp29, align 8, !tbaa !346
  %tmp31 = call i1 @is_c_nil(i8* %tmp30)
  br i1 %tmp31, label %bb32, label %bb36

bb32:                                             ; preds = %bb26
  %tmp33 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 22, %string* %tmp5, i64 %arg2, i32 %arg3)
  %tmp34 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp33, i64 0, i32 0
  %tmp35 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp34, i64 %arg2, i32 %arg3)
  br label %bb43

bb36:                                             ; preds = %bb26
  %tmp37 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp27)
  %tmp38 = icmp eq i32 %tmp37, 0
  br i1 %tmp38, label %bb42, label %bb39

bb39:                                             ; preds = %bb36
  store %chpl_Error_object* null, %chpl_Error_object** %tmp7, align 8, !tbaa !123
  call void @_ch_ioerror_chpl2(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp27, %string* %tmp4, %chpl_Error_object** %tmp7, i64 %arg2, i32 %arg3)
  %tmp40 = load %chpl_Error_object*, %chpl_Error_object** %tmp7, align 8, !tbaa !125
  %tmp41 = icmp eq %chpl_Error_object* %tmp40, null
  br i1 %tmp41, label %bb42, label %bb43

bb42:                                             ; preds = %bb39, %bb36
  br label %bb43

bb43:                                             ; preds = %bb39, %bb42, %bb32
  %.0 = phi %chpl_Error_object* [ %tmp35, %bb32 ], [ null, %bb42 ], [ %tmp40, %bb39 ]
  %tmp44 = icmp eq %chpl_Error_object* %.0, null
  br i1 %tmp44, label %bb46, label %bb45

bb45:                                             ; preds = %bb43
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.0, i64 %arg2, i32 %arg3)
  br label %bb46

bb46:                                             ; preds = %bb43, %bb45
  %tmp47 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp28, align 8, !tbaa !346
  %tmp48 = call %struct.qio_err_s* @qio_channel_error(%struct.qio_channel_s* %tmp47)
  %tmp49 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp48)
  %tmp50 = icmp eq i32 %tmp49, 0
  br i1 %tmp50, label %bb51, label %bb68

bb51:                                             ; preds = %bb46
  %tmp52 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp28, align 8, !tbaa !346
  %tmp53 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp54 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %arg1, i64 0, i32 0
  call void @init35(%string* %tmp9, %string* %tmp54, i8 0, i64 %arg2, i32 %arg3)
  %tmp55 = load %string, %string* %tmp9, align 8
  store %string %tmp55, %string* %tmp8, align 8
  %tmp56 = getelementptr inbounds %string, %string* %tmp8, i64 0, i32 4
  %tmp57 = load i32, i32* %tmp56, align 4, !tbaa !178
  %tmp58 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp59 = icmp eq i32 %tmp57, %tmp58
  br i1 %tmp59, label %bb61, label %bb60

bb60:                                             ; preds = %bb51
  call void @halt(%string* %tmp, i64 %arg2, i32 %arg3)
  br label %bb61

bb61:                                             ; preds = %bb51, %bb60
  %tmp62 = getelementptr inbounds %string, %string* %tmp8, i64 0, i32 2
  %tmp63 = load i8*, i8** %tmp62, align 8, !tbaa !179
  %tmp64 = getelementptr inbounds %ioLiteral_chpl, %ioLiteral_chpl* %arg1, i64 0, i32 0, i32 0
  %tmp65 = load i64, i64* %tmp64, align 8, !tbaa !175
  %tmp66 = call %struct.qio_err_s* @qio_channel_print_literal(i32 0, %struct.qio_channel_s* %tmp52, i8* %tmp63, i64 %tmp65)
  call void @deinit23(%string* %tmp8, i64 %arg2, i32 %arg3)
  %tmp67 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp28, align 8, !tbaa !346
  call void @_qio_channel_set_error_unlocked(%struct.qio_channel_s* %tmp67, %struct.qio_err_s* %tmp66)
  br label %bb68

bb68:                                             ; preds = %bb61, %bb46
  ret void
}

define internal void @writeIt_chpl2(%channel_T_dynamic_F_chpl* nonnull %arg, double %arg2, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %struct.chpl_localeID_t, align 8
  %tmp7 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp7, align 8
  %tmp8 = load %string, %string* @_str_literal_2383, align 16
  store %string %tmp8, %string* %tmp, align 8
  %tmp9 = bitcast %string* %tmp to i8*
  %tmp10 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp9)
  %tmp11 = load %string, %string* @_str_literal_2380, align 16
  store %string %tmp11, %string* %tmp5, align 8
  %tmp12 = bitcast %string* %tmp5 to i8*
  %tmp13 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp12)
  %tmp14 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 2
  %tmp15 = bitcast %chpl_locale_object** %tmp14 to %chpl_object_object**
  %tmp16 = load %chpl_object_object*, %chpl_object_object** %tmp15, align 8, !tbaa !347
  %tmp17 = icmp eq %chpl_object_object* %tmp16, null
  br i1 %tmp17, label %bb18, label %bb23

bb18:                                             ; preds = %.split
  %tmp19 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp20 = tail call i32 @chpl_rt_buildLocaleID(i32 %tmp19, i32 -2)
  %tmp21 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp6, i64 0, i32 0
  store i32 %tmp20, i32* %tmp21, align 8, !tbaa !110
  %tmp22 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp6, i64 %arg3, i32 %arg4)
  br label %bb23

bb23:                                             ; preds = %bb18, %.split
  %tmp24 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp25 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp26 = bitcast %struct.qio_channel_s** %tmp25 to i8**
  %tmp27 = load i8*, i8** %tmp26, align 8, !tbaa !346
  %tmp28 = call i1 @is_c_nil(i8* %tmp27)
  br i1 %tmp28, label %bb29, label %bb33

bb29:                                             ; preds = %bb23
  %tmp30 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 22, %string* %tmp5, i64 %arg3, i32 %arg4)
  %tmp31 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp30, i64 0, i32 0
  %tmp32 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp31, i64 %arg3, i32 %arg4)
  br label %bb40

bb33:                                             ; preds = %bb23
  %tmp34 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp24)
  %tmp35 = icmp eq i32 %tmp34, 0
  br i1 %tmp35, label %bb39, label %bb36

bb36:                                             ; preds = %bb33
  store %chpl_Error_object* null, %chpl_Error_object** %tmp7, align 8, !tbaa !123
  call void @_ch_ioerror_chpl2(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp24, %string* %tmp, %chpl_Error_object** %tmp7, i64 %arg3, i32 %arg4)
  %tmp37 = load %chpl_Error_object*, %chpl_Error_object** %tmp7, align 8, !tbaa !125
  %tmp38 = icmp eq %chpl_Error_object* %tmp37, null
  br i1 %tmp38, label %bb39, label %bb40

bb39:                                             ; preds = %bb36, %bb33
  br label %bb40

bb40:                                             ; preds = %bb36, %bb39, %bb29
  %.01 = phi %chpl_Error_object* [ %tmp32, %bb29 ], [ null, %bb39 ], [ %tmp37, %bb36 ]
  %tmp41 = icmp eq %chpl_Error_object* %.01, null
  br i1 %tmp41, label %bb43, label %bb42

bb42:                                             ; preds = %bb40
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.01, i64 %arg3, i32 %arg4)
  br label %bb43

bb43:                                             ; preds = %bb40, %bb42
  %tmp44 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp25, align 8, !tbaa !346
  %tmp45 = call %struct.qio_err_s* @qio_channel_error(%struct.qio_channel_s* %tmp44)
  %tmp46 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp45)
  %tmp47 = icmp eq i32 %tmp46, 0
  br i1 %tmp47, label %bb48, label %bb66

bb48:                                             ; preds = %bb43
  %tmp49 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp25, align 8, !tbaa !346
  %tmp50 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp51 = call i8 @qio_channel_binary(%struct.qio_channel_s* %tmp49)
  %tmp52 = call i8 @qio_channel_byteorder(%struct.qio_channel_s* %tmp49)
  %tmp53 = icmp eq i8 %tmp51, 0
  br i1 %tmp53, label %bb62, label %bb54

bb54:                                             ; preds = %bb48
  %tmp55 = call i64 @_cast(i8 %tmp52, i64 %arg3, i32 %arg4)
  switch i64 %tmp55, label %bb60 [
    i64 2, label %bb56
    i64 3, label %bb58
  ]

bb56:                                             ; preds = %bb54
  %tmp57 = call %struct.qio_err_s* @qio_channel_write_float64(i32 0, i32 2, %struct.qio_channel_s* %tmp49, double %arg2)
  br label %bb64

bb58:                                             ; preds = %bb54
  %tmp59 = call %struct.qio_err_s* @qio_channel_write_float64(i32 0, i32 3, %struct.qio_channel_s* %tmp49, double %arg2)
  br label %bb64

bb60:                                             ; preds = %bb54
  %tmp61 = call %struct.qio_err_s* @qio_channel_write_float64(i32 0, i32 1, %struct.qio_channel_s* %tmp49, double %arg2)
  br label %bb64

bb62:                                             ; preds = %bb48
  %tmp63 = call %struct.qio_err_s* @_write_text_internal_chpl2(%struct.qio_channel_s* %tmp49, double %arg2, i64 %arg3, i32 %arg4)
  br label %bb64

bb64:                                             ; preds = %bb56, %bb60, %bb58, %bb62
  %.2 = phi %struct.qio_err_s* [ %tmp63, %bb62 ], [ %tmp57, %bb56 ], [ %tmp59, %bb58 ], [ %tmp61, %bb60 ]
  %tmp65 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp25, align 8, !tbaa !346
  call void @_qio_channel_set_error_unlocked(%struct.qio_channel_s* %tmp65, %struct.qio_err_s* %.2)
  br label %bb66

bb66:                                             ; preds = %bb64, %bb43
  ret void
}

define internal i8 @binary_chpl(%channel_T_dynamic_F_chpl* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp3 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !346
  %tmp4 = tail call i8 @qio_channel_binary(%struct.qio_channel_s* %tmp3)
  %tmp5 = icmp ne i8 %tmp4, 0
  %tmp6 = zext i1 %tmp5 to i8
  ret i8 %tmp6
}

define internal i64 @styleElement_chpl(%channel_T_dynamic_F_chpl* nonnull %arg, i64 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp2 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8, !tbaa !346
  %tmp3 = tail call i64 @qio_channel_style_element(%struct.qio_channel_s* %tmp2, i64 %arg1)
  ret i64 %tmp3
}

define internal void @setError_chpl(%channel_T_dynamic_F_chpl* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp5, align 8
  %tmp6 = load %string, %string* @_str_literal_2383, align 16
  store %string %tmp6, %string* %tmp, align 8
  %tmp7 = bitcast %string* %tmp to i8*
  %tmp8 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp7)
  %tmp9 = load %string, %string* @_str_literal_2380, align 16
  store %string %tmp9, %string* %tmp4, align 8
  %tmp10 = bitcast %string* %tmp4 to i8*
  %tmp11 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp10)
  %tmp12 = tail call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp13 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp14 = bitcast %struct.qio_channel_s** %tmp13 to i8**
  %tmp15 = load i8*, i8** %tmp14, align 8, !tbaa !346
  %tmp16 = tail call i1 @is_c_nil(i8* %tmp15)
  br i1 %tmp16, label %bb17, label %bb21

bb17:                                             ; preds = %.split
  %tmp18 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 22, %string* %tmp4, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp18, i64 0, i32 0
  %tmp20 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp19, i64 %arg2, i32 %arg3)
  br label %bb28

bb21:                                             ; preds = %.split
  %tmp22 = tail call i32 @qio_err_iserr(%struct.qio_err_s* %tmp12)
  %tmp23 = icmp eq i32 %tmp22, 0
  br i1 %tmp23, label %bb27, label %bb24

bb24:                                             ; preds = %bb21
  store %chpl_Error_object* null, %chpl_Error_object** %tmp5, align 8, !tbaa !123
  call void @_ch_ioerror_chpl2(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp12, %string* %tmp, %chpl_Error_object** %tmp5, i64 %arg2, i32 %arg3)
  %tmp25 = load %chpl_Error_object*, %chpl_Error_object** %tmp5, align 8, !tbaa !125
  %tmp26 = icmp eq %chpl_Error_object* %tmp25, null
  br i1 %tmp26, label %bb27, label %bb28

bb27:                                             ; preds = %bb24, %bb21
  br label %bb28

bb28:                                             ; preds = %bb24, %bb27, %bb17
  %.0 = phi %chpl_Error_object* [ %tmp20, %bb17 ], [ null, %bb27 ], [ %tmp25, %bb24 ]
  %tmp29 = icmp eq %chpl_Error_object* %.0, null
  br i1 %tmp29, label %bb31, label %bb30

bb30:                                             ; preds = %bb28
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.0, i64 %arg2, i32 %arg3)
  br label %bb31

bb31:                                             ; preds = %bb28, %bb30
  %tmp32 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp13, align 8, !tbaa !346
  call void @_qio_channel_set_error_unlocked(%struct.qio_channel_s* %tmp32, %struct.qio_err_s* %arg1)
  ret void
}

define internal i8 @writeBytes_chpl(%channel_T_dynamic_F_chpl* nonnull %arg, double* %arg1, i64 %arg2, %chpl_Error_object** nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp8, align 8
  %tmp9 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp9, align 8
  %tmp10 = load %string, %string* @_str_literal_2468, align 16
  store %string %tmp10, %string* %tmp, align 8
  %tmp11 = bitcast %string* %tmp to i8*
  %tmp12 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp11)
  %tmp13 = load %string, %string* @_str_literal_2383, align 16
  store %string %tmp13, %string* %tmp6, align 8
  %tmp14 = bitcast %string* %tmp6 to i8*
  %tmp15 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp14)
  %tmp16 = load %string, %string* @_str_literal_2380, align 16
  store %string %tmp16, %string* %tmp7, align 8
  %tmp17 = bitcast %string* %tmp7 to i8*
  %tmp18 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp17)
  %tmp19 = tail call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp20 = tail call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp21 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %arg, i64 0, i32 1
  %tmp22 = bitcast %struct.qio_channel_s** %tmp21 to i8**
  %tmp23 = load i8*, i8** %tmp22, align 8, !tbaa !346
  %tmp24 = tail call i1 @is_c_nil(i8* %tmp23)
  br i1 %tmp24, label %bb25, label %bb29

bb25:                                             ; preds = %.split
  %tmp26 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 22, %string* %tmp7, i64 %arg4, i32 %arg5)
  %tmp27 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp26, i64 0, i32 0
  %tmp28 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp27, i64 %arg4, i32 %arg5)
  br label %bb36

bb29:                                             ; preds = %.split
  %tmp30 = tail call i32 @qio_err_iserr(%struct.qio_err_s* %tmp20)
  %tmp31 = icmp eq i32 %tmp30, 0
  br i1 %tmp31, label %bb35, label %bb32

bb32:                                             ; preds = %bb29
  store %chpl_Error_object* null, %chpl_Error_object** %tmp8, align 8, !tbaa !123
  call void @_ch_ioerror_chpl2(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp20, %string* %tmp6, %chpl_Error_object** %tmp8, i64 %arg4, i32 %arg5)
  %tmp33 = load %chpl_Error_object*, %chpl_Error_object** %tmp8, align 8, !tbaa !125
  %tmp34 = icmp eq %chpl_Error_object* %tmp33, null
  br i1 %tmp34, label %bb35, label %bb36

bb35:                                             ; preds = %bb32, %bb29
  br label %bb36

bb36:                                             ; preds = %bb32, %bb35, %bb25
  %.0 = phi %chpl_Error_object* [ %tmp28, %bb25 ], [ null, %bb35 ], [ %tmp33, %bb32 ]
  %tmp37 = icmp eq %chpl_Error_object* %.0, null
  br i1 %tmp37, label %bb39, label %bb38

bb38:                                             ; preds = %bb36
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.0, i64 %arg4, i32 %arg5)
  br label %bb39

bb39:                                             ; preds = %bb36, %bb38
  %tmp40 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp21, align 8, !tbaa !346
  %tmp41 = bitcast double* %arg1 to i8*
  %tmp42 = call %struct.qio_err_s* @qio_channel_write_amt(i32 0, %struct.qio_channel_s* %tmp40, i8* %tmp41, i64 %arg2)
  %tmp43 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp42)
  %tmp44 = icmp eq i32 %tmp43, 0
  br i1 %tmp44, label %bb49, label %bb45

bb45:                                             ; preds = %bb39
  store %chpl_Error_object* null, %chpl_Error_object** %tmp9, align 8, !tbaa !123
  call void @_ch_ioerror_chpl2(%channel_T_dynamic_F_chpl* %arg, %struct.qio_err_s* %tmp42, %string* %tmp, %chpl_Error_object** %tmp9, i64 %arg4, i32 %arg5)
  %tmp46 = load %chpl_Error_object*, %chpl_Error_object** %tmp9, align 8, !tbaa !125
  %tmp47 = icmp eq %chpl_Error_object* %tmp46, null
  br i1 %tmp47, label %bb49, label %bb48

bb48:                                             ; preds = %bb45
  store %chpl_Error_object* %tmp46, %chpl_Error_object** %arg3, align 8, !tbaa !125
  br label %bb49

bb49:                                             ; preds = %bb45, %bb39, %bb48
  ret i8 1
}

define internal void @stringify_chpl(i8* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp8 = load %string, %string* @_str_literal_2474, align 16
  store %string %tmp8, %string* %tmp4, align 8
  call void @init35(%string* %tmp5, %string* %tmp4, i8 1, i64 %arg2, i32 %arg3)
  %tmp9 = load %string, %string* %tmp5, align 8
  store %string %tmp9, %string* %tmp, align 8
  call void @_cast2(i8* %arg, %string* %tmp7, i64 %arg2, i32 %arg3)
  %tmp10 = load %string, %string* %tmp7, align 8
  store %string %tmp10, %string* %tmp6, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp, %string* %tmp6, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp6, i64 %arg2, i32 %arg3)
  %tmp11 = load %string, %string* %tmp, align 8
  store %string %tmp11, %string* %arg1, align 8
  ret void
}

define internal void @stringify_chpl2(%string* nonnull %arg, %string* nonnull %arg1, %string* nonnull %arg2, %string* nonnull %arg3, %string* nonnull %arg4, i64 %arg5, i32 %arg6) {
bb:
  %tmp = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp17 = load %string, %string* @_str_literal_2474, align 16
  store %string %tmp17, %string* %tmp7, align 8
  call void @init35(%string* %tmp8, %string* %tmp7, i8 1, i64 %arg5, i32 %arg6)
  %tmp18 = load %string, %string* %tmp8, align 8
  store %string %tmp18, %string* %tmp, align 8
  call void @init35(%string* %tmp10, %string* %arg, i8 1, i64 %arg5, i32 %arg6)
  %tmp19 = load %string, %string* %tmp10, align 8
  store %string %tmp19, %string* %tmp9, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp, %string* %tmp9, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp9, i64 %arg5, i32 %arg6)
  call void @init35(%string* %tmp12, %string* %arg1, i8 1, i64 %arg5, i32 %arg6)
  %tmp20 = load %string, %string* %tmp12, align 8
  store %string %tmp20, %string* %tmp11, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp, %string* %tmp11, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp11, i64 %arg5, i32 %arg6)
  call void @init35(%string* %tmp14, %string* %arg2, i8 1, i64 %arg5, i32 %arg6)
  %tmp21 = load %string, %string* %tmp14, align 8
  store %string %tmp21, %string* %tmp13, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp, %string* %tmp13, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp13, i64 %arg5, i32 %arg6)
  call void @init35(%string* %tmp16, %string* %arg3, i8 1, i64 %arg5, i32 %arg6)
  %tmp22 = load %string, %string* %tmp16, align 8
  store %string %tmp22, %string* %tmp15, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp, %string* %tmp15, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp15, i64 %arg5, i32 %arg6)
  %tmp23 = load %string, %string* %tmp, align 8
  store %string %tmp23, %string* %arg4, align 8
  ret void
}

define internal void @_args_to_proto_chpl(%string* nonnull %arg, %ARRTY2* nonnull %arg1, %ioNewline_chpl* nonnull %arg2, %string* nonnull %arg3, %string* nonnull %arg4, i64 %arg5, i32 %arg6) {
bb:
  %tmp = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  %tmp20 = alloca %string, align 8
  %tmp21 = alloca %string, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %ARRTY2, align 8
  %tmp24 = alloca %string, align 8
  %tmp25 = alloca %string, align 8
  %tmp26 = alloca %string, align 8
  %tmp27 = alloca %string, align 8
  %tmp28 = alloca %string, align 8
  %tmp29 = alloca %string, align 8
  %tmp30 = alloca %string, align 8
  %tmp31 = alloca %string, align 8
  %tmp32 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp33 = load %string, %string* @_str_literal_3230, align 16
  store %string %tmp33, %string* %tmp, align 8
  %tmp34 = bitcast %string* %tmp to i8*
  %tmp35 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp34)
  %tmp36 = load %string, %string* @_str_literal_3228, align 16
  store %string %tmp36, %string* %tmp7, align 8
  %tmp37 = bitcast %string* %tmp7 to i8*
  %tmp38 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp37)
  %tmp39 = load %string, %string* @_str_literal_3226, align 16
  store %string %tmp39, %string* %tmp8, align 8
  %tmp40 = bitcast %string* %tmp8 to i8*
  %tmp41 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp40)
  %tmp42 = load %string, %string* @_str_literal_461, align 16
  store %string %tmp42, %string* %tmp9, align 8
  %tmp43 = bitcast %string* %tmp9 to i8*
  %tmp44 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp43)
  %tmp45 = load %ARRTY2, %ARRTY2* %arg1, align 8
  call void @init34(%string* %tmp10, i64 %arg5, i32 %arg6)
  call void @init34(%string* %tmp11, i64 %arg5, i32 %arg6)
  call void @chpl___ASSIGN_2(%string* %tmp11, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 0), i64 %arg5, i32 %arg6)
  call void @chpl___PLUS_(%string* %arg3, %string* %tmp11, %string* %tmp13, i64 %arg5, i32 %arg6)
  %tmp46 = load %string, %string* %tmp13, align 8
  store %string %tmp46, %string* %tmp12, align 8
  call void @chpl___PLUS_(%string* %tmp12, %string* %tmp9, %string* %tmp15, i64 %arg5, i32 %arg6)
  %tmp47 = load %string, %string* %tmp15, align 8
  store %string %tmp47, %string* %tmp14, align 8
  call void @chpl___PLUS_(%string* %tmp14, %string* %tmp8, %string* %tmp17, i64 %arg5, i32 %arg6)
  %tmp48 = load %string, %string* %tmp17, align 8
  store %string %tmp48, %string* %tmp16, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp10, %string* %tmp16, i64 %arg5, i32 %arg6)
  call void @chpl___PLUS__ASSIGN_(%string* %tmp10, %string* @_str_literal_615, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp16, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp14, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp12, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp11, i64 %arg5, i32 %arg6)
  call void @init34(%string* %tmp18, i64 %arg5, i32 %arg6)
  call void @chpl___ASSIGN_2(%string* %tmp18, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 1), i64 %arg5, i32 %arg6)
  call void @chpl___PLUS_(%string* %arg3, %string* %tmp18, %string* %tmp20, i64 %arg5, i32 %arg6)
  %tmp49 = load %string, %string* %tmp20, align 8
  store %string %tmp49, %string* %tmp19, align 8
  call void @chpl___PLUS_(%string* %tmp19, %string* %tmp9, %string* %tmp22, i64 %arg5, i32 %arg6)
  %tmp50 = load %string, %string* %tmp22, align 8
  store %string %tmp50, %string* %tmp21, align 8
  store %ARRTY2 %tmp45, %ARRTY2* %tmp23, align 8
  %tmp51 = call %chpl___RuntimeTypeInfo3 @chpl__convertValueToRuntimeType3(%ARRTY2* %tmp23, i64 %arg5, i32 %arg6)
  call void @chpl___PLUS_(%string* %tmp21, %string* %tmp7, %string* %tmp25, i64 %arg5, i32 %arg6)
  %tmp52 = load %string, %string* %tmp25, align 8
  store %string %tmp52, %string* %tmp24, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp10, %string* %tmp24, i64 %arg5, i32 %arg6)
  call void @chpl___PLUS__ASSIGN_(%string* %tmp10, %string* @_str_literal_615, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp24, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp21, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp19, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp18, i64 %arg5, i32 %arg6)
  call void @init34(%string* %tmp26, i64 %arg5, i32 %arg6)
  call void @chpl___ASSIGN_2(%string* %tmp26, %string* getelementptr inbounds ([6 x %string], [6 x %string]* @_arg_to_proto_names_chpl, i64 0, i64 2), i64 %arg5, i32 %arg6)
  call void @chpl___PLUS_(%string* %arg3, %string* %tmp26, %string* %tmp28, i64 %arg5, i32 %arg6)
  %tmp53 = load %string, %string* %tmp28, align 8
  store %string %tmp53, %string* %tmp27, align 8
  call void @chpl___PLUS_(%string* %tmp27, %string* %tmp9, %string* %tmp30, i64 %arg5, i32 %arg6)
  %tmp54 = load %string, %string* %tmp30, align 8
  store %string %tmp54, %string* %tmp29, align 8
  call void @chpl___PLUS_(%string* %tmp29, %string* %tmp, %string* %tmp32, i64 %arg5, i32 %arg6)
  %tmp55 = load %string, %string* %tmp32, align 8
  store %string %tmp55, %string* %tmp31, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp10, %string* %tmp31, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp31, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp29, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp27, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp26, i64 %arg5, i32 %arg6)
  %tmp56 = load %string, %string* %tmp10, align 8
  store %string %tmp56, %string* %arg4, align 8
  ret void
}

define internal i8 @writeln_chpl(%channel_T_dynamic_T_chpl* nonnull %arg, %string* nonnull %arg8, %ARRTY2* nonnull %arg9, %chpl_Error_object** nonnull %arg10, i64 %arg11, i32 %arg12) {
bb:
  %tmp = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %ioNewline_chpl, align 8
  %tmp19 = alloca %ioNewline_chpl, align 8
  %tmp20 = alloca %struct.chpl_localeID_t, align 8
  %tmp21 = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp21, align 8
  %tmp22 = alloca %string, align 8
  %tmp23 = alloca %string, align 8
  %tmp24 = alloca %string, align 8
  %tmp25 = alloca %string, align 8
  %tmp26 = alloca %string, align 8
  %tmp27 = alloca %string, align 8
  %tmp28 = alloca %ARRTY2, align 8
  %tmp29 = alloca %channel_T_dynamic_F_chpl, align 8
  %tmp30 = alloca %struct.chpl_localeID_t, align 8
  %tmp31 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8
  %tmp32 = alloca %string, align 8
  %tmp33 = alloca %ARRTY2, align 8
  %tmp34 = alloca %string, align 8
  %tmp35 = alloca %string, align 8
  %tmp36 = alloca %string, align 8
  %tmp37 = alloca %string, align 8
  %tmp38 = alloca %string, align 8
  %tmp39 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp39, %string* %tmp, align 8
  %tmp40 = bitcast %string* %tmp to i8*
  %tmp41 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp40)
  %tmp42 = load %string, %string* @_str_literal_2530, align 16
  store %string %tmp42, %string* %tmp13, align 8
  %tmp43 = bitcast %string* %tmp13 to i8*
  %tmp44 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp43)
  %tmp45 = load %string, %string* @_str_literal_2532, align 16
  store %string %tmp45, %string* %tmp14, align 8
  %tmp46 = bitcast %string* %tmp14 to i8*
  %tmp47 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp46)
  %tmp48 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp48, %string* %tmp15, align 8
  %tmp49 = load %string, %string* @_str_literal_2383, align 16
  store %string %tmp49, %string* %tmp16, align 8
  %tmp50 = bitcast %string* %tmp16 to i8*
  %tmp51 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp50)
  %tmp52 = load %string, %string* @_str_literal_2380, align 16
  store %string %tmp52, %string* %tmp17, align 8
  %tmp53 = bitcast %string* %tmp17 to i8*
  %tmp54 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp53)
  call void @init_chpl7(%ioNewline_chpl* %tmp19, i8 0)
  %tmp55 = getelementptr inbounds %ioNewline_chpl, %ioNewline_chpl* %tmp19, i64 0, i32 0
  %tmp56 = load i8, i8* %tmp55, align 8
  %tmp57 = getelementptr inbounds %ioNewline_chpl, %ioNewline_chpl* %tmp18, i64 0, i32 0
  store i8 %tmp56, i8* %tmp57, align 8
  %tmp58 = load %ARRTY2, %ARRTY2* %arg9, align 8
  %tmp59 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp60 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 2
  %tmp61 = load %chpl_locale_object*, %chpl_locale_object** %tmp60, align 8, !tbaa !343
  %tmp62 = icmp eq %chpl_locale_object* %tmp61, null
  br i1 %tmp62, label %bb63, label %bb68

bb63:                                             ; preds = %.split
  %tmp64 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp65 = call i32 @chpl_rt_buildLocaleID(i32 %tmp64, i32 -2)
  %tmp66 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp20, i64 0, i32 0
  store i32 %tmp65, i32* %tmp66, align 8, !tbaa !110
  %tmp67 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp20, i64 %arg11, i32 %arg12)
  br label %bb68

bb68:                                             ; preds = %bb63, %.split
  %.03 = phi %chpl_locale_object* [ %tmp67, %bb63 ], [ %tmp61, %.split ]
  %tmp69 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp70 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  %tmp71 = bitcast %struct.qio_channel_s** %tmp70 to i8**
  %tmp72 = load i8*, i8** %tmp71, align 8, !tbaa !335
  %tmp73 = call i1 @is_c_nil(i8* %tmp72)
  br i1 %tmp73, label %bb74, label %bb78

bb74:                                             ; preds = %bb68
  %tmp75 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 22, %string* %tmp17, i64 %arg11, i32 %arg12)
  %tmp76 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp75, i64 0, i32 0
  %tmp77 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp76, i64 %arg11, i32 %arg12)
  br label %bb87

bb78:                                             ; preds = %bb68
  %tmp79 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp70, align 8, !tbaa !335
  %tmp80 = call %struct.qio_err_s* @qio_channel_lock(%struct.qio_channel_s* %tmp79)
  %tmp81 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp80)
  %tmp82 = icmp eq i32 %tmp81, 0
  br i1 %tmp82, label %bb86, label %bb83

bb83:                                             ; preds = %bb78
  store %chpl_Error_object* null, %chpl_Error_object** %tmp21, align 8, !tbaa !123
  call void @_ch_ioerror_chpl(%channel_T_dynamic_T_chpl* %arg, %struct.qio_err_s* %tmp80, %string* %tmp16, %chpl_Error_object** %tmp21, i64 %arg11, i32 %arg12)
  %tmp84 = load %chpl_Error_object*, %chpl_Error_object** %tmp21, align 8, !tbaa !125
  %tmp85 = icmp eq %chpl_Error_object* %tmp84, null
  br i1 %tmp85, label %bb86, label %bb87

bb86:                                             ; preds = %bb83, %bb78
  br label %bb87

bb87:                                             ; preds = %bb83, %bb86, %bb74
  %.04 = phi %chpl_Error_object* [ %tmp77, %bb74 ], [ null, %bb86 ], [ %tmp84, %bb83 ]
  %tmp88 = icmp eq %chpl_Error_object* %.04, null
  br i1 %tmp88, label %bb90, label %bb89

bb89:                                             ; preds = %bb87
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %.04, i64 %arg11, i32 %arg12)
  br label %bb90

bb90:                                             ; preds = %bb87, %bb89
  %tmp91 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp59)
  %tmp92 = icmp eq i32 %tmp91, 0
  br i1 %tmp92, label %bb93, label %bb145

bb93:                                             ; preds = %bb90
  %tmp94 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp70, align 8, !tbaa !335
  %tmp95 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp96 = call i8 @qio_channel_binary(%struct.qio_channel_s* %tmp94)
  %tmp97 = call i8 @qio_channel_byteorder(%struct.qio_channel_s* %tmp94)
  %tmp98 = icmp eq i8 %tmp96, 0
  br i1 %tmp98, label %bb143, label %bb99

bb99:                                             ; preds = %bb93
  %tmp100 = call i64 @_cast(i8 %tmp97, i64 %arg11, i32 %arg12)
  switch i64 %tmp100, label %bb129 [
    i64 2, label %bb101
    i64 3, label %bb115
  ]

bb101:                                            ; preds = %bb99
  call void @init35(%string* %tmp23, %string* %arg8, i8 0, i64 %arg11, i32 %arg12)
  %tmp102 = load %string, %string* %tmp23, align 8
  store %string %tmp102, %string* %tmp22, align 8
  %tmp103 = call i64 @qio_channel_str_style(%struct.qio_channel_s* %tmp94)
  %tmp104 = getelementptr inbounds %string, %string* %tmp22, i64 0, i32 4
  %tmp105 = load i32, i32* %tmp104, align 4, !tbaa !178
  %tmp106 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp107 = icmp eq i32 %tmp105, %tmp106
  br i1 %tmp107, label %bb109, label %bb108

bb108:                                            ; preds = %bb101
  call void @halt(%string* %tmp15, i64 %arg11, i32 %arg12)
  br label %bb109

bb109:                                            ; preds = %bb101, %bb108
  %tmp110 = getelementptr inbounds %string, %string* %tmp22, i64 0, i32 2
  %tmp111 = load i8*, i8** %tmp110, align 8, !tbaa !179
  %tmp112 = getelementptr inbounds %string, %string* %tmp22, i64 0, i32 0
  %tmp113 = load i64, i64* %tmp112, align 8, !tbaa !175
  %tmp114 = call %struct.qio_err_s* @qio_channel_write_string(i32 0, i32 2, i64 %tmp103, %struct.qio_channel_s* %tmp94, i8* %tmp111, i64 %tmp113)
  call void @deinit23(%string* %tmp22, i64 %arg11, i32 %arg12)
  br label %bb145

bb115:                                            ; preds = %bb99
  call void @init35(%string* %tmp25, %string* %arg8, i8 0, i64 %arg11, i32 %arg12)
  %tmp116 = load %string, %string* %tmp25, align 8
  store %string %tmp116, %string* %tmp24, align 8
  %tmp117 = call i64 @qio_channel_str_style(%struct.qio_channel_s* %tmp94)
  %tmp118 = getelementptr inbounds %string, %string* %tmp24, i64 0, i32 4
  %tmp119 = load i32, i32* %tmp118, align 4, !tbaa !178
  %tmp120 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp121 = icmp eq i32 %tmp119, %tmp120
  br i1 %tmp121, label %bb123, label %bb122

bb122:                                            ; preds = %bb115
  call void @halt(%string* %tmp15, i64 %arg11, i32 %arg12)
  br label %bb123

bb123:                                            ; preds = %bb115, %bb122
  %tmp124 = getelementptr inbounds %string, %string* %tmp24, i64 0, i32 2
  %tmp125 = load i8*, i8** %tmp124, align 8, !tbaa !179
  %tmp126 = getelementptr inbounds %string, %string* %tmp24, i64 0, i32 0
  %tmp127 = load i64, i64* %tmp126, align 8, !tbaa !175
  %tmp128 = call %struct.qio_err_s* @qio_channel_write_string(i32 0, i32 3, i64 %tmp117, %struct.qio_channel_s* %tmp94, i8* %tmp125, i64 %tmp127)
  call void @deinit23(%string* %tmp24, i64 %arg11, i32 %arg12)
  br label %bb145

bb129:                                            ; preds = %bb99
  call void @init35(%string* %tmp27, %string* %arg8, i8 0, i64 %arg11, i32 %arg12)
  %tmp130 = load %string, %string* %tmp27, align 8
  store %string %tmp130, %string* %tmp26, align 8
  %tmp131 = call i64 @qio_channel_str_style(%struct.qio_channel_s* %tmp94)
  %tmp132 = getelementptr inbounds %string, %string* %tmp26, i64 0, i32 4
  %tmp133 = load i32, i32* %tmp132, align 4, !tbaa !178
  %tmp134 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp135 = icmp eq i32 %tmp133, %tmp134
  br i1 %tmp135, label %bb137, label %bb136

bb136:                                            ; preds = %bb129
  call void @halt(%string* %tmp15, i64 %arg11, i32 %arg12)
  br label %bb137

bb137:                                            ; preds = %bb129, %bb136
  %tmp138 = getelementptr inbounds %string, %string* %tmp26, i64 0, i32 2
  %tmp139 = load i8*, i8** %tmp138, align 8, !tbaa !179
  %tmp140 = getelementptr inbounds %string, %string* %tmp26, i64 0, i32 0
  %tmp141 = load i64, i64* %tmp140, align 8, !tbaa !175
  %tmp142 = call %struct.qio_err_s* @qio_channel_write_string(i32 0, i32 1, i64 %tmp131, %struct.qio_channel_s* %tmp94, i8* %tmp139, i64 %tmp141)
  call void @deinit23(%string* %tmp26, i64 %arg11, i32 %arg12)
  br label %bb145

bb143:                                            ; preds = %bb93
  %tmp144 = call %struct.qio_err_s* @_write_text_internal_chpl(%struct.qio_channel_s* %tmp94, %string* %arg8, i64 %arg11, i32 %arg12)
  br label %bb145

bb145:                                            ; preds = %bb143, %bb123, %bb137, %bb109, %bb90
  %.02 = phi %struct.qio_err_s* [ %tmp59, %bb90 ], [ %tmp144, %bb143 ], [ %tmp114, %bb109 ], [ %tmp128, %bb123 ], [ %tmp142, %bb137 ]
  %tmp146 = call i32 @qio_err_iserr(%struct.qio_err_s* %.02)
  %tmp147 = icmp eq i32 %tmp146, 0
  br i1 %tmp147, label %bb148, label %bb160

bb148:                                            ; preds = %bb145
  store %ARRTY2 %tmp58, %ARRTY2* %tmp28, align 8
  %tmp149 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp70, align 8, !tbaa !335
  %tmp150 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp151 = call i32 @chpl_rt_buildLocaleID(i32 %tmp150, i32 -2)
  %tmp152 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp30, i64 0, i32 0
  store i32 %tmp151, i32* %tmp152, align 8, !tbaa !110
  %tmp153 = call %chpl_locale_object* @chpl_localeID_to_locale(%struct.chpl_localeID_t* %tmp30, i64 %arg11, i32 %arg12)
  call void @init_chpl4(%channel_T_dynamic_F_chpl* %tmp29, %chpl_locale_object* %tmp153, %struct.qio_channel_s* %tmp149, %chpl_locale_object* %.03)
  %tmp154 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  call void @qio_channel_clear_error(%struct.qio_channel_s* %tmp149)
  %tmp155 = call %chpl___RuntimeTypeInfo3 @chpl__convertValueToRuntimeType3(%ARRTY2* %tmp28, i64 %arg11, i32 %arg12)
  %tmp156 = call %chpl___RuntimeTypeInfo3 @chpl__convertValueToRuntimeType3(%ARRTY2* %tmp28, i64 %arg11, i32 %arg12)
  %tmp157 = call %chpl___RuntimeTypeInfo3 @chpl__convertValueToRuntimeType3(%ARRTY2* %tmp28, i64 %arg11, i32 %arg12)
  call void @writeThis(%ARRTY2* %tmp28, %channel_T_dynamic_F_chpl* %tmp29, i64 %arg11, i32 %arg12)
  %tmp158 = getelementptr inbounds %channel_T_dynamic_F_chpl, %channel_T_dynamic_F_chpl* %tmp29, i64 0, i32 1
  store %struct.qio_channel_s* null, %struct.qio_channel_s** %tmp158, align 8, !tbaa !346
  %tmp159 = call %struct.qio_err_s* @qio_channel_error(%struct.qio_channel_s* %tmp149)
  call void @deinit_chpl3(%channel_T_dynamic_F_chpl* %tmp29)
  br label %bb160

bb160:                                            ; preds = %bb148, %bb145
  %.1 = phi %struct.qio_err_s* [ %tmp159, %bb148 ], [ %.02, %bb145 ]
  %tmp161 = call i32 @qio_err_iserr(%struct.qio_err_s* %.1)
  %tmp162 = icmp eq i32 %tmp161, 0
  br i1 %tmp162, label %bb163, label %bb167

bb163:                                            ; preds = %bb160
  %tmp164 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp70, align 8, !tbaa !335
  %tmp165 = call %struct.qio_err_s* @qio_int_to_err(i32 0)
  %tmp166 = call %struct.qio_err_s* @qio_channel_write_newline(i32 0, %struct.qio_channel_s* %tmp164)
  br label %bb167

bb167:                                            ; preds = %bb163, %bb160
  %.2 = phi %struct.qio_err_s* [ %tmp166, %bb163 ], [ %.1, %bb160 ]
  %tmp168 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp70, align 8, !tbaa !335
  call void @qio_channel_unlock(%struct.qio_channel_s* %tmp168)
  %tmp169 = call i32 @qio_err_iserr(%struct.qio_err_s* %.2)
  %tmp170 = icmp eq i32 %tmp169, 0
  br i1 %tmp170, label %bb177, label %bb171

bb171:                                            ; preds = %bb167
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8, !tbaa !123
  store %ARRTY2 %tmp58, %ARRTY2* %tmp33, align 8
  call void @_args_to_proto_chpl(%string* %arg8, %ARRTY2* %tmp33, %ioNewline_chpl* %tmp18, %string* %tmp14, %string* %tmp34, i64 %arg11, i32 %arg12)
  %tmp172 = load %string, %string* %tmp34, align 8
  store %string %tmp172, %string* %tmp32, align 8
  call void @chpl___PLUS_(%string* %tmp13, %string* %tmp32, %string* %tmp36, i64 %arg11, i32 %arg12)
  %tmp173 = load %string, %string* %tmp36, align 8
  store %string %tmp173, %string* %tmp35, align 8
  call void @chpl___PLUS_(%string* %tmp35, %string* %tmp, %string* %tmp38, i64 %arg11, i32 %arg12)
  %tmp174 = load %string, %string* %tmp38, align 8
  store %string %tmp174, %string* %tmp37, align 8
  call void @_ch_ioerror_chpl(%channel_T_dynamic_T_chpl* %arg, %struct.qio_err_s* %.2, %string* %tmp37, %chpl_Error_object** %tmp31, i64 %arg11, i32 %arg12)
  call void @deinit23(%string* %tmp37, i64 %arg11, i32 %arg12)
  call void @deinit23(%string* %tmp35, i64 %arg11, i32 %arg12)
  call void @deinit23(%string* %tmp32, i64 %arg11, i32 %arg12)
  %tmp175 = load %chpl_Error_object*, %chpl_Error_object** %tmp31, align 8, !tbaa !125
  %tmp176 = icmp eq %chpl_Error_object* %tmp175, null
  br i1 %tmp176, label %bb177, label %bb178

bb177:                                            ; preds = %bb171, %bb167
  br label %bb178

bb178:                                            ; preds = %bb177, %bb171
  %.01 = phi %chpl_Error_object* [ null, %bb177 ], [ %tmp175, %bb171 ]
  %tmp179 = icmp eq %chpl_Error_object* %.01, null
  br i1 %tmp179, label %bb181, label %bb180

bb180:                                            ; preds = %bb178
  store %chpl_Error_object* %.01, %chpl_Error_object** %arg10, align 8, !tbaa !125
  br label %bb181

bb181:                                            ; preds = %bb178, %bb180
  ret i8 1
}

define internal void @stdinInit_chpl(%channel_F_dynamic_T_chpl* nonnull %arg, i64 %arg23, i32 %arg24) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8
  %tmp25 = alloca %file_chpl, align 8
  %tmp26 = alloca %struct.qio_style_s, align 8
  %tmp27 = alloca %struct.qio_style_s, align 8
  %tmp28 = alloca %file_chpl, align 8
  %tmp29 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp30 = alloca %struct.qio_style_s, align 8
  %tmp31 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8
  %tmp32 = alloca %struct.qio_style_s, align 8
  %tmp33 = alloca %channel_F_dynamic_T_chpl, align 8
  %tmp34 = load i32, i32* @IOHINT_NONE_chpl, align 4, !tbaa !6
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @defaultIOStyle_chpl(%struct.qio_style_s* %tmp27)
  %tmp35 = load %struct.qio_style_s, %struct.qio_style_s* %tmp27, align 8
  store %struct.qio_style_s %tmp35, %struct.qio_style_s* %tmp26, align 8
  %tmp36 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp37 = icmp eq %chpl_Error_object* %tmp36, null
  br i1 %tmp37, label %bb39, label %bb38

bb38:                                             ; preds = %.split
  call void @deinit_chpl(%file_chpl* %tmp25)
  br label %bb61

bb39:                                             ; preds = %.split
  call void @openfd_chpl(i32 0, i32 %tmp34, %struct.qio_style_s* %tmp26, %chpl_Error_object** %tmp, %file_chpl* %tmp28, i64 %arg23, i32 %arg24)
  %tmp40 = bitcast %file_chpl* %tmp28 to i64*
  %.unpack8 = load i64, i64* %tmp40, align 8
  %.elt2 = getelementptr inbounds %file_chpl, %file_chpl* %tmp28, i64 0, i32 1
  %tmp41 = bitcast %struct.qio_file_s** %.elt2 to i64*
  %.unpack37 = load i64, i64* %tmp41, align 8
  %tmp42 = bitcast %file_chpl* %tmp25 to i64*
  store i64 %.unpack8, i64* %tmp42, align 8
  %.repack5 = getelementptr inbounds %file_chpl, %file_chpl* %tmp25, i64 0, i32 1
  %tmp43 = bitcast %struct.qio_file_s** %.repack5 to i64*
  store i64 %.unpack37, i64* %tmp43, align 8
  %tmp44 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp45 = icmp eq %chpl_Error_object* %tmp44, null
  br i1 %tmp45, label %bb46, label %bb61

bb46:                                             ; preds = %bb39
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8, !tbaa !123
  call void @_style_chpl(%file_chpl* %tmp25, %chpl_Error_object** %tmp31, %struct.qio_style_s* %tmp32, i64 %arg23, i32 %arg24)
  %tmp47 = load %struct.qio_style_s, %struct.qio_style_s* %tmp32, align 8
  %tmp48 = load %chpl_Error_object*, %chpl_Error_object** %tmp31, align 8, !tbaa !125
  %tmp49 = icmp eq %chpl_Error_object* %tmp48, null
  br i1 %tmp49, label %bb51, label %bb50

bb50:                                             ; preds = %bb46
  store %chpl_Error_object* %tmp48, %chpl_Error_object** %tmp, align 8, !tbaa !125
  br label %bb51

bb51:                                             ; preds = %bb46, %bb50
  store %struct.qio_style_s %tmp47, %struct.qio_style_s* %tmp30, align 8
  %tmp52 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp53 = icmp eq %chpl_Error_object* %tmp52, null
  br i1 %tmp53, label %bb55, label %bb54

bb54:                                             ; preds = %bb51
  call void @deinit_chpl4(%channel_F_dynamic_T_chpl* %tmp29)
  call void @deinit_chpl(%file_chpl* %tmp25)
  br label %bb61

bb55:                                             ; preds = %bb51
  call void @reader_chpl(%file_chpl* %tmp25, i64 0, i64 9223372036854775807, i32 %tmp34, %struct.qio_style_s* %tmp30, %chpl_Error_object** %tmp, %channel_F_dynamic_T_chpl* %tmp33, i64 %arg23, i32 %arg24)
  %.elt = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp33, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp56 = insertvalue %channel_F_dynamic_T_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt9 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp33, i64 0, i32 1
  %.unpack10 = load %struct.qio_channel_s*, %struct.qio_channel_s** %.elt9, align 8
  %tmp57 = insertvalue %channel_F_dynamic_T_chpl %tmp56, %struct.qio_channel_s* %.unpack10, 1
  %.elt11 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp33, i64 0, i32 2
  %.unpack12 = load %chpl_locale_object*, %chpl_locale_object** %.elt11, align 8
  %tmp58 = insertvalue %channel_F_dynamic_T_chpl %tmp57, %chpl_locale_object* %.unpack12, 2
  %.repack = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp29, i64 0, i32 0
  store %chpl_locale_object* %.unpack, %chpl_locale_object** %.repack, align 8
  %.repack14 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp29, i64 0, i32 1
  store %struct.qio_channel_s* %.unpack10, %struct.qio_channel_s** %.repack14, align 8
  %.repack16 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %tmp29, i64 0, i32 2
  store %chpl_locale_object* %.unpack12, %chpl_locale_object** %.repack16, align 8
  %tmp59 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp60 = icmp eq %chpl_Error_object* %tmp59, null
  call void @deinit_chpl(%file_chpl* %tmp25)
  br i1 %tmp60, label %bb65, label %bb61

bb61:                                             ; preds = %bb39, %bb55, %bb54, %bb38
  %tmp62 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp63 = icmp eq %chpl_Error_object* %tmp62, null
  br i1 %tmp63, label %bb65, label %bb64

bb64:                                             ; preds = %bb61
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp62, i64 %arg23, i32 %arg24)
  br label %bb65

bb65:                                             ; preds = %bb55, %bb64, %bb61
  %.0 = phi %channel_F_dynamic_T_chpl [ undef, %bb61 ], [ undef, %bb64 ], [ %tmp58, %bb55 ]
  %.repack18 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 0
  %.0.elt = extractvalue %channel_F_dynamic_T_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack18, align 8
  %.repack19 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 1
  %.0.elt20 = extractvalue %channel_F_dynamic_T_chpl %.0, 1
  store %struct.qio_channel_s* %.0.elt20, %struct.qio_channel_s** %.repack19, align 8
  %.repack21 = getelementptr inbounds %channel_F_dynamic_T_chpl, %channel_F_dynamic_T_chpl* %arg, i64 0, i32 2
  %.0.elt22 = extractvalue %channel_F_dynamic_T_chpl %.0, 2
  store %chpl_locale_object* %.0.elt22, %chpl_locale_object** %.repack21, align 8
  ret void
}

define internal void @stdoutInit_chpl(%channel_T_dynamic_T_chpl* nonnull %arg, i64 %arg23, i32 %arg24) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8
  %tmp25 = alloca %file_chpl, align 8
  %tmp26 = alloca %struct.qio_style_s, align 8
  %tmp27 = alloca %struct.qio_style_s, align 8
  %tmp28 = alloca %file_chpl, align 8
  %tmp29 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp30 = alloca %struct.qio_style_s, align 8
  %tmp31 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8
  %tmp32 = alloca %struct.qio_style_s, align 8
  %tmp33 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp34 = load i32, i32* @IOHINT_NONE_chpl, align 4, !tbaa !6
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  %tmp35 = tail call %struct._IO_FILE* @chpl_cstdout()
  br i1 true, label %bb37, label %bb36

bb36:                                             ; preds = %.split
  br label %bb64

bb37:                                             ; preds = %.split
  call void @defaultIOStyle_chpl(%struct.qio_style_s* %tmp27)
  %tmp38 = load %struct.qio_style_s, %struct.qio_style_s* %tmp27, align 8
  store %struct.qio_style_s %tmp38, %struct.qio_style_s* %tmp26, align 8
  %tmp39 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp40 = icmp eq %chpl_Error_object* %tmp39, null
  br i1 %tmp40, label %bb42, label %bb41

bb41:                                             ; preds = %bb37
  call void @deinit_chpl(%file_chpl* %tmp25)
  br label %bb64

bb42:                                             ; preds = %bb37
  call void @openfp_chpl(%struct._IO_FILE* %tmp35, i32 %tmp34, %struct.qio_style_s* %tmp26, %chpl_Error_object** %tmp, %file_chpl* %tmp28, i64 %arg23, i32 %arg24)
  %tmp43 = bitcast %file_chpl* %tmp28 to i64*
  %.unpack8 = load i64, i64* %tmp43, align 8
  %.elt2 = getelementptr inbounds %file_chpl, %file_chpl* %tmp28, i64 0, i32 1
  %tmp44 = bitcast %struct.qio_file_s** %.elt2 to i64*
  %.unpack37 = load i64, i64* %tmp44, align 8
  %tmp45 = bitcast %file_chpl* %tmp25 to i64*
  store i64 %.unpack8, i64* %tmp45, align 8
  %.repack5 = getelementptr inbounds %file_chpl, %file_chpl* %tmp25, i64 0, i32 1
  %tmp46 = bitcast %struct.qio_file_s** %.repack5 to i64*
  store i64 %.unpack37, i64* %tmp46, align 8
  %tmp47 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp48 = icmp eq %chpl_Error_object* %tmp47, null
  br i1 %tmp48, label %bb49, label %bb64

bb49:                                             ; preds = %bb42
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8, !tbaa !123
  call void @_style_chpl(%file_chpl* %tmp25, %chpl_Error_object** %tmp31, %struct.qio_style_s* %tmp32, i64 %arg23, i32 %arg24)
  %tmp50 = load %struct.qio_style_s, %struct.qio_style_s* %tmp32, align 8
  %tmp51 = load %chpl_Error_object*, %chpl_Error_object** %tmp31, align 8, !tbaa !125
  %tmp52 = icmp eq %chpl_Error_object* %tmp51, null
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb49
  store %chpl_Error_object* %tmp51, %chpl_Error_object** %tmp, align 8, !tbaa !125
  br label %bb54

bb54:                                             ; preds = %bb49, %bb53
  store %struct.qio_style_s %tmp50, %struct.qio_style_s* %tmp30, align 8
  %tmp55 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp56 = icmp eq %chpl_Error_object* %tmp55, null
  br i1 %tmp56, label %bb58, label %bb57

bb57:                                             ; preds = %bb54
  call void @deinit_chpl2(%channel_T_dynamic_T_chpl* %tmp29)
  call void @deinit_chpl(%file_chpl* %tmp25)
  br label %bb64

bb58:                                             ; preds = %bb54
  call void @writer_chpl(%file_chpl* %tmp25, i64 0, i64 9223372036854775807, i32 0, %struct.qio_style_s* %tmp30, %chpl_Error_object** %tmp, %channel_T_dynamic_T_chpl* %tmp33, i64 %arg23, i32 %arg24)
  %.elt = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp33, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp59 = insertvalue %channel_T_dynamic_T_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt9 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp33, i64 0, i32 1
  %.unpack10 = load %struct.qio_channel_s*, %struct.qio_channel_s** %.elt9, align 8
  %tmp60 = insertvalue %channel_T_dynamic_T_chpl %tmp59, %struct.qio_channel_s* %.unpack10, 1
  %.elt11 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp33, i64 0, i32 2
  %.unpack12 = load %chpl_locale_object*, %chpl_locale_object** %.elt11, align 8
  %tmp61 = insertvalue %channel_T_dynamic_T_chpl %tmp60, %chpl_locale_object* %.unpack12, 2
  %.repack = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp29, i64 0, i32 0
  store %chpl_locale_object* %.unpack, %chpl_locale_object** %.repack, align 8
  %.repack14 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp29, i64 0, i32 1
  store %struct.qio_channel_s* %.unpack10, %struct.qio_channel_s** %.repack14, align 8
  %.repack16 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp29, i64 0, i32 2
  store %chpl_locale_object* %.unpack12, %chpl_locale_object** %.repack16, align 8
  %tmp62 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp63 = icmp eq %chpl_Error_object* %tmp62, null
  call void @deinit_chpl(%file_chpl* %tmp25)
  br i1 %tmp63, label %bb68, label %bb64

bb64:                                             ; preds = %bb58, %bb42, %bb57, %bb41, %bb36
  %tmp65 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp66 = icmp eq %chpl_Error_object* %tmp65, null
  br i1 %tmp66, label %bb68, label %bb67

bb67:                                             ; preds = %bb64
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp65, i64 %arg23, i32 %arg24)
  br label %bb68

bb68:                                             ; preds = %bb58, %bb67, %bb64
  %.0 = phi %channel_T_dynamic_T_chpl [ undef, %bb64 ], [ undef, %bb67 ], [ %tmp61, %bb58 ]
  %.repack18 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 0
  %.0.elt = extractvalue %channel_T_dynamic_T_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack18, align 8
  %.repack19 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  %.0.elt20 = extractvalue %channel_T_dynamic_T_chpl %.0, 1
  store %struct.qio_channel_s* %.0.elt20, %struct.qio_channel_s** %.repack19, align 8
  %.repack21 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 2
  %.0.elt22 = extractvalue %channel_T_dynamic_T_chpl %.0, 2
  store %chpl_locale_object* %.0.elt22, %chpl_locale_object** %.repack21, align 8
  ret void
}

define internal void @stderrInit_chpl(%channel_T_dynamic_T_chpl* nonnull %arg, i64 %arg23, i32 %arg24) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8
  %tmp25 = alloca %file_chpl, align 8
  %tmp26 = alloca %struct.qio_style_s, align 8
  %tmp27 = alloca %struct.qio_style_s, align 8
  %tmp28 = alloca %file_chpl, align 8
  %tmp29 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp30 = alloca %struct.qio_style_s, align 8
  %tmp31 = alloca %chpl_Error_object*, align 8
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8
  %tmp32 = alloca %struct.qio_style_s, align 8
  %tmp33 = alloca %channel_T_dynamic_T_chpl, align 8
  %tmp34 = load i32, i32* @IOHINT_NONE_chpl, align 4, !tbaa !6
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  %tmp35 = tail call %struct._IO_FILE* @chpl_cstderr()
  br i1 true, label %bb37, label %bb36

bb36:                                             ; preds = %.split
  br label %bb64

bb37:                                             ; preds = %.split
  call void @defaultIOStyle_chpl(%struct.qio_style_s* %tmp27)
  %tmp38 = load %struct.qio_style_s, %struct.qio_style_s* %tmp27, align 8
  store %struct.qio_style_s %tmp38, %struct.qio_style_s* %tmp26, align 8
  %tmp39 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp40 = icmp eq %chpl_Error_object* %tmp39, null
  br i1 %tmp40, label %bb42, label %bb41

bb41:                                             ; preds = %bb37
  call void @deinit_chpl(%file_chpl* %tmp25)
  br label %bb64

bb42:                                             ; preds = %bb37
  call void @openfp_chpl(%struct._IO_FILE* %tmp35, i32 %tmp34, %struct.qio_style_s* %tmp26, %chpl_Error_object** %tmp, %file_chpl* %tmp28, i64 %arg23, i32 %arg24)
  %tmp43 = bitcast %file_chpl* %tmp28 to i64*
  %.unpack8 = load i64, i64* %tmp43, align 8
  %.elt2 = getelementptr inbounds %file_chpl, %file_chpl* %tmp28, i64 0, i32 1
  %tmp44 = bitcast %struct.qio_file_s** %.elt2 to i64*
  %.unpack37 = load i64, i64* %tmp44, align 8
  %tmp45 = bitcast %file_chpl* %tmp25 to i64*
  store i64 %.unpack8, i64* %tmp45, align 8
  %.repack5 = getelementptr inbounds %file_chpl, %file_chpl* %tmp25, i64 0, i32 1
  %tmp46 = bitcast %struct.qio_file_s** %.repack5 to i64*
  store i64 %.unpack37, i64* %tmp46, align 8
  %tmp47 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp48 = icmp eq %chpl_Error_object* %tmp47, null
  br i1 %tmp48, label %bb49, label %bb64

bb49:                                             ; preds = %bb42
  store %chpl_Error_object* null, %chpl_Error_object** %tmp31, align 8, !tbaa !123
  call void @_style_chpl(%file_chpl* %tmp25, %chpl_Error_object** %tmp31, %struct.qio_style_s* %tmp32, i64 %arg23, i32 %arg24)
  %tmp50 = load %struct.qio_style_s, %struct.qio_style_s* %tmp32, align 8
  %tmp51 = load %chpl_Error_object*, %chpl_Error_object** %tmp31, align 8, !tbaa !125
  %tmp52 = icmp eq %chpl_Error_object* %tmp51, null
  br i1 %tmp52, label %bb54, label %bb53

bb53:                                             ; preds = %bb49
  store %chpl_Error_object* %tmp51, %chpl_Error_object** %tmp, align 8, !tbaa !125
  br label %bb54

bb54:                                             ; preds = %bb49, %bb53
  store %struct.qio_style_s %tmp50, %struct.qio_style_s* %tmp30, align 8
  %tmp55 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp56 = icmp eq %chpl_Error_object* %tmp55, null
  br i1 %tmp56, label %bb58, label %bb57

bb57:                                             ; preds = %bb54
  call void @deinit_chpl2(%channel_T_dynamic_T_chpl* %tmp29)
  call void @deinit_chpl(%file_chpl* %tmp25)
  br label %bb64

bb58:                                             ; preds = %bb54
  call void @writer_chpl(%file_chpl* %tmp25, i64 0, i64 9223372036854775807, i32 0, %struct.qio_style_s* %tmp30, %chpl_Error_object** %tmp, %channel_T_dynamic_T_chpl* %tmp33, i64 %arg23, i32 %arg24)
  %.elt = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp33, i64 0, i32 0
  %.unpack = load %chpl_locale_object*, %chpl_locale_object** %.elt, align 8
  %tmp59 = insertvalue %channel_T_dynamic_T_chpl undef, %chpl_locale_object* %.unpack, 0
  %.elt9 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp33, i64 0, i32 1
  %.unpack10 = load %struct.qio_channel_s*, %struct.qio_channel_s** %.elt9, align 8
  %tmp60 = insertvalue %channel_T_dynamic_T_chpl %tmp59, %struct.qio_channel_s* %.unpack10, 1
  %.elt11 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp33, i64 0, i32 2
  %.unpack12 = load %chpl_locale_object*, %chpl_locale_object** %.elt11, align 8
  %tmp61 = insertvalue %channel_T_dynamic_T_chpl %tmp60, %chpl_locale_object* %.unpack12, 2
  %.repack = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp29, i64 0, i32 0
  store %chpl_locale_object* %.unpack, %chpl_locale_object** %.repack, align 8
  %.repack14 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp29, i64 0, i32 1
  store %struct.qio_channel_s* %.unpack10, %struct.qio_channel_s** %.repack14, align 8
  %.repack16 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %tmp29, i64 0, i32 2
  store %chpl_locale_object* %.unpack12, %chpl_locale_object** %.repack16, align 8
  %tmp62 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp63 = icmp eq %chpl_Error_object* %tmp62, null
  call void @deinit_chpl(%file_chpl* %tmp25)
  br i1 %tmp63, label %bb68, label %bb64

bb64:                                             ; preds = %bb58, %bb42, %bb57, %bb41, %bb36
  %tmp65 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp66 = icmp eq %chpl_Error_object* %tmp65, null
  br i1 %tmp66, label %bb68, label %bb67

bb67:                                             ; preds = %bb64
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp65, i64 %arg23, i32 %arg24)
  br label %bb68

bb68:                                             ; preds = %bb58, %bb67, %bb64
  %.0 = phi %channel_T_dynamic_T_chpl [ undef, %bb64 ], [ undef, %bb67 ], [ %tmp61, %bb58 ]
  %.repack18 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 0
  %.0.elt = extractvalue %channel_T_dynamic_T_chpl %.0, 0
  store %chpl_locale_object* %.0.elt, %chpl_locale_object** %.repack18, align 8
  %.repack19 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 1
  %.0.elt20 = extractvalue %channel_T_dynamic_T_chpl %.0, 1
  store %struct.qio_channel_s* %.0.elt20, %struct.qio_channel_s** %.repack19, align 8
  %.repack21 = getelementptr inbounds %channel_T_dynamic_T_chpl, %channel_T_dynamic_T_chpl* %arg, i64 0, i32 2
  %.0.elt22 = extractvalue %channel_T_dynamic_T_chpl %.0, 2
  store %chpl_locale_object* %.0.elt22, %chpl_locale_object** %.repack21, align 8
  ret void
}

define internal void @writeln_chpl2(%string* nonnull %arg, %ARRTY2* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  %tmp4 = call i8 @writeln_chpl(%channel_T_dynamic_T_chpl* @stdout_chpl, %string* %arg, %ARRTY2* %arg1, %chpl_Error_object** %tmp, i64 %arg2, i32 %arg3)
  %tmp5 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp6 = icmp eq %chpl_Error_object* %tmp5, null
  br i1 %tmp6, label %bb8, label %bb7

bb7:                                              ; preds = %.split
  call void @chpl_uncaught_error(%chpl_Error_object* nonnull %tmp5, i64 %arg2, i32 %arg3)
  br label %bb8

bb8:                                              ; preds = %.split, %bb7
  ret void
}

define internal void @chpl__init_List(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_List_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @263, i64 0, i64 0), i64 4, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_List_p, align 1, !tbaa !8
  tail call void @chpl__init_ChapelIO(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__auto_destroy_listNode(%chpl_listNode_BaseArr_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__auto_destroy_listNode2(%chpl_listNode_BaseDom_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @init_chpl9(%chpl_listNode_BaseArr_chpl_object* %arg, %chpl_BaseArr_object* %arg1, %chpl_listNode_BaseArr_chpl_object* %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %arg, i64 0, i32 0
  %tmp5 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp)
  %tmp6 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %arg, i64 0, i32 0, i32 0
  store i32 1, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %arg, i64 0, i32 1
  store %chpl_BaseArr_object* %arg1, %chpl_BaseArr_object** %tmp7, align 8, !tbaa !195
  %tmp8 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %arg, i64 0, i32 2
  store %chpl_listNode_BaseArr_chpl_object* %arg2, %chpl_listNode_BaseArr_chpl_object** %tmp8, align 8, !tbaa !197
  store i32 57, i32* %tmp6, align 4, !tbaa !170
  ret void
}

define internal void @init_chpl10(%list_BaseArr_chpl* nonnull %arg, %chpl_listNode_BaseArr_chpl_object* %arg1, %chpl_listNode_BaseArr_chpl_object* %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 0
  store %chpl_listNode_BaseArr_chpl_object* %arg1, %chpl_listNode_BaseArr_chpl_object** %tmp, align 8, !tbaa !194
  %tmp3 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 1
  store %chpl_listNode_BaseArr_chpl_object* %arg2, %chpl_listNode_BaseArr_chpl_object** %tmp3, align 8, !tbaa !353
  %tmp4 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 2
  store i64 0, i64* %tmp4, align 8, !tbaa !354
  ret void
}

define internal void @init_chpl11(%list_BaseDom_chpl* nonnull %arg, %chpl_listNode_BaseDom_chpl_object* %arg1, %chpl_listNode_BaseDom_chpl_object* %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 0
  store %chpl_listNode_BaseDom_chpl_object* %arg1, %chpl_listNode_BaseDom_chpl_object** %tmp, align 8, !tbaa !355
  %tmp3 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 1
  store %chpl_listNode_BaseDom_chpl_object* %arg2, %chpl_listNode_BaseDom_chpl_object** %tmp3, align 8, !tbaa !356
  %tmp4 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 2
  store i64 0, i64* %tmp4, align 8, !tbaa !357
  ret void
}

define internal i64 @size_chpl(%list_BaseDom_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 2
  %tmp1 = load i64, i64* %tmp, align 8, !tbaa !357
  ret i64 %tmp1
}

define internal i64 @size_chpl2(%list_BaseArr_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 2
  %tmp1 = load i64, i64* %tmp, align 8, !tbaa !354
  ret i64 %tmp1
}

define internal void @append_chpl(%list_BaseArr_chpl* nonnull %arg, %chpl_BaseArr_object* %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 1
  %tmp4 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp, align 8, !tbaa !353
  %tmp5 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp4, null
  %tmp6 = tail call i8* @chpl_here_alloc(i64 24, i16 59, i64 %arg2, i32 %arg3)
  %tmp7 = bitcast i8* %tmp6 to %chpl_listNode_BaseArr_chpl_object*
  tail call void @init_chpl9(%chpl_listNode_BaseArr_chpl_object* %tmp7, %chpl_BaseArr_object* %arg1, %chpl_listNode_BaseArr_chpl_object* null, i64 %arg2, i32 %arg3)
  br i1 %tmp5, label %bb16, label %bb8

bb8:                                              ; preds = %.split
  %tmp9 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %tmp4, i64 0, i32 2
  %tmp10 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp9 to i8**
  store i8* %tmp6, i8** %tmp10, align 8, !tbaa !197
  %tmp11 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp, align 8, !tbaa !353
  %tmp12 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %tmp11, i64 0, i32 2
  %tmp13 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp12 to i64*
  %tmp14 = load i64, i64* %tmp13, align 8, !tbaa !197
  %tmp15 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp to i64*
  store i64 %tmp14, i64* %tmp15, align 8, !tbaa !353
  br label %bb19

bb16:                                             ; preds = %.split
  %tmp17 = bitcast %list_BaseArr_chpl* %arg to i8**
  store i8* %tmp6, i8** %tmp17, align 8, !tbaa !194
  %tmp18 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp to i8**
  store i8* %tmp6, i8** %tmp18, align 8, !tbaa !353
  br label %bb19

bb19:                                             ; preds = %bb16, %bb8
  %tmp20 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 2
  %tmp21 = load i64, i64* %tmp20, align 8, !tbaa !138
  %tmp22 = add nsw i64 %tmp21, 1
  store i64 %tmp22, i64* %tmp20, align 8, !tbaa !138
  ret void
}

define internal void @remove_chpl(%list_BaseDom_chpl* nonnull %arg, %chpl_BaseDom_object* %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 0
  %tmp10 = load %chpl_listNode_BaseDom_chpl_object*, %chpl_listNode_BaseDom_chpl_object** %tmp, align 8, !tbaa !355
  %tmp11 = icmp eq %chpl_listNode_BaseDom_chpl_object* %tmp10, null
  br i1 %tmp11, label %bb18, label %bb12

bb12:                                             ; preds = %.split
  %tmp13 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg7, i64 0, i32 0
  %tmp14 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %tmp10, i64 0, i32 1
  %tmp15 = bitcast %chpl_BaseDom_object** %tmp14 to %chpl_object_object**
  %tmp16 = load %chpl_object_object*, %chpl_object_object** %tmp15, align 8, !tbaa !358
  %tmp17 = icmp eq %chpl_object_object* %tmp16, %tmp13
  br label %bb18

bb18:                                             ; preds = %.split, %bb12
  %.04 = phi i1 [ %tmp17, %bb12 ], [ true, %.split ]
  br i1 %.04, label %bb32, label %.lr.ph

.lr.ph:                                           ; preds = %bb18
  br label %bb19

bb19:                                             ; preds = %.lr.ph, %bb30
  %.05 = phi %chpl_listNode_BaseDom_chpl_object* [ %tmp10, %.lr.ph ], [ %tmp21, %bb30 ]
  %tmp20 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %.05, i64 0, i32 2
  %tmp21 = load %chpl_listNode_BaseDom_chpl_object*, %chpl_listNode_BaseDom_chpl_object** %tmp20, align 8, !tbaa !360
  %tmp22 = icmp eq %chpl_listNode_BaseDom_chpl_object* %tmp21, null
  br i1 %tmp22, label %bb30, label %bb23

bb23:                                             ; preds = %bb19
  %tmp24 = getelementptr inbounds %chpl_BaseDom_object, %chpl_BaseDom_object* %arg7, i64 0, i32 0
  %tmp25 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %tmp21, i64 0, i32 1
  %tmp26 = bitcast %chpl_BaseDom_object** %tmp25 to %chpl_object_object**
  %tmp27 = load %chpl_object_object*, %chpl_object_object** %tmp26, align 8, !tbaa !358
  %tmp28 = icmp ne %chpl_object_object* %tmp27, %tmp24
  %tmp29 = zext i1 %tmp28 to i8
  br label %bb30

bb30:                                             ; preds = %bb19, %bb23
  %.03 = phi i8 [ %tmp29, %bb23 ], [ 0, %bb19 ]
  %tmp31 = icmp eq i8 %.03, 0
  br i1 %tmp31, label %._crit_edge, label %bb19

._crit_edge:                                      ; preds = %bb30
  %.05.lcssa = phi %chpl_listNode_BaseDom_chpl_object* [ %.05, %bb30 ]
  %.lcssa = phi %chpl_listNode_BaseDom_chpl_object* [ %tmp21, %bb30 ]
  br label %bb32

bb32:                                             ; preds = %._crit_edge, %bb18
  %.01.lcssa = phi %chpl_listNode_BaseDom_chpl_object* [ %.05.lcssa, %._crit_edge ], [ null, %bb18 ]
  %.0.lcssa = phi %chpl_listNode_BaseDom_chpl_object* [ %.lcssa, %._crit_edge ], [ %tmp10, %bb18 ]
  %tmp33 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %.0.lcssa, i64 0, i32 0
  %tmp34 = icmp eq %chpl_listNode_BaseDom_chpl_object* %.0.lcssa, null
  br i1 %tmp34, label %bb63, label %bb35

bb35:                                             ; preds = %bb32
  %tmp36 = icmp eq %chpl_listNode_BaseDom_chpl_object* %.01.lcssa, null
  br i1 %tmp36, label %bb43, label %bb37

bb37:                                             ; preds = %bb35
  %tmp38 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %.01.lcssa, i64 0, i32 2
  %tmp39 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %.0.lcssa, i64 0, i32 2
  %tmp40 = bitcast %chpl_listNode_BaseDom_chpl_object** %tmp39 to i64*
  %tmp41 = load i64, i64* %tmp40, align 8, !tbaa !360
  %tmp42 = bitcast %chpl_listNode_BaseDom_chpl_object** %tmp38 to i64*
  store i64 %tmp41, i64* %tmp42, align 8, !tbaa !360
  br label %bb43

bb43:                                             ; preds = %bb37, %bb35
  %tmp44 = bitcast %list_BaseDom_chpl* %arg to %chpl_object_object**
  %tmp45 = load %chpl_object_object*, %chpl_object_object** %tmp44, align 8, !tbaa !355
  %tmp46 = icmp eq %chpl_object_object* %tmp45, %tmp33
  br i1 %tmp46, label %bb47, label %bb52

bb47:                                             ; preds = %bb43
  %tmp48 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %.0.lcssa, i64 0, i32 2
  %tmp49 = bitcast %chpl_listNode_BaseDom_chpl_object** %tmp48 to i64*
  %tmp50 = load i64, i64* %tmp49, align 8, !tbaa !360
  %tmp51 = bitcast %list_BaseDom_chpl* %arg to i64*
  store i64 %tmp50, i64* %tmp51, align 8, !tbaa !355
  br label %bb52

bb52:                                             ; preds = %bb47, %bb43
  %tmp53 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 1
  %tmp54 = bitcast %chpl_listNode_BaseDom_chpl_object** %tmp53 to %chpl_object_object**
  %tmp55 = load %chpl_object_object*, %chpl_object_object** %tmp54, align 8, !tbaa !356
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp33
  br i1 %tmp56, label %bb57, label %bb58

bb57:                                             ; preds = %bb52
  store %chpl_listNode_BaseDom_chpl_object* %.01.lcssa, %chpl_listNode_BaseDom_chpl_object** %tmp53, align 8, !tbaa !356
  br label %bb58

bb58:                                             ; preds = %bb52, %bb57
  %tmp59 = bitcast %chpl_listNode_BaseDom_chpl_object* %.0.lcssa to i8*
  tail call void @chpl_here_free(i8* %tmp59, i64 %arg8, i32 %arg9)
  %tmp60 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 2
  %tmp61 = load i64, i64* %tmp60, align 8, !tbaa !138
  %tmp62 = add nsw i64 %tmp61, -1
  store i64 %tmp62, i64* %tmp60, align 8, !tbaa !138
  br label %bb63

bb63:                                             ; preds = %bb32, %bb58
  ret void
}

define internal void @remove_chpl2(%list_BaseArr_chpl* nonnull %arg, %chpl_BaseArr_object* %arg7, i64 %arg8, i32 %arg9) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 0
  %tmp10 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp, align 8, !tbaa !194
  %tmp11 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp10, null
  br i1 %tmp11, label %bb18, label %bb12

bb12:                                             ; preds = %.split
  %tmp13 = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %arg7, i64 0, i32 0
  %tmp14 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %tmp10, i64 0, i32 1
  %tmp15 = bitcast %chpl_BaseArr_object** %tmp14 to %chpl_object_object**
  %tmp16 = load %chpl_object_object*, %chpl_object_object** %tmp15, align 8, !tbaa !195
  %tmp17 = icmp eq %chpl_object_object* %tmp16, %tmp13
  br label %bb18

bb18:                                             ; preds = %.split, %bb12
  %.04 = phi i1 [ %tmp17, %bb12 ], [ true, %.split ]
  br i1 %.04, label %bb32, label %.lr.ph

.lr.ph:                                           ; preds = %bb18
  br label %bb19

bb19:                                             ; preds = %.lr.ph, %bb30
  %.05 = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp10, %.lr.ph ], [ %tmp21, %bb30 ]
  %tmp20 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.05, i64 0, i32 2
  %tmp21 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp20, align 8, !tbaa !197
  %tmp22 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp21, null
  br i1 %tmp22, label %bb30, label %bb23

bb23:                                             ; preds = %bb19
  %tmp24 = getelementptr inbounds %chpl_BaseArr_object, %chpl_BaseArr_object* %arg7, i64 0, i32 0
  %tmp25 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %tmp21, i64 0, i32 1
  %tmp26 = bitcast %chpl_BaseArr_object** %tmp25 to %chpl_object_object**
  %tmp27 = load %chpl_object_object*, %chpl_object_object** %tmp26, align 8, !tbaa !195
  %tmp28 = icmp ne %chpl_object_object* %tmp27, %tmp24
  %tmp29 = zext i1 %tmp28 to i8
  br label %bb30

bb30:                                             ; preds = %bb19, %bb23
  %.03 = phi i8 [ %tmp29, %bb23 ], [ 0, %bb19 ]
  %tmp31 = icmp eq i8 %.03, 0
  br i1 %tmp31, label %._crit_edge, label %bb19

._crit_edge:                                      ; preds = %bb30
  %.05.lcssa = phi %chpl_listNode_BaseArr_chpl_object* [ %.05, %bb30 ]
  %.lcssa = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp21, %bb30 ]
  br label %bb32

bb32:                                             ; preds = %._crit_edge, %bb18
  %.01.lcssa = phi %chpl_listNode_BaseArr_chpl_object* [ %.05.lcssa, %._crit_edge ], [ null, %bb18 ]
  %.0.lcssa = phi %chpl_listNode_BaseArr_chpl_object* [ %.lcssa, %._crit_edge ], [ %tmp10, %bb18 ]
  %tmp33 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0.lcssa, i64 0, i32 0
  %tmp34 = icmp eq %chpl_listNode_BaseArr_chpl_object* %.0.lcssa, null
  br i1 %tmp34, label %bb63, label %bb35

bb35:                                             ; preds = %bb32
  %tmp36 = icmp eq %chpl_listNode_BaseArr_chpl_object* %.01.lcssa, null
  br i1 %tmp36, label %bb43, label %bb37

bb37:                                             ; preds = %bb35
  %tmp38 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.01.lcssa, i64 0, i32 2
  %tmp39 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0.lcssa, i64 0, i32 2
  %tmp40 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp39 to i64*
  %tmp41 = load i64, i64* %tmp40, align 8, !tbaa !197
  %tmp42 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp38 to i64*
  store i64 %tmp41, i64* %tmp42, align 8, !tbaa !197
  br label %bb43

bb43:                                             ; preds = %bb37, %bb35
  %tmp44 = bitcast %list_BaseArr_chpl* %arg to %chpl_object_object**
  %tmp45 = load %chpl_object_object*, %chpl_object_object** %tmp44, align 8, !tbaa !194
  %tmp46 = icmp eq %chpl_object_object* %tmp45, %tmp33
  br i1 %tmp46, label %bb47, label %bb52

bb47:                                             ; preds = %bb43
  %tmp48 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.0.lcssa, i64 0, i32 2
  %tmp49 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp48 to i64*
  %tmp50 = load i64, i64* %tmp49, align 8, !tbaa !197
  %tmp51 = bitcast %list_BaseArr_chpl* %arg to i64*
  store i64 %tmp50, i64* %tmp51, align 8, !tbaa !194
  br label %bb52

bb52:                                             ; preds = %bb47, %bb43
  %tmp53 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 1
  %tmp54 = bitcast %chpl_listNode_BaseArr_chpl_object** %tmp53 to %chpl_object_object**
  %tmp55 = load %chpl_object_object*, %chpl_object_object** %tmp54, align 8, !tbaa !353
  %tmp56 = icmp eq %chpl_object_object* %tmp55, %tmp33
  br i1 %tmp56, label %bb57, label %bb58

bb57:                                             ; preds = %bb52
  store %chpl_listNode_BaseArr_chpl_object* %.01.lcssa, %chpl_listNode_BaseArr_chpl_object** %tmp53, align 8, !tbaa !353
  br label %bb58

bb58:                                             ; preds = %bb52, %bb57
  %tmp59 = bitcast %chpl_listNode_BaseArr_chpl_object* %.0.lcssa to i8*
  tail call void @chpl_here_free(i8* %tmp59, i64 %arg8, i32 %arg9)
  %tmp60 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 2
  %tmp61 = load i64, i64* %tmp60, align 8, !tbaa !138
  %tmp62 = add nsw i64 %tmp61, -1
  store i64 %tmp62, i64* %tmp60, align 8, !tbaa !138
  br label %bb63

bb63:                                             ; preds = %bb32, %bb58
  ret void
}

define internal void @destroy_chpl(%list_BaseArr_chpl* nonnull %arg, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 0
  %tmp6 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp, align 8, !tbaa !194
  %.0.in2 = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp6, null
  br i1 %.0.in2, label %bb11, label %.lr.ph

.lr.ph:                                           ; preds = %.split
  br label %bb7

bb7:                                              ; preds = %.lr.ph, %bb7
  %.013 = phi %chpl_listNode_BaseArr_chpl_object* [ %tmp6, %.lr.ph ], [ %tmp9, %bb7 ]
  %tmp8 = getelementptr inbounds %chpl_listNode_BaseArr_chpl_object, %chpl_listNode_BaseArr_chpl_object* %.013, i64 0, i32 2
  %tmp9 = load %chpl_listNode_BaseArr_chpl_object*, %chpl_listNode_BaseArr_chpl_object** %tmp8, align 8, !tbaa !197
  %tmp10 = bitcast %chpl_listNode_BaseArr_chpl_object* %.013 to i8*
  tail call void @chpl_here_free(i8* %tmp10, i64 %arg4, i32 %arg5)
  %.0.in = icmp eq %chpl_listNode_BaseArr_chpl_object* %tmp9, null
  br i1 %.0.in, label %._crit_edge, label %bb7

._crit_edge:                                      ; preds = %bb7
  br label %bb11

bb11:                                             ; preds = %._crit_edge, %.split
  store %chpl_listNode_BaseArr_chpl_object* null, %chpl_listNode_BaseArr_chpl_object** %tmp, align 8, !tbaa !194
  %tmp12 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 1
  store %chpl_listNode_BaseArr_chpl_object* null, %chpl_listNode_BaseArr_chpl_object** %tmp12, align 8, !tbaa !353
  %tmp13 = getelementptr inbounds %list_BaseArr_chpl, %list_BaseArr_chpl* %arg, i64 0, i32 2
  store i64 0, i64* %tmp13, align 8, !tbaa !354
  ret void
}

define internal void @destroy_chpl2(%list_BaseDom_chpl* nonnull %arg, i64 %arg4, i32 %arg5) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 0
  %tmp6 = load %chpl_listNode_BaseDom_chpl_object*, %chpl_listNode_BaseDom_chpl_object** %tmp, align 8, !tbaa !355
  %.0.in2 = icmp eq %chpl_listNode_BaseDom_chpl_object* %tmp6, null
  br i1 %.0.in2, label %bb11, label %.lr.ph

.lr.ph:                                           ; preds = %.split
  br label %bb7

bb7:                                              ; preds = %.lr.ph, %bb7
  %.013 = phi %chpl_listNode_BaseDom_chpl_object* [ %tmp6, %.lr.ph ], [ %tmp9, %bb7 ]
  %tmp8 = getelementptr inbounds %chpl_listNode_BaseDom_chpl_object, %chpl_listNode_BaseDom_chpl_object* %.013, i64 0, i32 2
  %tmp9 = load %chpl_listNode_BaseDom_chpl_object*, %chpl_listNode_BaseDom_chpl_object** %tmp8, align 8, !tbaa !360
  %tmp10 = bitcast %chpl_listNode_BaseDom_chpl_object* %.013 to i8*
  tail call void @chpl_here_free(i8* %tmp10, i64 %arg4, i32 %arg5)
  %.0.in = icmp eq %chpl_listNode_BaseDom_chpl_object* %tmp9, null
  br i1 %.0.in, label %._crit_edge, label %bb7

._crit_edge:                                      ; preds = %bb7
  br label %bb11

bb11:                                             ; preds = %._crit_edge, %.split
  store %chpl_listNode_BaseDom_chpl_object* null, %chpl_listNode_BaseDom_chpl_object** %tmp, align 8, !tbaa !355
  %tmp12 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 1
  store %chpl_listNode_BaseDom_chpl_object* null, %chpl_listNode_BaseDom_chpl_object** %tmp12, align 8, !tbaa !356
  %tmp13 = getelementptr inbounds %list_BaseDom_chpl, %list_BaseDom_chpl* %arg, i64 0, i32 2
  store i64 0, i64* %tmp13, align 8, !tbaa !357
  ret void
}

define internal void @deinit_chpl5(%list_BaseArr_chpl* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @destroy_chpl(%list_BaseArr_chpl* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @deinit_chpl6(%list_BaseDom_chpl* nonnull %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @destroy_chpl2(%list_BaseDom_chpl* %arg, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__init_RangeChunk(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_RangeChunk_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @267, i64 0, i64 0), i64 10, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_RangeChunk_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_Regexp(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_Regexp_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @271, i64 0, i64 0), i64 6, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_Regexp_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__deinit_Sort() {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @chpl__init_Sort(i64 %arg, i32 %arg1) {
bb:
  %tmp = alloca %DefaultComparator_chpl, align 8
  %tmp2 = alloca %ReverseComparator_DefaultComparator_chpl, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp3 = load i8, i8* @chpl__init_Sort_p, align 1, !tbaa !2
  %tmp4 = icmp eq i8 %tmp3, 0
  br i1 %tmp4, label %bb5, label %bb13

bb5:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @262, i64 0, i64 0), i64 4, i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, 1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_Sort_p, align 1, !tbaa !8
  tail call void @chpl_addModule(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @262, i64 0, i64 0), i8* bitcast (void ()* @chpl__deinit_Sort to i8*), i64 %arg, i32 %arg1)
  tail call void @init_chpl12(%DefaultComparator_chpl* @defaultComparator_chpl)
  call void @init_chpl12(%DefaultComparator_chpl* %tmp)
  call void @init_chpl14(%ReverseComparator_DefaultComparator_chpl* %tmp2, %DefaultComparator_chpl* %tmp)
  %tmp8 = getelementptr inbounds %ReverseComparator_DefaultComparator_chpl, %ReverseComparator_DefaultComparator_chpl* %tmp2, i64 0, i32 0, i32 0
  %tmp9 = load i32, i32* %tmp8, align 8
  store i32 %tmp9, i32* getelementptr inbounds (%ReverseComparator_DefaultComparator_chpl, %ReverseComparator_DefaultComparator_chpl* @reverseComparator_chpl, i64 0, i32 0, i32 0), align 8
  %tmp10 = call {}* @llvm.invariant.start.p0i8(i64 4, i8* bitcast (%ReverseComparator_DefaultComparator_chpl* @reverseComparator_chpl to i8*))
  %tmp11 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp12 = add i32 %tmp11, -1
  store i32 %tmp12, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb13

bb13:                                             ; preds = %.split, %bb5
  ret void
}

define internal void @init_chpl12(%DefaultComparator_chpl* nonnull %arg) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @init_chpl13(%DefaultComparator_chpl* nonnull %arg, %DefaultComparator_chpl* nonnull %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  ret void
}

define internal void @init_chpl14(%ReverseComparator_DefaultComparator_chpl* nonnull %arg, %DefaultComparator_chpl* nonnull %arg1) {
bb:
  %tmp = alloca %DefaultComparator_chpl, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @init_chpl13(%DefaultComparator_chpl* %tmp, %DefaultComparator_chpl* %arg1)
  %tmp2 = getelementptr inbounds %DefaultComparator_chpl, %DefaultComparator_chpl* %tmp, i64 0, i32 0
  %tmp3 = load i32, i32* %tmp2, align 8, !tbaa !110
  %tmp4 = getelementptr inbounds %ReverseComparator_DefaultComparator_chpl, %ReverseComparator_DefaultComparator_chpl* %arg, i64 0, i32 0, i32 0
  store i32 %tmp3, i32* %tmp4, align 4, !tbaa !361
  ret void
}

define internal void @chpl__init_Sys(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_Sys_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @268, i64 0, i64 0), i64 3, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_Sys_p, align 1, !tbaa !8
  tail call void @chpl__init_SysBasic(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_SysBasic(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_SysBasic_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @264, i64 0, i64 0), i64 8, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_SysBasic_p, align 1, !tbaa !8
  tail call void @chpl__init_SysCTypes(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_SysCTypes(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_SysCTypes_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @260, i64 0, i64 0), i64 9, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_SysCTypes_p, align 1, !tbaa !8
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  tail call void @assert_chpl(i8 1, i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @chpl__init_SysError(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_SysError_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb8

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @269, i64 0, i64 0), i64 8, i64 %arg, i32 %arg1)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_SysError_p, align 1, !tbaa !8
  tail call void @chpl__init_SysBasic(i64 %arg, i32 %arg1)
  %tmp6 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp7 = add i32 %tmp6, -1
  store i32 %tmp7, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb8

bb8:                                              ; preds = %.split, %bb3
  ret void
}

define internal %chpl_SystemError_chpl_object* @_new_chpl(%struct.qio_err_s* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 12, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_SystemError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 30, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg1, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 30, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_SystemError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_SystemError(%chpl_SystemError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %arg, i64 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @message_chpl(%chpl_SystemError_chpl_object* %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  %tmp4 = alloca %string, align 8
  %tmp5 = alloca i32, align 4
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp11 = load %string, %string* @_str_literal_428, align 16
  store %string %tmp11, %string* %tmp, align 8
  %tmp12 = bitcast %string* %tmp to i8*
  %tmp13 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp12)
  %tmp14 = load %string, %string* @_str_literal_972, align 16
  store %string %tmp14, %string* %tmp4, align 8
  %tmp15 = bitcast %string* %tmp4 to i8*
  %tmp16 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp15)
  store i32 0, i32* %tmp5, align 4, !tbaa !6
  %tmp17 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %arg, i64 0, i32 1
  %tmp18 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp17, align 8, !tbaa !307
  %tmp19 = call i8* @sys_strerror_syserr_str(%struct.qio_err_s* %tmp18, i32* nonnull %tmp5)
  %tmp20 = call i64 @string_length(i8* %tmp19)
  call void @init36(%string* %tmp6, i8* %tmp19, i64 %tmp20, i8 1, i8 0, i64 %arg2, i32 %arg3)
  %tmp21 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %arg, i64 0, i32 2
  %tmp22 = getelementptr inbounds %string, %string* %tmp21, i64 0, i32 0
  %tmp23 = load i64, i64* %tmp22, align 8, !tbaa !175
  %tmp24 = icmp eq i64 %tmp23, 0
  br i1 %tmp24, label %bb28, label %bb25

bb25:                                             ; preds = %.split
  call void @chpl___PLUS_(%string* %tmp4, %string* %tmp21, %string* %tmp8, i64 %arg2, i32 %arg3)
  %tmp26 = load %string, %string* %tmp8, align 8
  store %string %tmp26, %string* %tmp7, align 8
  call void @chpl___PLUS_(%string* %tmp7, %string* %tmp, %string* %tmp10, i64 %arg2, i32 %arg3)
  %tmp27 = load %string, %string* %tmp10, align 8
  store %string %tmp27, %string* %tmp9, align 8
  call void @chpl___PLUS__ASSIGN_(%string* %tmp6, %string* %tmp9, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp9, i64 %arg2, i32 %arg3)
  call void @deinit23(%string* %tmp7, i64 %arg2, i32 %arg3)
  br label %bb28

bb28:                                             ; preds = %.split, %bb25
  %tmp29 = load %string, %string* %tmp6, align 8
  store %string %tmp29, %string* %arg1, align 8
  ret void
}

define internal %chpl_SystemError_chpl_object* @fromSyserr_chpl(%struct.qio_err_s* %arg, %string* nonnull %arg6, i64 %arg7, i32 %arg8) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp9 = icmp eq i32 %tmp, 11
  br i1 %tmp9, label %bb14, label %bb10

bb10:                                             ; preds = %.split
  %tmp11 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp12 = icmp eq i32 %tmp11, 114
  %tmp13 = zext i1 %tmp12 to i8
  br label %bb14

bb14:                                             ; preds = %bb10, %.split
  %.04 = phi i8 [ %tmp13, %bb10 ], [ 1, %.split ]
  %tmp15 = icmp eq i8 %.04, 0
  br i1 %tmp15, label %bb16, label %bb20

bb16:                                             ; preds = %bb14
  %tmp17 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp18 = icmp eq i32 %tmp17, 11
  %tmp19 = zext i1 %tmp18 to i8
  br label %bb20

bb20:                                             ; preds = %bb16, %bb14
  %.03 = phi i8 [ %tmp19, %bb16 ], [ 1, %bb14 ]
  %tmp21 = icmp eq i8 %.03, 0
  br i1 %tmp21, label %bb22, label %bb26

bb22:                                             ; preds = %bb20
  %tmp23 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp24 = icmp eq i32 %tmp23, 115
  %tmp25 = zext i1 %tmp24 to i8
  br label %bb26

bb26:                                             ; preds = %bb22, %bb20
  %.02 = phi i8 [ %tmp25, %bb22 ], [ 1, %bb20 ]
  %tmp27 = icmp eq i8 %.02, 0
  br i1 %tmp27, label %bb31, label %bb28

bb28:                                             ; preds = %bb26
  %tmp29 = tail call %chpl_BlockingIOError_chpl_object* @_new_chpl2(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp30 = getelementptr inbounds %chpl_BlockingIOError_chpl_object, %chpl_BlockingIOError_chpl_object* %tmp29, i64 0, i32 0
  br label %bb142

bb31:                                             ; preds = %bb26
  %tmp32 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp33 = icmp eq i32 %tmp32, 10
  br i1 %tmp33, label %bb34, label %bb37

bb34:                                             ; preds = %bb31
  %tmp35 = tail call %chpl_ChildProcessError_chpl_object* @_new_chpl3(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp36 = getelementptr inbounds %chpl_ChildProcessError_chpl_object, %chpl_ChildProcessError_chpl_object* %tmp35, i64 0, i32 0
  br label %bb142

bb37:                                             ; preds = %bb31
  %tmp38 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp39 = icmp eq i32 %tmp38, 32
  br i1 %tmp39, label %bb44, label %bb40

bb40:                                             ; preds = %bb37
  %tmp41 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp42 = icmp eq i32 %tmp41, 108
  %tmp43 = zext i1 %tmp42 to i8
  br label %bb44

bb44:                                             ; preds = %bb40, %bb37
  %.01 = phi i8 [ %tmp43, %bb40 ], [ 1, %bb37 ]
  %tmp45 = icmp eq i8 %.01, 0
  br i1 %tmp45, label %bb49, label %bb46

bb46:                                             ; preds = %bb44
  %tmp47 = tail call %chpl_BrokenPipeError_chpl_object* @_new_chpl4(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp48 = getelementptr inbounds %chpl_BrokenPipeError_chpl_object, %chpl_BrokenPipeError_chpl_object* %tmp47, i64 0, i32 0, i32 0
  br label %bb142

bb49:                                             ; preds = %bb44
  %tmp50 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp51 = icmp eq i32 %tmp50, 103
  br i1 %tmp51, label %bb52, label %bb55

bb52:                                             ; preds = %bb49
  %tmp53 = tail call %chpl_ConnectionAbortedError_chpl_object* @_new_chpl5(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp54 = getelementptr inbounds %chpl_ConnectionAbortedError_chpl_object, %chpl_ConnectionAbortedError_chpl_object* %tmp53, i64 0, i32 0, i32 0
  br label %bb142

bb55:                                             ; preds = %bb49
  %tmp56 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp57 = icmp eq i32 %tmp56, 111
  br i1 %tmp57, label %bb58, label %bb61

bb58:                                             ; preds = %bb55
  %tmp59 = tail call %chpl_ConnectionRefusedError_chpl_object* @_new_chpl6(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp60 = getelementptr inbounds %chpl_ConnectionRefusedError_chpl_object, %chpl_ConnectionRefusedError_chpl_object* %tmp59, i64 0, i32 0, i32 0
  br label %bb142

bb61:                                             ; preds = %bb55
  %tmp62 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp63 = icmp eq i32 %tmp62, 104
  br i1 %tmp63, label %bb64, label %bb67

bb64:                                             ; preds = %bb61
  %tmp65 = tail call %chpl_ConnectionResetError_chpl_object* @_new_chpl7(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp66 = getelementptr inbounds %chpl_ConnectionResetError_chpl_object, %chpl_ConnectionResetError_chpl_object* %tmp65, i64 0, i32 0, i32 0
  br label %bb142

bb67:                                             ; preds = %bb61
  %tmp68 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp69 = icmp eq i32 %tmp68, 17
  br i1 %tmp69, label %bb70, label %bb73

bb70:                                             ; preds = %bb67
  %tmp71 = tail call %chpl_FileExistsError_chpl_object* @_new_chpl8(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp72 = getelementptr inbounds %chpl_FileExistsError_chpl_object, %chpl_FileExistsError_chpl_object* %tmp71, i64 0, i32 0
  br label %bb142

bb73:                                             ; preds = %bb67
  %tmp74 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp75 = icmp eq i32 %tmp74, 2
  br i1 %tmp75, label %bb76, label %bb79

bb76:                                             ; preds = %bb73
  %tmp77 = tail call %chpl_FileNotFoundError_chpl_object* @_new_chpl9(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp78 = getelementptr inbounds %chpl_FileNotFoundError_chpl_object, %chpl_FileNotFoundError_chpl_object* %tmp77, i64 0, i32 0
  br label %bb142

bb79:                                             ; preds = %bb73
  %tmp80 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp81 = icmp eq i32 %tmp80, 4
  br i1 %tmp81, label %bb82, label %bb85

bb82:                                             ; preds = %bb79
  %tmp83 = tail call %chpl_InterruptedError_chpl_object* @_new_chpl10(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp84 = getelementptr inbounds %chpl_InterruptedError_chpl_object, %chpl_InterruptedError_chpl_object* %tmp83, i64 0, i32 0
  br label %bb142

bb85:                                             ; preds = %bb79
  %tmp86 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp87 = icmp eq i32 %tmp86, 21
  br i1 %tmp87, label %bb88, label %bb91

bb88:                                             ; preds = %bb85
  %tmp89 = tail call %chpl_IsADirectoryError_chpl_object* @_new_chpl11(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp90 = getelementptr inbounds %chpl_IsADirectoryError_chpl_object, %chpl_IsADirectoryError_chpl_object* %tmp89, i64 0, i32 0
  br label %bb142

bb91:                                             ; preds = %bb85
  %tmp92 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp93 = icmp eq i32 %tmp92, 20
  br i1 %tmp93, label %bb94, label %bb97

bb94:                                             ; preds = %bb91
  %tmp95 = tail call %chpl_NotADirectoryError_chpl_object* @_new_chpl12(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp96 = getelementptr inbounds %chpl_NotADirectoryError_chpl_object, %chpl_NotADirectoryError_chpl_object* %tmp95, i64 0, i32 0
  br label %bb142

bb97:                                             ; preds = %bb91
  %tmp98 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp99 = icmp eq i32 %tmp98, 13
  br i1 %tmp99, label %bb103, label %bb100

bb100:                                            ; preds = %bb97
  %tmp101 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp102 = icmp ne i32 %tmp101, 1
  br label %bb103

bb103:                                            ; preds = %bb100, %bb97
  %.0 = phi i1 [ %tmp102, %bb100 ], [ false, %bb97 ]
  br i1 %.0, label %bb107, label %bb104

bb104:                                            ; preds = %bb103
  %tmp105 = tail call %chpl_PermissionError_chpl_object* @_new_chpl13(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp106 = getelementptr inbounds %chpl_PermissionError_chpl_object, %chpl_PermissionError_chpl_object* %tmp105, i64 0, i32 0
  br label %bb142

bb107:                                            ; preds = %bb103
  %tmp108 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp109 = icmp eq i32 %tmp108, 3
  br i1 %tmp109, label %bb110, label %bb113

bb110:                                            ; preds = %bb107
  %tmp111 = tail call %chpl_ProcessLookupError_chpl_object* @_new_chpl14(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp112 = getelementptr inbounds %chpl_ProcessLookupError_chpl_object, %chpl_ProcessLookupError_chpl_object* %tmp111, i64 0, i32 0
  br label %bb142

bb113:                                            ; preds = %bb107
  %tmp114 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp115 = icmp eq i32 %tmp114, 110
  br i1 %tmp115, label %bb116, label %bb119

bb116:                                            ; preds = %bb113
  %tmp117 = tail call %chpl_TimeoutError_chpl_object* @_new_chpl15(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp118 = getelementptr inbounds %chpl_TimeoutError_chpl_object, %chpl_TimeoutError_chpl_object* %tmp117, i64 0, i32 0
  br label %bb142

bb119:                                            ; preds = %bb113
  %tmp120 = tail call i32 @chpl_macro_int_EEOF()
  %tmp121 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp122 = icmp eq i32 %tmp121, %tmp120
  br i1 %tmp122, label %bb123, label %bb126

bb123:                                            ; preds = %bb119
  %tmp124 = tail call %chpl_EOFError_chpl_object* @_new_chpl16(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp125 = getelementptr inbounds %chpl_EOFError_chpl_object, %chpl_EOFError_chpl_object* %tmp124, i64 0, i32 0, i32 0
  br label %bb142

bb126:                                            ; preds = %bb119
  %tmp127 = tail call i32 @chpl_macro_int_ESHORT()
  %tmp128 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp129 = icmp eq i32 %tmp128, %tmp127
  br i1 %tmp129, label %bb130, label %bb133

bb130:                                            ; preds = %bb126
  %tmp131 = tail call %chpl_UnexpectedEOFError_chpl_object* @_new_chpl17(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp132 = getelementptr inbounds %chpl_UnexpectedEOFError_chpl_object, %chpl_UnexpectedEOFError_chpl_object* %tmp131, i64 0, i32 0, i32 0
  br label %bb142

bb133:                                            ; preds = %bb126
  %tmp134 = tail call i32 @chpl_macro_int_EFORMAT()
  %tmp135 = tail call i32 @qio_err_to_int(%struct.qio_err_s* %arg)
  %tmp136 = icmp eq i32 %tmp135, %tmp134
  br i1 %tmp136, label %bb137, label %bb140

bb137:                                            ; preds = %bb133
  %tmp138 = tail call %chpl_BadFormatError_chpl_object* @_new_chpl18(%string* %arg6, %struct.qio_err_s* %arg, i64 %arg7, i32 %arg8)
  %tmp139 = getelementptr inbounds %chpl_BadFormatError_chpl_object, %chpl_BadFormatError_chpl_object* %tmp138, i64 0, i32 0, i32 0
  br label %bb142

bb140:                                            ; preds = %bb133
  %tmp141 = tail call %chpl_SystemError_chpl_object* @_new_chpl(%struct.qio_err_s* %arg, %string* %arg6, i64 %arg7, i32 %arg8)
  br label %bb142

bb142:                                            ; preds = %bb140, %bb137, %bb130, %bb123, %bb116, %bb110, %bb104, %bb94, %bb88, %bb82, %bb76, %bb70, %bb64, %bb58, %bb52, %bb46, %bb34, %bb28
  %.05 = phi %chpl_SystemError_chpl_object* [ %tmp30, %bb28 ], [ %tmp36, %bb34 ], [ %tmp48, %bb46 ], [ %tmp54, %bb52 ], [ %tmp60, %bb58 ], [ %tmp66, %bb64 ], [ %tmp72, %bb70 ], [ %tmp78, %bb76 ], [ %tmp84, %bb82 ], [ %tmp90, %bb88 ], [ %tmp96, %bb94 ], [ %tmp106, %bb104 ], [ %tmp112, %bb110 ], [ %tmp118, %bb116 ], [ %tmp125, %bb123 ], [ %tmp132, %bb130 ], [ %tmp139, %bb137 ], [ %tmp141, %bb140 ]
  ret %chpl_SystemError_chpl_object* %.05
}

define internal %chpl_SystemError_chpl_object* @fromSyserr_chpl2(i64 %arg, %string* nonnull %arg1, i64 %arg2, i32 %arg3) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = trunc i64 %arg to i32
  %tmp4 = tail call %struct.qio_err_s* @qio_int_to_err(i32 %tmp)
  %tmp5 = tail call %chpl_SystemError_chpl_object* @fromSyserr_chpl(%struct.qio_err_s* %tmp4, %string* %arg1, i64 %arg2, i32 %arg3)
  ret %chpl_SystemError_chpl_object* %tmp5
}

define internal %chpl_BlockingIOError_chpl_object* @_new_chpl2(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 13, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_BlockingIOError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 31, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 31, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_BlockingIOError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_BlockingIOError(%chpl_BlockingIOError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BlockingIOError_chpl_object, %chpl_BlockingIOError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_ChildProcessError_chpl_object* @_new_chpl3(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 14, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_ChildProcessError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 32, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 32, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_ChildProcessError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_ChildProcessError(%chpl_ChildProcessError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ChildProcessError_chpl_object, %chpl_ChildProcessError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_ConnectionError(%chpl_ConnectionError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ConnectionError_chpl_object, %chpl_ConnectionError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_BrokenPipeError_chpl_object* @_new_chpl4(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 16, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_BrokenPipeError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 34, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 34, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_BrokenPipeError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_BrokenPipeError(%chpl_BrokenPipeError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BrokenPipeError_chpl_object, %chpl_BrokenPipeError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_ConnectionAbortedError_chpl_object* @_new_chpl5(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 17, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_ConnectionAbortedError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 35, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 35, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_ConnectionAbortedError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_ConnectionAbortedError(%chpl_ConnectionAbortedError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ConnectionAbortedError_chpl_object, %chpl_ConnectionAbortedError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_ConnectionRefusedError_chpl_object* @_new_chpl6(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 18, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_ConnectionRefusedError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 36, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 36, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_ConnectionRefusedError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_ConnectionRefusedError(%chpl_ConnectionRefusedError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ConnectionRefusedError_chpl_object, %chpl_ConnectionRefusedError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_ConnectionResetError_chpl_object* @_new_chpl7(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 19, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_ConnectionResetError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 37, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 37, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_ConnectionResetError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_ConnectionResetError(%chpl_ConnectionResetError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ConnectionResetError_chpl_object, %chpl_ConnectionResetError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_FileExistsError_chpl_object* @_new_chpl8(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 20, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_FileExistsError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 38, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 38, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_FileExistsError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_FileExistsError(%chpl_FileExistsError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_FileExistsError_chpl_object, %chpl_FileExistsError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_FileNotFoundError_chpl_object* @_new_chpl9(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 21, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_FileNotFoundError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 39, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 39, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_FileNotFoundError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_FileNotFoundError(%chpl_FileNotFoundError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_FileNotFoundError_chpl_object, %chpl_FileNotFoundError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_InterruptedError_chpl_object* @_new_chpl10(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 22, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_InterruptedError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 40, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 40, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_InterruptedError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_InterruptedError(%chpl_InterruptedError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_InterruptedError_chpl_object, %chpl_InterruptedError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_IsADirectoryError_chpl_object* @_new_chpl11(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 23, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_IsADirectoryError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 41, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 41, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_IsADirectoryError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_IsADirectoryError(%chpl_IsADirectoryError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_IsADirectoryError_chpl_object, %chpl_IsADirectoryError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_NotADirectoryError_chpl_object* @_new_chpl12(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 24, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_NotADirectoryError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 42, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 42, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_NotADirectoryError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_NotADirectoryError(%chpl_NotADirectoryError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_NotADirectoryError_chpl_object, %chpl_NotADirectoryError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_PermissionError_chpl_object* @_new_chpl13(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 25, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_PermissionError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 43, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 43, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_PermissionError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_PermissionError(%chpl_PermissionError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_PermissionError_chpl_object, %chpl_PermissionError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_ProcessLookupError_chpl_object* @_new_chpl14(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 26, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_ProcessLookupError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 44, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 44, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_ProcessLookupError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_ProcessLookupError(%chpl_ProcessLookupError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_ProcessLookupError_chpl_object, %chpl_ProcessLookupError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_TimeoutError_chpl_object* @_new_chpl15(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 27, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_TimeoutError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 45, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 45, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_TimeoutError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_TimeoutError(%chpl_TimeoutError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_TimeoutError_chpl_object, %chpl_TimeoutError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @chpl__auto_destroy_IOError(%chpl_IOError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_IOError_chpl_object, %chpl_IOError_chpl_object* %arg, i64 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_EOFError_chpl_object* @_new_chpl16(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 29, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_EOFError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 47, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 47, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_EOFError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_EOFError(%chpl_EOFError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_EOFError_chpl_object, %chpl_EOFError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_UnexpectedEOFError_chpl_object* @_new_chpl17(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 30, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_UnexpectedEOFError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 48, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 48, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_UnexpectedEOFError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_UnexpectedEOFError(%chpl_UnexpectedEOFError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_UnexpectedEOFError_chpl_object, %chpl_UnexpectedEOFError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal %chpl_BadFormatError_chpl_object* @_new_chpl18(%string* nonnull %arg, %struct.qio_err_s* %arg1, i64 %arg2, i32 %arg3) {
bb:
  %tmp = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp4 = tail call i8* @chpl_here_alloc(i64 72, i16 31, i64 %arg2, i32 %arg3)
  %tmp5 = bitcast i8* %tmp4 to %chpl_BadFormatError_chpl_object*
  %tmp6 = bitcast i8* %tmp4 to i32*
  store i32 49, i32* %tmp6, align 4, !tbaa !170
  %tmp7 = bitcast i8* %tmp4 to %chpl_object_object*
  %tmp8 = tail call %chpl_object_object* @_construct_object(%chpl_object_object* %tmp7)
  %tmp9 = bitcast i8* %tmp4 to i32*
  store i32 1, i32* %tmp9, align 4, !tbaa !170
  %tmp10 = getelementptr inbounds i8, i8* %tmp4, i64 8
  %tmp11 = bitcast i8* %tmp10 to %chpl_Error_object**
  store %chpl_Error_object* null, %chpl_Error_object** %tmp11, align 8, !tbaa !198
  %tmp12 = getelementptr inbounds i8, i8* %tmp4, i64 16
  %tmp13 = bitcast i8* %tmp12 to i64*
  store i64 0, i64* %tmp13, align 8, !tbaa !200
  %tmp14 = getelementptr inbounds i8, i8* %tmp4, i64 24
  %tmp15 = bitcast i8* %tmp14 to i32*
  store i32 0, i32* %tmp15, align 4, !tbaa !201
  %tmp16 = bitcast i8* %tmp4 to i32*
  store i32 26, i32* %tmp16, align 4, !tbaa !170
  %tmp17 = getelementptr inbounds i8, i8* %tmp4, i64 32
  %tmp18 = bitcast i8* %tmp17 to %struct.qio_err_s**
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp18, align 8, !tbaa !307
  call void @init35(%string* %tmp, %string* %arg, i8 1, i64 %arg2, i32 %arg3)
  %tmp19 = getelementptr inbounds i8, i8* %tmp4, i64 40
  %tmp20 = bitcast i8* %tmp19 to %string*
  %tmp21 = load %string, %string* %tmp, align 8
  store %string %tmp21, %string* %tmp20, align 8
  store i32 49, i32* %tmp6, align 4, !tbaa !170
  ret %chpl_BadFormatError_chpl_object* %tmp5
}

define internal void @chpl__auto_destroy_BadFormatError(%chpl_BadFormatError_chpl_object* %arg, i64 %arg1, i32 %arg2) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = getelementptr inbounds %chpl_BadFormatError_chpl_object, %chpl_BadFormatError_chpl_object* %arg, i64 0, i32 0, i32 0, i32 2
  tail call void @deinit23(%string* %tmp, i64 %arg1, i32 %arg2)
  ret void
}

define internal void @quote_string_chpl(%string* nonnull %arg, i64 %arg1, %string* nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  %tmp = alloca %string, align 8
  %tmp5 = alloca i8*, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp10 = load %string, %string* @_str_literal_349, align 16
  store %string %tmp10, %string* %tmp, align 8
  store i8* null, i8** %tmp5, align 8, !tbaa !227
  call void @init35(%string* %tmp7, %string* %arg, i8 0, i64 %arg3, i32 %arg4)
  %tmp11 = load %string, %string* %tmp7, align 8
  store %string %tmp11, %string* %tmp6, align 8
  %tmp12 = getelementptr inbounds %string, %string* %tmp6, i64 0, i32 4
  %tmp13 = load i32, i32* %tmp12, align 4, !tbaa !178
  %tmp14 = load i32, i32* @chpl_nodeID, align 4, !tbaa !6
  %tmp15 = icmp eq i32 %tmp13, %tmp14
  br i1 %tmp15, label %bb17, label %bb16

bb16:                                             ; preds = %.split
  call void @halt(%string* %tmp, i64 %arg3, i32 %arg4)
  br label %bb17

bb17:                                             ; preds = %.split, %bb16
  %tmp18 = getelementptr inbounds %string, %string* %tmp6, i64 0, i32 2
  %tmp19 = load i8*, i8** %tmp18, align 8, !tbaa !179
  %tmp20 = call %struct.qio_err_s* @qio_quote_string(i8 34, i8 34, i8 2, i8* %tmp19, i64 %arg1, i8** nonnull %tmp5, %struct.qio_truncate_info_* null)
  %tmp21 = call i32 @qio_err_iserr(%struct.qio_err_s* %tmp20)
  %tmp22 = icmp eq i32 %tmp21, 0
  br i1 %tmp22, label %bb27, label %bb23

bb23:                                             ; preds = %bb17
  %tmp24 = call i8* @qio_strdup(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @270, i64 0, i64 0))
  %tmp25 = call i64 @string_length(i8* %tmp24)
  call void @init36(%string* %tmp8, i8* %tmp24, i64 %tmp25, i8 1, i8 0, i64 %arg3, i32 %arg4)
  %tmp26 = load %string, %string* %tmp8, align 8
  call void @deinit23(%string* %tmp6, i64 %arg3, i32 %arg4)
  br label %bb32

bb27:                                             ; preds = %bb17
  %tmp28 = load i8*, i8** %tmp5, align 8, !tbaa !227
  %tmp29 = call i64 @string_length(i8* %tmp28)
  %tmp30 = load i8*, i8** %tmp5, align 8, !tbaa !227
  call void @init36(%string* %tmp9, i8* %tmp30, i64 %tmp29, i8 1, i8 0, i64 %arg3, i32 %arg4)
  %tmp31 = load %string, %string* %tmp9, align 8
  call void @deinit23(%string* %tmp6, i64 %arg3, i32 %arg4)
  br label %bb32

bb32:                                             ; preds = %bb27, %bb23
  %.0 = phi %string [ %tmp26, %bb23 ], [ %tmp31, %bb27 ]
  store %string %.0, %string* %arg2, align 8
  ret void
}

define internal void @ioerror_chpl(%struct.qio_err_s* %arg, %string* nonnull %arg1, %string* nonnull %arg2, i64 %arg3, %chpl_Error_object** nonnull %arg4, i64 %arg5, i32 %arg6) {
bb:
  %tmp = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  %tmp12 = alloca %string, align 8
  %tmp13 = alloca %string, align 8
  %tmp14 = alloca %string, align 8
  %tmp15 = alloca %string, align 8
  %tmp16 = alloca %string, align 8
  %tmp17 = alloca %string, align 8
  %tmp18 = alloca %string, align 8
  %tmp19 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp20 = load %string, %string* @_str_literal_2726, align 16
  store %string %tmp20, %string* %tmp, align 8
  %tmp21 = bitcast %string* %tmp to i8*
  %tmp22 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp21)
  %tmp23 = load %string, %string* @_str_literal_2724, align 16
  store %string %tmp23, %string* %tmp7, align 8
  %tmp24 = bitcast %string* %tmp7 to i8*
  %tmp25 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp24)
  %tmp26 = tail call i32 @qio_err_iserr(%struct.qio_err_s* %arg)
  %tmp27 = icmp eq i32 %tmp26, 0
  br i1 %tmp27, label %bb42, label %bb28

bb28:                                             ; preds = %.split
  %tmp29 = getelementptr inbounds %string, %string* %arg2, i64 0, i32 0
  %tmp30 = load i64, i64* %tmp29, align 8, !tbaa !175
  call void @quote_string_chpl(%string* %arg2, i64 %tmp30, %string* %tmp9, i64 %arg5, i32 %arg6)
  %tmp31 = load %string, %string* %tmp9, align 8
  store %string %tmp31, %string* %tmp8, align 8
  %tmp32 = bitcast %string* %tmp8 to i8*
  %tmp33 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp32)
  call void @chpl___PLUS_(%string* %arg1, %string* %tmp7, %string* %tmp12, i64 %arg5, i32 %arg6)
  %tmp34 = load %string, %string* %tmp12, align 8
  store %string %tmp34, %string* %tmp11, align 8
  call void @chpl___PLUS_(%string* %tmp11, %string* %tmp8, %string* %tmp14, i64 %arg5, i32 %arg6)
  %tmp35 = load %string, %string* %tmp14, align 8
  store %string %tmp35, %string* %tmp13, align 8
  call void @chpl___PLUS_(%string* %tmp13, %string* %tmp, %string* %tmp16, i64 %arg5, i32 %arg6)
  %tmp36 = load %string, %string* %tmp16, align 8
  store %string %tmp36, %string* %tmp15, align 8
  call void @_cast4(i64 %arg3, %string* %tmp18, i64 %arg5, i32 %arg6)
  %tmp37 = load %string, %string* %tmp18, align 8
  store %string %tmp37, %string* %tmp17, align 8
  call void @chpl___PLUS_(%string* %tmp15, %string* %tmp17, %string* %tmp19, i64 %arg5, i32 %arg6)
  %tmp38 = load %string, %string* %tmp19, align 8
  store %string %tmp38, %string* %tmp10, align 8
  %tmp39 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl(%struct.qio_err_s* %arg, %string* %tmp10, i64 %arg5, i32 %arg6)
  %tmp40 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp39, i64 0, i32 0
  %tmp41 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp40, i64 %arg5, i32 %arg6)
  store %chpl_Error_object* %tmp41, %chpl_Error_object** %arg4, align 8, !tbaa !125
  call void @deinit23(%string* %tmp17, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp15, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp13, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp11, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp10, i64 %arg5, i32 %arg6)
  call void @deinit23(%string* %tmp8, i64 %arg5, i32 %arg6)
  br label %bb42

bb42:                                             ; preds = %.split, %bb28
  ret void
}

define internal void @ioerror_chpl2(%struct.qio_err_s* %arg, %string* nonnull %arg1, %string* nonnull %arg2, %chpl_Error_object** nonnull %arg3, i64 %arg4, i32 %arg5) {
bb:
  %tmp = alloca %string, align 8
  %tmp6 = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %string, align 8
  %tmp9 = alloca %string, align 8
  %tmp10 = alloca %string, align 8
  %tmp11 = alloca %string, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp12 = load %string, %string* @_str_literal_2724, align 16
  store %string %tmp12, %string* %tmp, align 8
  %tmp13 = bitcast %string* %tmp to i8*
  %tmp14 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp13)
  %tmp15 = tail call i32 @qio_err_iserr(%struct.qio_err_s* %arg)
  %tmp16 = icmp eq i32 %tmp15, 0
  br i1 %tmp16, label %bb28, label %bb17

bb17:                                             ; preds = %.split
  %tmp18 = getelementptr inbounds %string, %string* %arg2, i64 0, i32 0
  %tmp19 = load i64, i64* %tmp18, align 8, !tbaa !175
  call void @quote_string_chpl(%string* %arg2, i64 %tmp19, %string* %tmp7, i64 %arg4, i32 %arg5)
  %tmp20 = load %string, %string* %tmp7, align 8
  store %string %tmp20, %string* %tmp6, align 8
  %tmp21 = bitcast %string* %tmp6 to i8*
  %tmp22 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp21)
  call void @chpl___PLUS_(%string* %arg1, %string* %tmp, %string* %tmp10, i64 %arg4, i32 %arg5)
  %tmp23 = load %string, %string* %tmp10, align 8
  store %string %tmp23, %string* %tmp9, align 8
  call void @chpl___PLUS_(%string* %tmp9, %string* %tmp6, %string* %tmp11, i64 %arg4, i32 %arg5)
  %tmp24 = load %string, %string* %tmp11, align 8
  store %string %tmp24, %string* %tmp8, align 8
  %tmp25 = call %chpl_SystemError_chpl_object* @fromSyserr_chpl(%struct.qio_err_s* %arg, %string* %tmp8, i64 %arg4, i32 %arg5)
  %tmp26 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp25, i64 0, i32 0
  %tmp27 = call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp26, i64 %arg4, i32 %arg5)
  store %chpl_Error_object* %tmp27, %chpl_Error_object** %arg3, align 8, !tbaa !125
  call void @deinit23(%string* %tmp9, i64 %arg4, i32 %arg5)
  call void @deinit23(%string* %tmp8, i64 %arg4, i32 %arg5)
  call void @deinit23(%string* %tmp6, i64 %arg4, i32 %arg5)
  br label %bb28

bb28:                                             ; preds = %.split, %bb17
  ret void
}

define internal void @ioerror_chpl3(%struct.qio_err_s* %arg, %string* nonnull %arg1, %chpl_Error_object** nonnull %arg2, i64 %arg3, i32 %arg4) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = tail call i32 @qio_err_iserr(%struct.qio_err_s* %arg)
  %tmp5 = icmp eq i32 %tmp, 0
  br i1 %tmp5, label %bb10, label %bb6

bb6:                                              ; preds = %.split
  %tmp7 = tail call %chpl_SystemError_chpl_object* @fromSyserr_chpl(%struct.qio_err_s* %arg, %string* %arg1, i64 %arg3, i32 %arg4)
  %tmp8 = getelementptr inbounds %chpl_SystemError_chpl_object, %chpl_SystemError_chpl_object* %tmp7, i64 0, i32 0
  %tmp9 = tail call %chpl_Error_object* @chpl_fix_thrown_error(%chpl_Error_object* %tmp8, i64 %arg3, i32 %arg4)
  store %chpl_Error_object* %tmp9, %chpl_Error_object** %arg2, align 8, !tbaa !125
  br label %bb10

bb10:                                             ; preds = %.split, %bb6
  ret void
}

define internal void @chpl__init_matrix_multiplication(i64 %arg, i32 %arg1) {
bb:
  br label %.split

.split:                                           ; preds = %bb
  %tmp = load i8, i8* @chpl__init_matrix_multiplication_p, align 1, !tbaa !2
  %tmp2 = icmp eq i8 %tmp, 0
  br i1 %tmp2, label %bb3, label %bb6

bb3:                                              ; preds = %.split
  tail call void @printModuleInit(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @140, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @257, i64 0, i64 0), i64 21, i64 1, i32 57)
  %tmp4 = load i32, i32* @moduleInitLevel, align 4, !tbaa !6
  %tmp5 = add i32 %tmp4, 1
  store i32 %tmp5, i32* @moduleInitLevel, align 4, !tbaa !6
  store i8 1, i8* @chpl__init_matrix_multiplication_p, align 1, !tbaa !8
  store i32 %tmp4, i32* @moduleInitLevel, align 4, !tbaa !6
  br label %bb6

bb6:                                              ; preds = %.split, %bb3
  ret void
}

define internal void @test_chpl(%ARRTY2* nonnull %arg) {
bb:
  %tmp = alloca %range_int64_t_bounded_F, align 8
  %tmp9 = alloca %range_int64_t_bounded_F, align 8
  %tmp10 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp11 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp12 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp13 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp14 = alloca %_distribution_DefaultDist, align 8
  %tmp15 = alloca %_distribution_DefaultDist, align 8
  br label %.split

.split:                                           ; preds = %bb
  call void @chpl_build_bounded_range(i64 0, i64 4, %range_int64_t_bounded_F* %tmp)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp16 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt2 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp, i64 0, i32 1
  %.unpack3 = load i64, i64* %.elt2, align 8
  %tmp17 = insertvalue %range_int64_t_bounded_F %tmp16, i64 %.unpack3, 1
  call void @chpl_build_bounded_range(i64 0, i64 4, %range_int64_t_bounded_F* %tmp9)
  %.elt4 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp9, i64 0, i32 0
  %.unpack5 = load i64, i64* %.elt4, align 8
  %tmp18 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack5, 0
  %.elt6 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp9, i64 0, i32 1
  %.unpack7 = load i64, i64* %.elt6, align 8
  %tmp19 = insertvalue %range_int64_t_bounded_F %tmp18, i64 %.unpack7, 1
  call void @chpl__ensureDomainExpr2(%range_int64_t_bounded_F %tmp17, %range_int64_t_bounded_F %tmp19, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, i64 2, i32 57)
  %tmp20 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp20, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp10, align 8
  call void @_dom2(%ARRTY2* %arg, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp13)
  %tmp21 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp13, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp21, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp12, align 8
  call void @dist(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp10, %_distribution_DefaultDist* %tmp15)
  %tmp22 = load %_distribution_DefaultDist, %_distribution_DefaultDist* %tmp15, align 8
  store %_distribution_DefaultDist %tmp22, %_distribution_DefaultDist* %tmp14, align 8
  call void @chpl__autoDestroy(%_distribution_DefaultDist* %tmp14, i64 2, i32 57)
  call void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp12, i64 2, i32 57)
  br label %bb23

bb23:                                             ; preds = %.split, %bb35
  %i = phi i64 [ 0, %.split ], [ %i.next, %bb35 ]
  br label %bb24

bb24:                                             ; preds = %bb23, %bb24
  %j = phi i64 [ 0, %bb23 ], [ %j.next, %bb24 ]
  %tmp25 = getelementptr inbounds %ARRTY2, %ARRTY2* %arg, i64 0, i32 1
  %tmp26 = load %ARRTY*, %ARRTY** %tmp25, align 8, !tbaa !76
  %tmp27 = getelementptr inbounds %ARRTY, %ARRTY* %tmp26, i64 0, i32 3, i64 1
  store i64 1, i64* %tmp27, align 8, !tbaa !138
  %tmp28 = getelementptr inbounds %ARRTY, %ARRTY* %tmp26, i64 0, i32 3, i64 0
  %tmp29 = load i64, i64* %tmp28, align 8, !tbaa !138

  ;;; %tmp30 = call i64 @polly_array_index_2(i64 0, i64 %tmp29, i64 1, i64 %i, i64 %j)
  %tmp30 = call i64 @polly_array_index_2(i64 0, i64 5, i64 1, i64 %i, i64 %j)


  %tmp31 = getelementptr inbounds %ARRTY, %ARRTY* %tmp26, i64 0, i32 7
  %tmp32 = load double*, double** %tmp31, align 8, !tbaa !231
  %tmp33 = getelementptr inbounds double, double* %tmp32, i64 %tmp30
  store double 4.000000e+01, double* %tmp33, align 8, !tbaa !111
  %j.next = add nuw nsw i64 %j, 1
  %exitcond = icmp ne i64 %j.next, 5
  br i1 %exitcond, label %bb24, label %bb35

bb35:                                             ; preds = %bb24
  %i.next = add nuw nsw i64 %i, 1
  %exitcond8 = icmp ne i64 %i.next, 5
  br i1 %exitcond8, label %bb23, label %bb37

bb37:                                             ; preds = %bb35
  call void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp10, i64 2, i32 57)
  ret void
}

define i64 @chpl_gen_main(%struct.chpl_main_argument_s* %arg) #0 {
bb:
  %tmp = alloca %chpl_Error_object*, align 8
  br label %.split

.split:                                           ; preds = %bb
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8
  %tmp1 = tail call i8* @chpl_here_alloc(i64 48, i16 46, i64 10, i32 57)
  %tmp2 = bitcast i8* %tmp1 to %chpl_chpl___EndCount_atomic_int64_int64_t_object*
  tail call void @init10(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp2, i64 10, i32 57)
  tail call void @chpl_task_setDynamicEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp2, i64 10, i32 57)
  tail call void @chpl_rt_preUserCodeHook()
  tail call void @chpl__init_matrix_multiplication(i64 10, i32 57)
  tail call void @chpl_user_main()
  tail call void @chpl_rt_postUserCodeHook()
  store %chpl_Error_object* null, %chpl_Error_object** %tmp, align 8, !tbaa !123
  call void @_waitEndCount(%chpl_chpl___EndCount_atomic_int64_int64_t_object* %tmp2, %chpl_Error_object** %tmp, i64 10, i32 57)
  %tmp3 = load %chpl_Error_object*, %chpl_Error_object** %tmp, align 8, !tbaa !125
  %tmp4 = icmp eq %chpl_Error_object* %tmp3, null
  br i1 %tmp4, label %bb6, label %bb5

bb5:                                              ; preds = %.split
  call void @chpl_propagate_error(%chpl_Error_object* nonnull %tmp3, i64 10, i32 57)
  br label %bb6

bb6:                                              ; preds = %.split, %bb5
  call void @chpl_deinitModules(i64 10, i32 57)
  ret i64 0
}

define internal void @chpl_user_main() {
bb:
  %tmp = alloca %string, align 8
  %tmp7 = alloca %string, align 8
  %tmp8 = alloca %ARRTY2, align 8
  %tmp9 = alloca %range_int64_t_bounded_F, align 8
  %tmp10 = alloca %range_int64_t_bounded_F, align 8
  %tmp11 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp12 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp13 = alloca %_domain_DefaultRectangularDom_2_int64_t_F, align 8
  %tmp14 = alloca %ARRTY2, align 8
  br label %.split

.split:                                           ; preds = %bb
  %tmp15 = load %string, %string* @_str_literal_2067, align 16
  store %string %tmp15, %string* %tmp, align 8
  %tmp16 = bitcast %string* %tmp to i8*
  %tmp17 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp16)
  %tmp18 = load %string, %string* @_str_literal_2065, align 16
  store %string %tmp18, %string* %tmp7, align 8
  %tmp19 = bitcast %string* %tmp7 to i8*
  %tmp20 = call {}* @llvm.invariant.start.p0i8(i64 32, i8* %tmp19)
  call void @chpl_build_bounded_range(i64 0, i64 4, %range_int64_t_bounded_F* %tmp9)
  %.elt = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp9, i64 0, i32 0
  %.unpack = load i64, i64* %.elt, align 8
  %tmp21 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack, 0
  %.elt1 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp9, i64 0, i32 1
  %.unpack2 = load i64, i64* %.elt1, align 8
  %tmp22 = insertvalue %range_int64_t_bounded_F %tmp21, i64 %.unpack2, 1
  call void @chpl_build_bounded_range(i64 0, i64 4, %range_int64_t_bounded_F* %tmp10)
  %.elt3 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp10, i64 0, i32 0
  %.unpack4 = load i64, i64* %.elt3, align 8
  %tmp23 = insertvalue %range_int64_t_bounded_F undef, i64 %.unpack4, 0
  %.elt5 = getelementptr inbounds %range_int64_t_bounded_F, %range_int64_t_bounded_F* %tmp10, i64 0, i32 1
  %.unpack6 = load i64, i64* %.elt5, align 8
  %tmp24 = insertvalue %range_int64_t_bounded_F %tmp23, i64 %.unpack6, 1
  call void @chpl__ensureDomainExpr2(%range_int64_t_bounded_F %tmp22, %range_int64_t_bounded_F %tmp24, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp12, i64 11, i32 57)
  %tmp25 = load %_domain_DefaultRectangularDom_2_int64_t_F, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp12, align 8
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp25, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, align 8
  %tmp26 = call %chpl___RuntimeTypeInfo3 @chpl__buildArrayRuntimeType(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp11)
  %tmp27 = extractvalue %chpl___RuntimeTypeInfo3 %tmp26, 0
  store %_domain_DefaultRectangularDom_2_int64_t_F %tmp27, %_domain_DefaultRectangularDom_2_int64_t_F* %tmp13, align 8
  call void @chpl__convertRuntimeTypeToValue3(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp13, %ARRTY2* %tmp14, i64 11, i32 57)
  %tmp28 = load %ARRTY2, %ARRTY2* %tmp14, align 8
  store %ARRTY2 %tmp28, %ARRTY2* %tmp8, align 8
  call void @writeln_chpl2(%string* %tmp7, %ARRTY2* %tmp8, i64 12, i32 57)
  call void @test_chpl(%ARRTY2* %tmp8)
  call void @writeln_chpl2(%string* %tmp, %ARRTY2* %tmp8, i64 15, i32 57)
  call void @chpl__autoDestroy2(%_domain_DefaultRectangularDom_2_int64_t_F* %tmp11, i64 11, i32 57)
  call void @chpl__autoDestroy4(%ARRTY2* %tmp8, i64 11, i32 57)
  ret void
}

define void @CreateConfigVarTable() #0 {
bb:
  br label %.split

.split:                                           ; preds = %bb
  tail call void @initConfigVarTable()
  tail call void @installConfigVar(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @121, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @124, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @125, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @126, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @127, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @125, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @128, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @129, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @130, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @131, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @122, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @132, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @133, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @134, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @133, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @135, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @136, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @137, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @136, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @138, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @136, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  tail call void @installConfigVar(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @139, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @125, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @123, i64 0, i64 0))
  ret void
}

declare void @initConfigVarTable() #0

declare void @installConfigVar(i8*, i8*, i8*) #0

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_rt_buildLocaleID(i32 %arg, i32 %arg1) #3 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 4
  %tmp2 = alloca i32, align 4
  %tmp3 = alloca i32, align 4
  %tmp4 = alloca %struct.chpl_localeID_t, align 4
  store i32 %arg, i32* %tmp2, align 4
  store i32 %arg1, i32* %tmp3, align 4
  %tmp5 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp4, i32 0, i32 0
  %tmp6 = load i32, i32* %tmp2, align 4
  store i32 %tmp6, i32* %tmp5, align 4
  %tmp7 = bitcast %struct.chpl_localeID_t* %tmp to i8*
  %tmp8 = bitcast %struct.chpl_localeID_t* %tmp4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %tmp7, i8* align 4 %tmp8, i64 4, i1 false)
  %tmp9 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i32 0, i32 0
  %tmp10 = load i32, i32* %tmp9, align 4
  ret i32 %tmp10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_destroy_int_least64_t(i64* %arg) #3 {
bb:
  %tmp = alloca i64*, align 8
  store i64* %arg, i64** %tmp, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_destroy_bool(i8* %arg) #3 {
bb:
  %tmp = alloca i8*, align 8
  store i8* %arg, i8** %tmp, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_init_bool(i8* %arg, i1 zeroext %arg1) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp2 = alloca i8, align 1
  store i8* %arg, i8** %tmp, align 8
  %tmp3 = zext i1 %arg1 to i8
  store i8 %tmp3, i8* %tmp2, align 1
  %tmp4 = load i8, i8* %tmp2, align 1
  %tmp5 = trunc i8 %tmp4 to i1
  %tmp6 = load i8*, i8** %tmp, align 8
  %tmp7 = zext i1 %tmp5 to i8
  store i8 %tmp7, i8* %tmp6, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_init_int_least64_t(i64* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp2 = alloca i64, align 8
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  %tmp3 = load i64, i64* %tmp2, align 8
  %tmp4 = load i64*, i64** %tmp, align 8
  store i64 %tmp3, i64* %tmp4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_fetch_add_explicit_int_least64_t(i64* %arg, i64 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp3 = alloca i64, align 8
  %tmp4 = alloca i32, align 4
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp3, align 8
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i64*, i64** %tmp, align 8
  %tmp6 = load i64, i64* %tmp3, align 8
  %tmp7 = atomicrmw add i64* %tmp5, i64 %tmp6 seq_cst
  ret i64 %tmp7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_fetch_sub_explicit_int_least64_t(i64* %arg, i64 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp3 = alloca i64, align 8
  %tmp4 = alloca i32, align 4
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp3, align 8
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i64*, i64** %tmp, align 8
  %tmp6 = load i64, i64* %tmp3, align 8
  %tmp7 = atomicrmw sub i64* %tmp5, i64 %tmp6 seq_cst
  ret i64 %tmp7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_load_explicit_int_least64_t(i64* %arg, i32 %arg1) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp2 = alloca i32, align 4
  store i64* %arg, i64** %tmp, align 8
  store i32 %arg1, i32* %tmp2, align 4
  %tmp3 = load i64*, i64** %tmp, align 8
  %tmp4 = cmpxchg i64* %tmp3, i64 0, i64 0 seq_cst seq_cst
  %tmp5 = extractvalue { i64, i1 } %tmp4, 0
  ret i64 %tmp5
}

declare void @chpl_task_yield() #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_thread_fence(i32 %arg) #3 {
bb:
  %tmp = alloca i32, align 4
  store i32 %arg, i32* %tmp, align 4
  fence seq_cst
  ret void
}

declare i64 @c_string_to_int64_t(i8*, i8*, i32, i32) #0

declare i64 @c_string_to_uint64_t(i8*, i8*, i32, i32) #0

declare zeroext i1 @chpl_config_has_value(i8*, i8*) #0

declare i8* @chpl_config_get_value(i8*, i8*) #0

declare i32 @printf(i8*, ...) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @chpl_memhook_md_num() #3 {
bb:
  ret i16 43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_gen_comm_get(i8* %arg, i32 %arg1, i8* %arg2, i64 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp8 = alloca i32, align 4
  %tmp9 = alloca i8*, align 8
  %tmp10 = alloca i64, align 8
  %tmp11 = alloca i32, align 4
  %tmp12 = alloca i32, align 4
  %tmp13 = alloca i32, align 4
  %tmp14 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i32 %arg1, i32* %tmp8, align 4
  store i8* %arg2, i8** %tmp9, align 8
  store i64 %arg3, i64* %tmp10, align 8
  store i32 %arg4, i32* %tmp11, align 4
  store i32 %arg5, i32* %tmp12, align 4
  store i32 %arg6, i32* %tmp13, align 4
  store i32 %arg7, i32* %tmp14, align 4
  %tmp15 = load i32, i32* @chpl_nodeID, align 4
  %tmp16 = load i32, i32* %tmp8, align 4
  %tmp17 = icmp eq i32 %tmp15, %tmp16
  br i1 %tmp17, label %bb18, label %bb23

bb18:                                             ; preds = %bb
  %tmp19 = load i8*, i8** %tmp, align 8
  %tmp20 = load i8*, i8** %tmp9, align 8
  %tmp21 = load i64, i64* %tmp10, align 8
  %tmp22 = call i8* @chpl_memcpy(i8* %tmp19, i8* %tmp20, i64 %tmp21)
  br label %bb32

bb23:                                             ; preds = %bb
  %tmp24 = load i8*, i8** %tmp, align 8
  %tmp25 = load i32, i32* %tmp8, align 4
  %tmp26 = load i8*, i8** %tmp9, align 8
  %tmp27 = load i64, i64* %tmp10, align 8
  %tmp28 = load i32, i32* %tmp11, align 4
  %tmp29 = load i32, i32* %tmp12, align 4
  %tmp30 = load i32, i32* %tmp13, align 4
  %tmp31 = load i32, i32* %tmp14, align 4
  call void @chpl_comm_get(i8* %tmp24, i32 %tmp25, i8* %tmp26, i64 %tmp27, i32 %tmp28, i32 %tmp29, i32 %tmp30, i32 %tmp31)
  br label %bb32

bb32:                                             ; preds = %bb23, %bb18
  ret void
}

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i8* @memmove(i8*, i8*, i64) #4

declare void @chpl_error(i8*, i32, i32) #0

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @string_length(i8* %arg) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp1 = alloca i8*, align 8
  store i8* %arg, i8** %tmp1, align 8
  %tmp2 = load i8*, i8** %tmp1, align 8
  %tmp3 = icmp eq i8* %tmp2, null
  br i1 %tmp3, label %bb4, label %bb5

bb4:                                              ; preds = %bb
  store i64 0, i64* %tmp, align 8
  br label %bb8

bb5:                                              ; preds = %bb
  %tmp6 = load i8*, i8** %tmp1, align 8
  %tmp7 = call i64 @strlen(i8* %tmp6) #11
  store i64 %tmp7, i64* %tmp, align 8
  br label %bb8

bb8:                                              ; preds = %bb5, %bb4
  %tmp9 = load i64, i64* %tmp, align 8
  ret i64 %tmp9
}

declare i8* @string_copy(i8*, i32, i32) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_rmem_consist_fence(i32 %arg, i32 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i32, align 4
  %tmp3 = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  %tmp5 = alloca i32, align 4
  %tmp6 = alloca i32, align 4
  store i32 %arg, i32* %tmp, align 4
  store i32 %arg1, i32* %tmp3, align 4
  store i32 %arg2, i32* %tmp4, align 4
  %tmp7 = load i32, i32* %tmp, align 4
  %tmp8 = icmp eq i32 %tmp7, 0
  br i1 %tmp8, label %bb9, label %bb10

bb9:                                              ; preds = %bb
  br label %bb33

bb10:                                             ; preds = %bb
  store i32 1, i32* %tmp5, align 4
  store i32 1, i32* %tmp6, align 4
  %tmp11 = load i32, i32* %tmp, align 4
  %tmp12 = icmp eq i32 %tmp11, 2
  br i1 %tmp12, label %bb13, label %bb14

bb13:                                             ; preds = %bb10
  store i32 0, i32* %tmp6, align 4
  br label %bb19

bb14:                                             ; preds = %bb10
  %tmp15 = load i32, i32* %tmp, align 4
  %tmp16 = icmp eq i32 %tmp15, 3
  br i1 %tmp16, label %bb17, label %bb18

bb17:                                             ; preds = %bb14
  store i32 0, i32* %tmp5, align 4
  br label %bb18

bb18:                                             ; preds = %bb17, %bb14
  br label %bb19

bb19:                                             ; preds = %bb18, %bb13
  %tmp20 = load i32, i32* %tmp6, align 4
  %tmp21 = icmp ne i32 %tmp20, 0
  br i1 %tmp21, label %bb22, label %bb25

bb22:                                             ; preds = %bb19
  %tmp23 = load i32, i32* %tmp3, align 4
  %tmp24 = load i32, i32* %tmp4, align 4
  call void @chpl_rmem_consist_release(i32 %tmp23, i32 %tmp24)
  br label %bb25

bb25:                                             ; preds = %bb22, %bb19
  %tmp26 = load i32, i32* %tmp5, align 4
  %tmp27 = icmp ne i32 %tmp26, 0
  br i1 %tmp27, label %bb28, label %bb31

bb28:                                             ; preds = %bb25
  %tmp29 = load i32, i32* %tmp3, align 4
  %tmp30 = load i32, i32* %tmp4, align 4
  call void @chpl_rmem_consist_acquire(i32 %tmp29, i32 %tmp30)
  br label %bb31

bb31:                                             ; preds = %bb28, %bb25
  %tmp32 = load i32, i32* %tmp, align 4
  call void @atomic_thread_fence(i32 %tmp32)
  br label %bb33

bb33:                                             ; preds = %bb31, %bb9
  ret void
}

declare i32 @chpl_task_getenvNumThreadsPerLocale() #0

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.chpl_task_ChapelData_t* @chpl_task_getBundleChapelData(%struct.chpl_task_bundle_t* %arg) #3 {
bb:
  %tmp = alloca %struct.chpl_task_bundle_t*, align 8
  store %struct.chpl_task_bundle_t* %arg, %struct.chpl_task_bundle_t** %tmp, align 8
  %tmp1 = load %struct.chpl_task_bundle_t*, %struct.chpl_task_bundle_t** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.chpl_task_bundle_t, %struct.chpl_task_bundle_t* %tmp1, i32 0, i32 7
  ret %struct.chpl_task_ChapelData_t* %tmp2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_rt_nodeFromLocaleID(i32 %arg) #3 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 4
  %tmp1 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i32 0, i32 0
  store i32 %arg, i32* %tmp1, align 4
  %tmp2 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i32 0, i32 0
  %tmp3 = load i32, i32* %tmp2, align 4
  ret i32 %tmp3
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @atomic_exchange_explicit_bool(i8* %arg, i1 zeroext %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp3 = alloca i8, align 1
  %tmp4 = alloca i32, align 4
  %tmp5 = alloca i8, align 1
  %tmp6 = alloca i8, align 1
  store i8* %arg, i8** %tmp, align 8
  %tmp7 = zext i1 %arg1 to i8
  store i8 %tmp7, i8* %tmp3, align 1
  store i32 %arg2, i32* %tmp4, align 4
  %tmp8 = load i8*, i8** %tmp, align 8
  %tmp9 = load i8, i8* %tmp8, align 1
  %tmp10 = trunc i8 %tmp9 to i1
  %tmp11 = zext i1 %tmp10 to i8
  store i8 %tmp11, i8* %tmp5, align 1
  br label %bb12

bb12:                                             ; preds = %bb27, %bb
  %tmp13 = load i8, i8* %tmp5, align 1
  %tmp14 = trunc i8 %tmp13 to i1
  %tmp15 = zext i1 %tmp14 to i8
  store i8 %tmp15, i8* %tmp6, align 1
  %tmp16 = load i8*, i8** %tmp, align 8
  %tmp17 = load i8, i8* %tmp6, align 1
  %tmp18 = trunc i8 %tmp17 to i1
  %tmp19 = zext i1 %tmp18 to i8
  %tmp20 = load i8, i8* %tmp3, align 1
  %tmp21 = trunc i8 %tmp20 to i1
  %tmp22 = zext i1 %tmp21 to i8
  %tmp23 = cmpxchg i8* %tmp16, i8 %tmp19, i8 %tmp22 seq_cst seq_cst
  %tmp24 = extractvalue { i8, i1 } %tmp23, 0
  %tmp25 = trunc i8 %tmp24 to i1
  %tmp26 = zext i1 %tmp25 to i8
  store i8 %tmp26, i8* %tmp5, align 1
  br label %bb27

bb27:                                             ; preds = %bb12
  %tmp28 = load i8, i8* %tmp5, align 1
  %tmp29 = trunc i8 %tmp28 to i1
  %tmp30 = zext i1 %tmp29 to i32
  %tmp31 = load i8, i8* %tmp6, align 1
  %tmp32 = trunc i8 %tmp31 to i1
  %tmp33 = zext i1 %tmp32 to i32
  %tmp34 = icmp ne i32 %tmp30, %tmp33
  br i1 %tmp34, label %bb12, label %bb35

bb35:                                             ; preds = %bb27
  %tmp36 = load i8, i8* %tmp5, align 1
  %tmp37 = trunc i8 %tmp36 to i1
  ret i1 %tmp37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @atomic_load_explicit_bool(i8* %arg, i32 %arg1) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp2 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i32 %arg1, i32* %tmp2, align 4
  %tmp3 = load i8*, i8** %tmp, align 8
  %tmp4 = cmpxchg i8* %tmp3, i8 0, i8 0 seq_cst seq_cst
  %tmp5 = extractvalue { i8, i1 } %tmp4, 0
  %tmp6 = trunc i8 %tmp5 to i1
  ret i1 %tmp6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_store_explicit_int_least64_t(i64* %arg, i64 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp3 = alloca i64, align 8
  %tmp4 = alloca i32, align 4
  %tmp5 = alloca i64, align 8
  %tmp6 = alloca i64, align 8
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp3, align 8
  store i32 %arg2, i32* %tmp4, align 4
  %tmp7 = load i64*, i64** %tmp, align 8
  %tmp8 = load i64, i64* %tmp7, align 8
  store i64 %tmp8, i64* %tmp5, align 8
  br label %bb9

bb9:                                              ; preds = %bb16, %bb
  %tmp10 = load i64, i64* %tmp5, align 8
  store i64 %tmp10, i64* %tmp6, align 8
  %tmp11 = load i64*, i64** %tmp, align 8
  %tmp12 = load i64, i64* %tmp6, align 8
  %tmp13 = load i64, i64* %tmp3, align 8
  %tmp14 = cmpxchg i64* %tmp11, i64 %tmp12, i64 %tmp13 seq_cst seq_cst
  %tmp15 = extractvalue { i64, i1 } %tmp14, 0
  store i64 %tmp15, i64* %tmp5, align 8
  br label %bb16

bb16:                                             ; preds = %bb9
  %tmp17 = load i64, i64* %tmp5, align 8
  %tmp18 = load i64, i64* %tmp6, align 8
  %tmp19 = icmp ne i64 %tmp17, %tmp18
  br i1 %tmp19, label %bb9, label %bb20

bb20:                                             ; preds = %bb16
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_mem_array_free(i8* %arg, i64 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp5 = alloca i64, align 8
  %tmp6 = alloca i64, align 8
  %tmp7 = alloca i32, align 4
  %tmp8 = alloca i32, align 4
  %tmp9 = alloca i64, align 8
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp5, align 8
  store i64 %arg2, i64* %tmp6, align 8
  store i32 %arg3, i32* %tmp7, align 4
  store i32 %arg4, i32* %tmp8, align 4
  %tmp10 = load i8*, i8** %tmp, align 8
  %tmp11 = load i32, i32* %tmp7, align 4
  %tmp12 = load i32, i32* %tmp8, align 4
  call void @chpl_memhook_free_pre(i8* %tmp10, i32 %tmp11, i32 %tmp12)
  %tmp13 = load i64, i64* %tmp5, align 8
  %tmp14 = load i64, i64* %tmp6, align 8
  %tmp15 = mul i64 %tmp13, %tmp14
  store i64 %tmp15, i64* %tmp9, align 8
  %tmp16 = load i64, i64* %tmp9, align 8
  %tmp17 = call zeroext i1 @chpl_mem_size_justifies_comm_alloc(i64 %tmp16)
  br i1 %tmp17, label %bb18, label %bb23

bb18:                                             ; preds = %bb
  %tmp19 = load i8*, i8** %tmp, align 8
  %tmp20 = load i64, i64* %tmp9, align 8
  %tmp21 = call zeroext i1 @chpl_comm_regMemFree(i8* %tmp19, i64 %tmp20)
  br i1 %tmp21, label %bb22, label %bb23

bb22:                                             ; preds = %bb18
  br label %bb25

bb23:                                             ; preds = %bb18, %bb
  %tmp24 = load i8*, i8** %tmp, align 8
  call void @chpl_free(i8* %tmp24)
  br label %bb25

bb25:                                             ; preds = %bb23, %bb22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @c_pointer_return(i8* %arg) #3 {
bb:
  %tmp = alloca i8*, align 8
  store i8* %arg, i8** %tmp, align 8
  %tmp1 = load i8*, i8** %tmp, align 8
  ret i8* %tmp1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_mem_array_alloc(i64 %arg, i64 %arg1, i32 %arg2, i8* %arg3, i8* %arg4, i32 %arg5, i32 %arg6) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp7 = alloca i64, align 8
  %tmp8 = alloca i32, align 4
  %tmp9 = alloca i8*, align 8
  %tmp10 = alloca i8*, align 8
  %tmp11 = alloca i32, align 4
  %tmp12 = alloca i32, align 4
  %tmp13 = alloca i64, align 8
  %tmp14 = alloca i8*, align 8
  store i64 %arg, i64* %tmp, align 8
  store i64 %arg1, i64* %tmp7, align 8
  store i32 %arg2, i32* %tmp8, align 4
  store i8* %arg3, i8** %tmp9, align 8
  store i8* %arg4, i8** %tmp10, align 8
  store i32 %arg5, i32* %tmp11, align 4
  store i32 %arg6, i32* %tmp12, align 4
  %tmp15 = load i64, i64* %tmp, align 8
  %tmp16 = load i64, i64* %tmp7, align 8
  %tmp17 = mul i64 %tmp15, %tmp16
  store i64 %tmp17, i64* %tmp13, align 8
  %tmp18 = load i8*, i8** %tmp10, align 8
  %tmp19 = icmp eq i8* %tmp18, null
  br i1 %tmp19, label %bb20, label %bb52

bb20:                                             ; preds = %bb
  %tmp21 = load i64, i64* %tmp, align 8
  %tmp22 = load i64, i64* %tmp7, align 8
  %tmp23 = load i32, i32* %tmp11, align 4
  %tmp24 = load i32, i32* %tmp12, align 4
  call void @chpl_memhook_malloc_pre(i64 %tmp21, i64 %tmp22, i16 signext 2, i32 %tmp23, i32 %tmp24)
  store i8* null, i8** %tmp14, align 8
  %tmp25 = load i8*, i8** %tmp9, align 8
  store i8 0, i8* %tmp25, align 1
  %tmp26 = load i64, i64* %tmp13, align 8
  %tmp27 = call zeroext i1 @chpl_mem_size_justifies_comm_alloc(i64 %tmp26)
  br i1 %tmp27, label %bb28, label %bb38

bb28:                                             ; preds = %bb20
  %tmp29 = load i64, i64* %tmp13, align 8
  %tmp30 = load i32, i32* %tmp11, align 4
  %tmp31 = load i32, i32* %tmp12, align 4
  %tmp32 = call i8* @chpl_comm_regMemAlloc(i64 %tmp29, i16 signext 2, i32 %tmp30, i32 %tmp31)
  store i8* %tmp32, i8** %tmp14, align 8
  %tmp33 = load i8*, i8** %tmp14, align 8
  %tmp34 = icmp ne i8* %tmp33, null
  br i1 %tmp34, label %bb35, label %bb37

bb35:                                             ; preds = %bb28
  %tmp36 = load i8*, i8** %tmp9, align 8
  store i8 1, i8* %tmp36, align 1
  br label %bb37

bb37:                                             ; preds = %bb35, %bb28
  br label %bb38

bb38:                                             ; preds = %bb37, %bb20
  %tmp39 = load i8*, i8** %tmp14, align 8
  %tmp40 = icmp eq i8* %tmp39, null
  br i1 %tmp40, label %bb41, label %bb46

bb41:                                             ; preds = %bb38
  %tmp42 = load i64, i64* %tmp, align 8
  %tmp43 = load i64, i64* %tmp7, align 8
  %tmp44 = mul i64 %tmp42, %tmp43
  %tmp45 = call i8* @chpl_malloc(i64 %tmp44)
  store i8* %tmp45, i8** %tmp14, align 8
  br label %bb46

bb46:                                             ; preds = %bb41, %bb38
  %tmp47 = load i8*, i8** %tmp14, align 8
  %tmp48 = load i64, i64* %tmp, align 8
  %tmp49 = load i64, i64* %tmp7, align 8
  %tmp50 = load i32, i32* %tmp11, align 4
  %tmp51 = load i32, i32* %tmp12, align 4
  call void @chpl_memhook_malloc_post(i8* %tmp47, i64 %tmp48, i64 %tmp49, i16 signext 2, i32 %tmp50, i32 %tmp51)
  br label %bb56

bb52:                                             ; preds = %bb
  %tmp53 = load i8*, i8** %tmp10, align 8
  store i8* %tmp53, i8** %tmp14, align 8
  %tmp54 = load i8*, i8** %tmp14, align 8
  %tmp55 = load i64, i64* %tmp13, align 8
  call void @chpl_comm_regMemPostAlloc(i8* %tmp54, i64 %tmp55)
  br label %bb56

bb56:                                             ; preds = %bb52, %bb46
  %tmp57 = load i8*, i8** %tmp14, align 8
  ret i8* %tmp57
}

declare %struct.qio_err_s* @qio_int_to_err(i32) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_init_uint_least64_t(i64* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp2 = alloca i64, align 8
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  %tmp3 = load i64, i64* %tmp2, align 8
  %tmp4 = load i64*, i64** %tmp, align 8
  store i64 %tmp3, i64* %tmp4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @atomic_store_explicit_bool(i8* %arg, i1 zeroext %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp3 = alloca i8, align 1
  %tmp4 = alloca i32, align 4
  %tmp5 = alloca i8, align 1
  %tmp6 = alloca i8, align 1
  store i8* %arg, i8** %tmp, align 8
  %tmp7 = zext i1 %arg1 to i8
  store i8 %tmp7, i8* %tmp3, align 1
  store i32 %arg2, i32* %tmp4, align 4
  %tmp8 = load i8*, i8** %tmp, align 8
  %tmp9 = load i8, i8* %tmp8, align 1
  %tmp10 = trunc i8 %tmp9 to i1
  %tmp11 = zext i1 %tmp10 to i8
  store i8 %tmp11, i8* %tmp5, align 1
  br label %bb12

bb12:                                             ; preds = %bb27, %bb
  %tmp13 = load i8, i8* %tmp5, align 1
  %tmp14 = trunc i8 %tmp13 to i1
  %tmp15 = zext i1 %tmp14 to i8
  store i8 %tmp15, i8* %tmp6, align 1
  %tmp16 = load i8*, i8** %tmp, align 8
  %tmp17 = load i8, i8* %tmp6, align 1
  %tmp18 = trunc i8 %tmp17 to i1
  %tmp19 = zext i1 %tmp18 to i8
  %tmp20 = load i8, i8* %tmp3, align 1
  %tmp21 = trunc i8 %tmp20 to i1
  %tmp22 = zext i1 %tmp21 to i8
  %tmp23 = cmpxchg i8* %tmp16, i8 %tmp19, i8 %tmp22 seq_cst seq_cst
  %tmp24 = extractvalue { i8, i1 } %tmp23, 0
  %tmp25 = trunc i8 %tmp24 to i1
  %tmp26 = zext i1 %tmp25 to i8
  store i8 %tmp26, i8* %tmp5, align 1
  br label %bb27

bb27:                                             ; preds = %bb12
  %tmp28 = load i8, i8* %tmp5, align 1
  %tmp29 = trunc i8 %tmp28 to i1
  %tmp30 = zext i1 %tmp29 to i32
  %tmp31 = load i8, i8* %tmp6, align 1
  %tmp32 = trunc i8 %tmp31 to i1
  %tmp33 = zext i1 %tmp32 to i32
  %tmp34 = icmp ne i32 %tmp30, %tmp33
  br i1 %tmp34, label %bb12, label %bb35

bb35:                                             ; preds = %bb27
  ret void
}

declare void @chpl_execute_module_deinit(i8*) #0

declare i8* @chpl_lookupFilename(i32) #0

declare void @chpl_error_preformatted(i8*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_gen_getLocaleID() #3 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 4
  %tmp1 = alloca %struct.chpl_localeID_t, align 4
  call void @chpl_getLocaleID(%struct.chpl_localeID_t* %tmp1, i64 0, i32 0)
  %tmp2 = bitcast %struct.chpl_localeID_t* %tmp to i8*
  %tmp3 = bitcast %struct.chpl_localeID_t* %tmp1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %tmp2, i8* align 4 %tmp3, i64 4, i1 false)
  %tmp4 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i32 0, i32 0
  %tmp5 = load i32, i32* %tmp4, align 4
  ret i32 %tmp5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.chpl_task_ChapelData_t* @chpl_task_getChapelData() #3 {
bb:
  %tmp = alloca %struct.chpl_task_bundle_t*, align 8
  %tmp1 = call %struct.chpl_task_bundle_t* @chpl_task_getPrvBundle()
  store %struct.chpl_task_bundle_t* %tmp1, %struct.chpl_task_bundle_t** %tmp, align 8
  %tmp2 = load %struct.chpl_task_bundle_t*, %struct.chpl_task_bundle_t** %tmp, align 8
  %tmp3 = call %struct.chpl_task_ChapelData_t* @chpl_task_getBundleChapelData(%struct.chpl_task_bundle_t* %tmp2)
  ret %struct.chpl_task_ChapelData_t* %tmp3
}

declare i8* @integral_to_c_string(i64, i32, i1 zeroext, i8*) #0

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_ftable_call(i16 signext %arg, i8* %arg1) #3 {
bb:
  %tmp = alloca i16, align 2
  %tmp2 = alloca i8*, align 8
  store i16 %arg, i16* %tmp, align 2
  store i8* %arg1, i8** %tmp2, align 8
  %tmp3 = load i16, i16* %tmp, align 2
  %tmp4 = sext i16 %tmp3 to i64
  %tmp5 = getelementptr inbounds [0 x void (i8*)*], [0 x void (i8*)*]* bitcast ([11 x void (i8*)*]* @chpl_ftable to [0 x void (i8*)*]*), i64 0, i64 %tmp4
  %tmp6 = load void (i8*)*, void (i8*)** %tmp5, align 8
  %tmp7 = load i8*, i8** %tmp2, align 8
  call void %tmp6(i8* %tmp7)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.chpl_task_bundle_t* @chpl_comm_on_bundle_task_bundle(%struct.chpl_comm_on_bundle_t* %arg) #3 {
bb:
  %tmp = alloca %struct.chpl_comm_on_bundle_t*, align 8
  store %struct.chpl_comm_on_bundle_t* %arg, %struct.chpl_comm_on_bundle_t** %tmp, align 8
  %tmp1 = load %struct.chpl_comm_on_bundle_t*, %struct.chpl_comm_on_bundle_t** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.chpl_comm_on_bundle_t, %struct.chpl_comm_on_bundle_t* %tmp1, i32 0, i32 0
  ret %struct.chpl_task_bundle_t* %tmp2
}

declare void @chpl_comm_execute_on(i32, i32, i16 signext, %struct.chpl_comm_on_bundle_t*, i64) #0

declare void @chpl_comm_execute_on_fast(i32, i32, i16 signext, %struct.chpl_comm_on_bundle_t*, i64) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_comm_taskCallFTable(i16 signext %arg, %struct.chpl_comm_on_bundle_t* %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) #3 {
bb:
  %tmp = alloca i16, align 2
  %tmp6 = alloca %struct.chpl_comm_on_bundle_t*, align 8
  %tmp7 = alloca i64, align 8
  %tmp8 = alloca i32, align 4
  %tmp9 = alloca i32, align 4
  %tmp10 = alloca i32, align 4
  store i16 %arg, i16* %tmp, align 2
  store %struct.chpl_comm_on_bundle_t* %arg1, %struct.chpl_comm_on_bundle_t** %tmp6, align 8
  store i64 %arg2, i64* %tmp7, align 8
  store i32 %arg3, i32* %tmp8, align 4
  store i32 %arg4, i32* %tmp9, align 4
  store i32 %arg5, i32* %tmp10, align 4
  %tmp11 = load i16, i16* %tmp, align 2
  %tmp12 = load %struct.chpl_comm_on_bundle_t*, %struct.chpl_comm_on_bundle_t** %tmp6, align 8
  %tmp13 = call %struct.chpl_task_bundle_t* @chpl_comm_on_bundle_task_bundle(%struct.chpl_comm_on_bundle_t* %tmp12)
  %tmp14 = load i64, i64* %tmp7, align 8
  %tmp15 = load i32, i32* %tmp8, align 4
  %tmp16 = load i32, i32* %tmp9, align 4
  %tmp17 = load i32, i32* %tmp10, align 4
  call void @chpl_task_taskCallFTable(i16 signext %tmp11, %struct.chpl_task_bundle_t* %tmp13, i64 %tmp14, i32 %tmp15, i32 %tmp16, i32 %tmp17)
  ret void
}

declare void @chpl_comm_execute_on_nb(i32, i32, i16 signext, %struct.chpl_comm_on_bundle_t*, i64) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_mem_alloc(i64 %arg, i16 signext %arg1, i32 %arg2, i32 %arg3) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp4 = alloca i16, align 2
  %tmp5 = alloca i32, align 4
  %tmp6 = alloca i32, align 4
  store i64 %arg, i64* %tmp, align 8
  store i16 %arg1, i16* %tmp4, align 2
  store i32 %arg2, i32* %tmp5, align 4
  store i32 %arg3, i32* %tmp6, align 4
  %tmp7 = load i64, i64* %tmp, align 8
  %tmp8 = load i16, i16* %tmp4, align 2
  %tmp9 = load i32, i32* %tmp5, align 4
  %tmp10 = load i32, i32* %tmp6, align 4
  %tmp11 = call i8* @chpl_mem_allocMany(i64 1, i64 %tmp7, i16 signext %tmp8, i32 %tmp9, i32 %tmp10)
  ret i8* %tmp11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_mem_realloc(i8* %arg, i64 %arg1, i16 signext %arg2, i32 %arg3, i32 %arg4) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp5 = alloca i8*, align 8
  %tmp6 = alloca i64, align 8
  %tmp7 = alloca i16, align 2
  %tmp8 = alloca i32, align 4
  %tmp9 = alloca i32, align 4
  %tmp10 = alloca i8*, align 8
  store i8* %arg, i8** %tmp5, align 8
  store i64 %arg1, i64* %tmp6, align 8
  store i16 %arg2, i16* %tmp7, align 2
  store i32 %arg3, i32* %tmp8, align 4
  store i32 %arg4, i32* %tmp9, align 4
  %tmp11 = load i8*, i8** %tmp5, align 8
  %tmp12 = load i64, i64* %tmp6, align 8
  %tmp13 = load i16, i16* %tmp7, align 2
  %tmp14 = load i32, i32* %tmp8, align 4
  %tmp15 = load i32, i32* %tmp9, align 4
  call void @chpl_memhook_realloc_pre(i8* %tmp11, i64 %tmp12, i16 signext %tmp13, i32 %tmp14, i32 %tmp15)
  %tmp16 = load i64, i64* %tmp6, align 8
  %tmp17 = icmp eq i64 %tmp16, 0
  br i1 %tmp17, label %bb18, label %bb23

bb18:                                             ; preds = %bb
  %tmp19 = load i8*, i8** %tmp5, align 8
  %tmp20 = load i32, i32* %tmp8, align 4
  %tmp21 = load i32, i32* %tmp9, align 4
  call void @chpl_memhook_free_pre(i8* %tmp19, i32 %tmp20, i32 %tmp21)
  %tmp22 = load i8*, i8** %tmp5, align 8
  call void @chpl_free(i8* %tmp22)
  store i8* null, i8** %tmp, align 8
  br label %bb34

bb23:                                             ; preds = %bb
  %tmp24 = load i8*, i8** %tmp5, align 8
  %tmp25 = load i64, i64* %tmp6, align 8
  %tmp26 = call i8* @chpl_realloc(i8* %tmp24, i64 %tmp25)
  store i8* %tmp26, i8** %tmp10, align 8
  %tmp27 = load i8*, i8** %tmp10, align 8
  %tmp28 = load i8*, i8** %tmp5, align 8
  %tmp29 = load i64, i64* %tmp6, align 8
  %tmp30 = load i16, i16* %tmp7, align 2
  %tmp31 = load i32, i32* %tmp8, align 4
  %tmp32 = load i32, i32* %tmp9, align 4
  call void @chpl_memhook_realloc_post(i8* %tmp27, i8* %tmp28, i64 %tmp29, i16 signext %tmp30, i32 %tmp31, i32 %tmp32)
  %tmp33 = load i8*, i8** %tmp10, align 8
  store i8* %tmp33, i8** %tmp, align 8
  br label %bb34

bb34:                                             ; preds = %bb23, %bb18
  %tmp35 = load i8*, i8** %tmp, align 8
  ret i8* %tmp35
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @chpl_mem_good_alloc_size(i64 %arg, i32 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp3 = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  store i64 %arg, i64* %tmp, align 8
  store i32 %arg1, i32* %tmp3, align 4
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i64, i64* %tmp, align 8
  %tmp6 = call i64 @chpl_good_alloc_size(i64 %tmp5)
  ret i64 %tmp6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_mem_free(i8* %arg, i32 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp3 = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i32 %arg1, i32* %tmp3, align 4
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i8*, i8** %tmp, align 8
  %tmp6 = load i32, i32* %tmp3, align 4
  %tmp7 = load i32, i32* %tmp4, align 4
  call void @chpl_memhook_free_pre(i8* %tmp5, i32 %tmp6, i32 %tmp7)
  %tmp8 = load i8*, i8** %tmp, align 8
  call void @chpl_free(i8* %tmp8)
  ret void
}

declare i8* @chpl_nodeName() #0

declare i64 @chpl_task_getCallStackSize() #0

declare i32 @chpl_topo_getNumCPUsPhysical(i1 zeroext) #0

declare i32 @chpl_topo_getNumCPUsLogical(i1 zeroext) #0

declare i32 @chpl_task_getMaxPar() #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_rt_sublocFromLocaleID(i32 %arg) #3 {
bb:
  %tmp = alloca %struct.chpl_localeID_t, align 4
  %tmp1 = getelementptr inbounds %struct.chpl_localeID_t, %struct.chpl_localeID_t* %tmp, i32 0, i32 0
  store i32 %arg, i32* %tmp1, align 4
  ret i32 -2
}

declare void @chpl_task_addToTaskList(i16 signext, %struct.chpl_task_bundle_t*, i64, i32, i8**, i32, i1 zeroext, i32, i32) #0

declare void @chpl_task_executeTasksInList(i8**) #0

declare i64 @chpl_comm_default_num_locales() #0

declare void @chpl_rt_preUserCodeHook() #0

declare void @chpl_rt_postUserCodeHook() #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_style_init_default(%struct.qio_style_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_style_s*, align 8
  store %struct.qio_style_s* %arg, %struct.qio_style_s** %tmp, align 8
  %tmp1 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp2 = bitcast %struct.qio_style_s* %tmp1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %tmp2, i8 0, i64 64, i1 false)
  %tmp3 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp4 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp3, i32 0, i32 0
  store i8 0, i8* %tmp4, align 8
  %tmp5 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp6 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp5, i32 0, i32 1
  store i8 1, i8* %tmp6, align 1
  %tmp7 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp8 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp7, i32 0, i32 2
  store i64 -65280, i64* %tmp8, align 8
  %tmp9 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp10 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp9, i32 0, i32 3
  store i32 0, i32* %tmp10, align 8
  %tmp11 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp12 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp11, i32 0, i32 4
  store i32 -1, i32* %tmp12, align 4
  %tmp13 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp14 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp13, i32 0, i32 5
  store i32 -1, i32* %tmp14, align 8
  %tmp15 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp16 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp15, i32 0, i32 6
  store i32 -1, i32* %tmp16, align 4
  %tmp17 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp18 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp17, i32 0, i32 7
  store i8 34, i8* %tmp18, align 8
  %tmp19 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp20 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp19, i32 0, i32 8
  store i8 34, i8* %tmp20, align 1
  %tmp21 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp22 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp21, i32 0, i32 9
  store i8 0, i8* %tmp22, align 2
  %tmp23 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp24 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp23, i32 0, i32 10
  store i8 0, i8* %tmp24, align 1
  %tmp25 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp26 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp25, i32 0, i32 11
  store i8 46, i8* %tmp26, align 4
  %tmp27 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp28 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp27, i32 0, i32 12
  store i8 101, i8* %tmp28, align 1
  %tmp29 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp30 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp29, i32 0, i32 13
  store i8 112, i8* %tmp30, align 2
  %tmp31 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp32 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp31, i32 0, i32 14
  store i8 43, i8* %tmp32, align 1
  %tmp33 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp34 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp33, i32 0, i32 15
  store i8 45, i8* %tmp34, align 8
  %tmp35 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp36 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp35, i32 0, i32 16
  store i8 105, i8* %tmp36, align 1
  %tmp37 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp38 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp37, i32 0, i32 17
  store i8 1, i8* %tmp38, align 2
  %tmp39 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp40 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp39, i32 0, i32 18
  store i8 32, i8* %tmp40, align 1
  %tmp41 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp42 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp41, i32 0, i32 19
  store i8 0, i8* %tmp42, align 4
  %tmp43 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp44 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp43, i32 0, i32 20
  store i8 0, i8* %tmp44, align 1
  %tmp45 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp46 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp45, i32 0, i32 21
  store i8 0, i8* %tmp46, align 2
  %tmp47 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp48 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp47, i32 0, i32 22
  store i8 0, i8* %tmp48, align 1
  %tmp49 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp50 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp49, i32 0, i32 23
  store i8 1, i8* %tmp50, align 8
  %tmp51 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp52 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp51, i32 0, i32 24
  store i32 -1, i32* %tmp52, align 4
  %tmp53 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp54 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp53, i32 0, i32 25
  store i8 0, i8* %tmp54, align 8
  %tmp55 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp56 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp55, i32 0, i32 26
  store i8 0, i8* %tmp56, align 1
  %tmp57 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp58 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp57, i32 0, i32 27
  store i8 0, i8* %tmp58, align 2
  %tmp59 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp60 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp59, i32 0, i32 28
  store i8 0, i8* %tmp60, align 1
  %tmp61 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp, align 8
  %tmp62 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp61, i32 0, i32 29
  store i8 0, i8* %tmp62, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_c_nil(i8* %arg) #3 {
bb:
  %tmp = alloca i8*, align 8
  store i8* %arg, i8** %tmp, align 8
  %tmp1 = load i8*, i8** %tmp, align 8
  %tmp2 = icmp eq i8* %tmp1, null
  ret i1 %tmp2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_file_release(%struct.qio_file_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_file_s*, align 8
  %tmp1 = alloca i64, align 8
  store %struct.qio_file_s* %arg, %struct.qio_file_s** %tmp, align 8
  %tmp2 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp, align 8
  %tmp3 = icmp ne %struct.qio_file_s* %tmp2, null
  br i1 %tmp3, label %bb4, label %bb18

bb4:                                              ; preds = %bb
  %tmp5 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp, align 8
  %tmp6 = getelementptr inbounds %struct.qio_file_s, %struct.qio_file_s* %tmp5, i32 0, i32 0
  %tmp7 = call i64 @atomic_fetch_sub_uint_least64_t(i64* %tmp6, i64 1)
  store i64 %tmp7, i64* %tmp1, align 8
  %tmp8 = load i64, i64* %tmp1, align 8
  %tmp9 = icmp eq i64 %tmp8, 1
  br i1 %tmp9, label %bb10, label %bb12

bb10:                                             ; preds = %bb4
  %tmp11 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp, align 8
  call void @_qio_file_destroy(%struct.qio_file_s* %tmp11)
  br label %bb17

bb12:                                             ; preds = %bb4
  %tmp13 = load i64, i64* %tmp1, align 8
  %tmp14 = icmp eq i64 %tmp13, 0
  br i1 %tmp14, label %bb15, label %bb16

bb15:                                             ; preds = %bb12
  store volatile i32 0, i32* null, align 4
  br label %bb16

bb16:                                             ; preds = %bb15, %bb12
  br label %bb17

bb17:                                             ; preds = %bb16, %bb10
  br label %bb18

bb18:                                             ; preds = %bb17, %bb
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_file_get_style(%struct.qio_file_s* %arg, %struct.qio_style_s* %arg1) #3 {
bb:
  %tmp = alloca %struct.qio_file_s*, align 8
  %tmp2 = alloca %struct.qio_style_s*, align 8
  store %struct.qio_file_s* %arg, %struct.qio_file_s** %tmp, align 8
  store %struct.qio_style_s* %arg1, %struct.qio_style_s** %tmp2, align 8
  %tmp3 = load %struct.qio_style_s*, %struct.qio_style_s** %tmp2, align 8
  %tmp4 = load %struct.qio_file_s*, %struct.qio_file_s** %tmp, align 8
  %tmp5 = getelementptr inbounds %struct.qio_file_s, %struct.qio_file_s* %tmp4, i32 0, i32 16
  %tmp6 = bitcast %struct.qio_style_s* %tmp3 to i8*
  %tmp7 = bitcast %struct.qio_style_s* %tmp5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %tmp6, i8* align 8 %tmp7, i64 64, i1 false)
  ret void
}

declare %struct.qio_err_s* @qio_file_path(%struct.qio_file_s*, i8**) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @qio_err_iserr(%struct.qio_err_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_err_s*, align 8
  store %struct.qio_err_s* %arg, %struct.qio_err_s** %tmp, align 8
  %tmp1 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp, align 8
  %tmp2 = icmp ne %struct.qio_err_s* %tmp1, null
  %tmp3 = zext i1 %tmp2 to i32
  ret i32 %tmp3
}

declare %struct.qio_err_s* @qio_shortest_path(%struct.qio_file_s*, i8**, i8*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @string_compare(i8* %arg, i8* %arg1) #3 {
bb:
  %tmp = alloca i32, align 4
  %tmp2 = alloca i8*, align 8
  %tmp3 = alloca i8*, align 8
  store i8* %arg, i8** %tmp2, align 8
  store i8* %arg1, i8** %tmp3, align 8
  %tmp4 = load i8*, i8** %tmp2, align 8
  %tmp5 = load i8*, i8** %tmp3, align 8
  %tmp6 = icmp eq i8* %tmp4, %tmp5
  br i1 %tmp6, label %bb7, label %bb8

bb7:                                              ; preds = %bb
  store i32 0, i32* %tmp, align 4
  br label %bb20

bb8:                                              ; preds = %bb
  %tmp9 = load i8*, i8** %tmp2, align 8
  %tmp10 = icmp eq i8* %tmp9, null
  br i1 %tmp10, label %bb11, label %bb12

bb11:                                             ; preds = %bb8
  store i32 -1, i32* %tmp, align 4
  br label %bb20

bb12:                                             ; preds = %bb8
  %tmp13 = load i8*, i8** %tmp3, align 8
  %tmp14 = icmp eq i8* %tmp13, null
  br i1 %tmp14, label %bb15, label %bb16

bb15:                                             ; preds = %bb12
  store i32 1, i32* %tmp, align 4
  br label %bb20

bb16:                                             ; preds = %bb12
  %tmp17 = load i8*, i8** %tmp2, align 8
  %tmp18 = load i8*, i8** %tmp3, align 8
  %tmp19 = call i32 @strcmp(i8* %tmp17, i8* %tmp18) #11
  store i32 %tmp19, i32* %tmp, align 4
  br label %bb20

bb20:                                             ; preds = %bb16, %bb15, %bb11, %bb7
  %tmp21 = load i32, i32* %tmp, align 4
  ret i32 %tmp21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_rt_free_c_string(i8** %arg, i32 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i8**, align 8
  %tmp3 = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  store i8** %arg, i8*** %tmp, align 8
  store i32 %arg1, i32* %tmp3, align 4
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i8**, i8*** %tmp, align 8
  %tmp6 = load i8*, i8** %tmp5, align 8
  %tmp7 = icmp ne i8* %tmp6, null
  br i1 %tmp7, label %bb8, label %bb9

bb8:                                              ; preds = %bb
  br label %bb11

bb9:                                              ; preds = %bb
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.1, i32 0, i32 0), i32 162, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @__PRETTY_FUNCTION__.chpl_rt_free_c_string, i32 0, i32 0)) #12
  unreachable

bb10:                                             ; No predecessors!
  br label %bb11

bb11:                                             ; preds = %bb10, %bb8
  %tmp12 = load i8**, i8*** %tmp, align 8
  %tmp13 = load i8*, i8** %tmp12, align 8
  %tmp14 = load i32, i32* %tmp3, align 4
  %tmp15 = load i32, i32* %tmp4, align 4
  call void @chpl_mem_free(i8* %tmp13, i32 %tmp14, i32 %tmp15)
  %tmp16 = load i8**, i8*** %tmp, align 8
  store i8* null, i8** %tmp16, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct._IO_FILE* @chpl_cnullfile() #3 {
bb:
  ret %struct._IO_FILE* null
}

declare %struct.qio_err_s* @qio_file_init(%struct.qio_file_s**, %struct._IO_FILE*, i32, i32, %struct.qio_style_s*, i32) #0

declare %struct.qio_err_s* @qio_file_path_for_fd(i32, i8**) #0

declare %struct.qio_err_s* @qio_file_path_for_fp(%struct._IO_FILE*, i8**) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_channel_retain(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  %tmp1 = alloca i64, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp3 = icmp ne %struct.qio_channel_s* %tmp2, null
  br i1 %tmp3, label %bb4, label %bb13

bb4:                                              ; preds = %bb
  %tmp5 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp6 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp5, i32 0, i32 0
  %tmp7 = call i64 @atomic_fetch_add_uint_least64_t(i64* %tmp6, i64 1)
  store i64 %tmp7, i64* %tmp1, align 8
  %tmp8 = load i64, i64* %tmp1, align 8
  %tmp9 = add i64 %tmp8, 1
  %tmp10 = icmp ule i64 %tmp9, 1
  br i1 %tmp10, label %bb11, label %bb12

bb11:                                             ; preds = %bb4
  store volatile i32 0, i32* null, align 4
  br label %bb12

bb12:                                             ; preds = %bb11, %bb4
  br label %bb13

bb13:                                             ; preds = %bb12, %bb
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_channel_release(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  %tmp1 = alloca i64, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp3 = icmp ne %struct.qio_channel_s* %tmp2, null
  br i1 %tmp3, label %bb4, label %bb18

bb4:                                              ; preds = %bb
  %tmp5 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp6 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp5, i32 0, i32 0
  %tmp7 = call i64 @atomic_fetch_sub_uint_least64_t(i64* %tmp6, i64 1)
  store i64 %tmp7, i64* %tmp1, align 8
  %tmp8 = load i64, i64* %tmp1, align 8
  %tmp9 = icmp eq i64 %tmp8, 1
  br i1 %tmp9, label %bb10, label %bb12

bb10:                                             ; preds = %bb4
  %tmp11 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  call void @_qio_channel_destroy(%struct.qio_channel_s* %tmp11)
  br label %bb17

bb12:                                             ; preds = %bb4
  %tmp13 = load i64, i64* %tmp1, align 8
  %tmp14 = icmp eq i64 %tmp13, 0
  br i1 %tmp14, label %bb15, label %bb16

bb15:                                             ; preds = %bb12
  store volatile i32 0, i32* null, align 4
  br label %bb16

bb16:                                             ; preds = %bb15, %bb12
  br label %bb17

bb17:                                             ; preds = %bb16, %bb10
  br label %bb18

bb18:                                             ; preds = %bb17, %bb
  ret void
}

declare %struct.qio_err_s* @qio_channel_create(%struct.qio_channel_s**, %struct.qio_file_s*, i32, i32, i32, i64, i64, %struct.qio_style_s*) #0

declare %struct.qio_err_s* @qio_channel_path_offset(i32, %struct.qio_channel_s*, i8**, i64*) #0

declare %struct.qio_err_s* @qio_channel_print_float(i32, %struct.qio_channel_s*, i8*, i64) #0

declare %struct.qio_err_s* @qio_channel_print_string(i32, %struct.qio_channel_s*, i8*, i64) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.qio_err_s* @qio_channel_error(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp1, i32 0, i32 5
  %tmp3 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp2, align 8
  ret %struct.qio_err_s* %tmp3
}

declare %struct.qio_err_s* @qio_channel_print_literal(i32, %struct.qio_channel_s*, i8*, i64) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_qio_channel_set_error_unlocked(%struct.qio_channel_s* %arg, %struct.qio_err_s* %arg1) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  %tmp2 = alloca %struct.qio_err_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  store %struct.qio_err_s* %arg1, %struct.qio_err_s** %tmp2, align 8
  %tmp3 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp2, align 8
  %tmp4 = icmp ne %struct.qio_err_s* %tmp3, null
  br i1 %tmp4, label %bb5, label %bb9

bb5:                                              ; preds = %bb
  %tmp6 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp2, align 8
  %tmp7 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp8 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp7, i32 0, i32 5
  store %struct.qio_err_s* %tmp6, %struct.qio_err_s** %tmp8, align 8
  br label %bb9

bb9:                                              ; preds = %bb5, %bb
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @qio_channel_binary(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp1, i32 0, i32 22
  %tmp3 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp2, i32 0, i32 0
  %tmp4 = load i8, i8* %tmp3, align 8
  ret i8 %tmp4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @qio_channel_byteorder(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp1, i32 0, i32 22
  %tmp3 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp2, i32 0, i32 1
  %tmp4 = load i8, i8* %tmp3, align 1
  ret i8 %tmp4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.qio_err_s* @qio_channel_write_float64(i32 %arg, i32 %arg1, %struct.qio_channel_s* noalias %arg2, double %arg3) #3 {
bb:
  %tmp = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  %tmp5 = alloca %struct.qio_channel_s*, align 8
  %tmp6 = alloca double, align 8
  %tmp7 = alloca %union.anon, align 8
  %tmp8 = alloca i64, align 8
  %tmp9 = alloca i64, align 8
  %tmp10 = alloca i64, align 8
  store i32 %arg, i32* %tmp, align 4
  store i32 %arg1, i32* %tmp4, align 4
  store %struct.qio_channel_s* %arg2, %struct.qio_channel_s** %tmp5, align 8
  store double %arg3, double* %tmp6, align 8
  %tmp11 = load double, double* %tmp6, align 8
  %tmp12 = bitcast %union.anon* %tmp7 to double*
  store double %tmp11, double* %tmp12, align 8
  %tmp13 = load i32, i32* %tmp4, align 4
  %tmp14 = icmp eq i32 %tmp13, 2
  br i1 %tmp14, label %bb15, label %bb23

bb15:                                             ; preds = %bb
  %tmp16 = bitcast %union.anon* %tmp7 to i64*
  %tmp17 = load i64, i64* %tmp16, align 8
  store i64 %tmp17, i64* %tmp9, align 8
  %tmp18 = load i64, i64* %tmp9, align 8
  %tmp19 = call i64 asm "bswap ${0:q}", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %tmp18) #13, !srcloc !363
  store i64 %tmp19, i64* %tmp8, align 8
  %tmp20 = load i64, i64* %tmp8, align 8
  store i64 %tmp20, i64* %tmp10, align 8
  %tmp21 = load i64, i64* %tmp10, align 8
  %tmp22 = bitcast %union.anon* %tmp7 to i64*
  store i64 %tmp21, i64* %tmp22, align 8
  br label %bb23

bb23:                                             ; preds = %bb15, %bb
  %tmp24 = load i32, i32* %tmp4, align 4
  %tmp25 = icmp eq i32 %tmp24, 3
  br i1 %tmp25, label %bb26, label %bb30

bb26:                                             ; preds = %bb23
  %tmp27 = bitcast %union.anon* %tmp7 to i64*
  %tmp28 = load i64, i64* %tmp27, align 8
  %tmp29 = bitcast %union.anon* %tmp7 to i64*
  store i64 %tmp28, i64* %tmp29, align 8
  br label %bb30

bb30:                                             ; preds = %bb26, %bb23
  %tmp31 = load i32, i32* %tmp, align 4
  %tmp32 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp33 = bitcast %union.anon* %tmp7 to i8*
  %tmp34 = call %struct.qio_err_s* @qio_channel_write_amt(i32 %tmp31, %struct.qio_channel_s* %tmp32, i8* %tmp33, i64 8)
  ret %struct.qio_err_s* %tmp34
}

declare i64 @qio_channel_style_element(%struct.qio_channel_s*, i64) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.qio_err_s* @qio_channel_write_amt(i32 %arg, %struct.qio_channel_s* noalias %arg1, i8* noalias %arg2, i64 %arg3) #3 {
bb:
  %tmp = alloca %struct.qio_err_s*, align 8
  %tmp4 = alloca i32, align 4
  %tmp5 = alloca %struct.qio_channel_s*, align 8
  %tmp6 = alloca i8*, align 8
  %tmp7 = alloca i64, align 8
  %tmp8 = alloca %struct.qio_err_s*, align 8
  %tmp9 = alloca i64, align 8
  store i32 %arg, i32* %tmp4, align 4
  store %struct.qio_channel_s* %arg1, %struct.qio_channel_s** %tmp5, align 8
  store i8* %arg2, i8** %tmp6, align 8
  store i64 %arg3, i64* %tmp7, align 8
  %tmp10 = load i32, i32* %tmp4, align 4
  %tmp11 = icmp ne i32 %tmp10, 0
  br i1 %tmp11, label %bb12, label %bb21

bb12:                                             ; preds = %bb
  %tmp13 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp14 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp13, i32 0, i32 7
  %tmp15 = call %struct.qio_err_s* @qio_lock(%struct.qio_lock_t* %tmp14)
  store %struct.qio_err_s* %tmp15, %struct.qio_err_s** %tmp8, align 8
  %tmp16 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp8, align 8
  %tmp17 = icmp ne %struct.qio_err_s* %tmp16, null
  br i1 %tmp17, label %bb18, label %bb20

bb18:                                             ; preds = %bb12
  %tmp19 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp8, align 8
  store %struct.qio_err_s* %tmp19, %struct.qio_err_s** %tmp, align 8
  br label %bb71

bb20:                                             ; preds = %bb12
  br label %bb21

bb21:                                             ; preds = %bb20, %bb
  %tmp22 = load i64, i64* %tmp7, align 8
  %tmp23 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp24 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp23, i32 0, i32 2
  %tmp25 = load i8*, i8** %tmp24, align 8
  %tmp26 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp27 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp26, i32 0, i32 1
  %tmp28 = load i8*, i8** %tmp27, align 8
  %tmp29 = call i32 @qio_space_in_ptr_diff(i64 %tmp22, i8* %tmp25, i8* %tmp28)
  %tmp30 = icmp ne i32 %tmp29, 0
  br i1 %tmp30, label %bb31, label %bb47

bb31:                                             ; preds = %bb21
  %tmp32 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp33 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp32, i32 0, i32 1
  %tmp34 = load i8*, i8** %tmp33, align 8
  %tmp35 = load i8*, i8** %tmp6, align 8
  %tmp36 = load i64, i64* %tmp7, align 8
  %tmp37 = call i8* @chpl_memcpy(i8* %tmp34, i8* %tmp35, i64 %tmp36)
  %tmp38 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp39 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp38, i32 0, i32 1
  %tmp40 = load i8*, i8** %tmp39, align 8
  %tmp41 = load i64, i64* %tmp7, align 8
  %tmp42 = call i8* @qio_ptr_add(i8* %tmp40, i64 %tmp41)
  %tmp43 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp44 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp43, i32 0, i32 1
  store i8* %tmp42, i8** %tmp44, align 8
  %tmp45 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp46 = call %struct.qio_err_s* @_qio_channel_post_cached_write(%struct.qio_channel_s* %tmp45)
  store %struct.qio_err_s* %tmp46, %struct.qio_err_s** %tmp8, align 8
  br label %bb63

bb47:                                             ; preds = %bb21
  store i64 0, i64* %tmp9, align 8
  %tmp48 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp49 = load i8*, i8** %tmp6, align 8
  %tmp50 = load i64, i64* %tmp7, align 8
  %tmp51 = call %struct.qio_err_s* @_qio_slow_write(%struct.qio_channel_s* %tmp48, i8* %tmp49, i64 %tmp50, i64* %tmp9)
  store %struct.qio_err_s* %tmp51, %struct.qio_err_s** %tmp8, align 8
  %tmp52 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp8, align 8
  %tmp53 = icmp eq %struct.qio_err_s* %tmp52, null
  br i1 %tmp53, label %bb54, label %bb60

bb54:                                             ; preds = %bb47
  %tmp55 = load i64, i64* %tmp9, align 8
  %tmp56 = load i64, i64* %tmp7, align 8
  %tmp57 = icmp ne i64 %tmp55, %tmp56
  br i1 %tmp57, label %bb58, label %bb60

bb58:                                             ; preds = %bb54
  %tmp59 = call %struct.qio_err_s* @qio_int_to_err(i32 1001)
  store %struct.qio_err_s* %tmp59, %struct.qio_err_s** %tmp8, align 8
  br label %bb60

bb60:                                             ; preds = %bb58, %bb54, %bb47
  %tmp61 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp62 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp8, align 8
  call void @_qio_channel_set_error_unlocked(%struct.qio_channel_s* %tmp61, %struct.qio_err_s* %tmp62)
  br label %bb63

bb63:                                             ; preds = %bb60, %bb31
  %tmp64 = load i32, i32* %tmp4, align 4
  %tmp65 = icmp ne i32 %tmp64, 0
  br i1 %tmp65, label %bb66, label %bb69

bb66:                                             ; preds = %bb63
  %tmp67 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp5, align 8
  %tmp68 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp67, i32 0, i32 7
  call void @qio_unlock(%struct.qio_lock_t* %tmp68)
  br label %bb69

bb69:                                             ; preds = %bb66, %bb63
  %tmp70 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp8, align 8
  store %struct.qio_err_s* %tmp70, %struct.qio_err_s** %tmp, align 8
  br label %bb71

bb71:                                             ; preds = %bb69, %bb18
  %tmp72 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp, align 8
  ret %struct.qio_err_s* %tmp72
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.qio_err_s* @qio_channel_lock(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = icmp ne %struct.qio_channel_s* %tmp1, null
  br i1 %tmp2, label %bb3, label %bb4

bb3:                                              ; preds = %bb
  br label %bb6

bb4:                                              ; preds = %bb
  call void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.7, i32 0, i32 0), i32 1040, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__.qio_channel_lock, i32 0, i32 0)) #12
  unreachable

bb5:                                              ; No predecessors!
  br label %bb6

bb6:                                              ; preds = %bb5, %bb3
  %tmp7 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp8 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp7, i32 0, i32 7
  %tmp9 = call %struct.qio_err_s* @qio_lock(%struct.qio_lock_t* %tmp8)
  ret %struct.qio_err_s* %tmp9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @qio_channel_str_style(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp1, i32 0, i32 22
  %tmp3 = getelementptr inbounds %struct.qio_style_s, %struct.qio_style_s* %tmp2, i32 0, i32 2
  %tmp4 = load i64, i64* %tmp3, align 8
  ret i64 %tmp4
}

declare %struct.qio_err_s* @qio_channel_write_string(i32, i32, i64, %struct.qio_channel_s*, i8*, i64) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_channel_clear_error(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp1, i32 0, i32 5
  store %struct.qio_err_s* null, %struct.qio_err_s** %tmp2, align 8
  ret void
}

declare %struct.qio_err_s* @qio_channel_write_newline(i32, %struct.qio_channel_s*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal void @qio_channel_unlock(%struct.qio_channel_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  %tmp1 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp1, i32 0, i32 7
  call void @qio_unlock(%struct.qio_lock_t* %tmp2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct._IO_FILE* @chpl_cstdout() #3 {
bb:
  %tmp = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  ret %struct._IO_FILE* %tmp
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct._IO_FILE* @chpl_cstderr() #3 {
bb:
  %tmp = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  ret %struct._IO_FILE* %tmp
}

declare i8* @sys_strerror_syserr_str(%struct.qio_err_s*, i32*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @qio_err_to_int(%struct.qio_err_s* %arg) #3 {
bb:
  %tmp = alloca i32, align 4
  %tmp1 = alloca %struct.qio_err_s*, align 8
  %tmp2 = alloca i64, align 8
  store %struct.qio_err_s* %arg, %struct.qio_err_s** %tmp1, align 8
  %tmp3 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp1, align 8
  %tmp4 = ptrtoint %struct.qio_err_s* %tmp3 to i64
  store i64 %tmp4, i64* %tmp2, align 8
  %tmp5 = load i64, i64* %tmp2, align 8
  %tmp6 = icmp eq i64 %tmp5, 0
  br i1 %tmp6, label %bb7, label %bb8

bb7:                                              ; preds = %bb
  store i32 0, i32* %tmp, align 4
  br label %bb21

bb8:                                              ; preds = %bb
  %tmp9 = load i64, i64* %tmp2, align 8
  %tmp10 = and i64 %tmp9, 1
  %tmp11 = icmp ne i64 %tmp10, 0
  br i1 %tmp11, label %bb12, label %bb16

bb12:                                             ; preds = %bb8
  %tmp13 = load i64, i64* %tmp2, align 8
  %tmp14 = ashr i64 %tmp13, 1
  %tmp15 = trunc i64 %tmp14 to i32
  store i32 %tmp15, i32* %tmp, align 4
  br label %bb21

bb16:                                             ; preds = %bb8
  %tmp17 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp1, align 8
  %tmp18 = call %struct.qio_err_s* @qio_err_local_ptr(%struct.qio_err_s* %tmp17)
  %tmp19 = getelementptr inbounds %struct.qio_err_s, %struct.qio_err_s* %tmp18, i32 0, i32 0
  %tmp20 = load i32, i32* %tmp19, align 8
  store i32 %tmp20, i32* %tmp, align 4
  br label %bb21

bb21:                                             ; preds = %bb16, %bb12, %bb7
  %tmp22 = load i32, i32* %tmp, align 4
  ret i32 %tmp22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_macro_int_EEOF() #3 {
bb:
  ret i32 1000
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_macro_int_ESHORT() #3 {
bb:
  ret i32 1001
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @chpl_macro_int_EFORMAT() #3 {
bb:
  ret i32 1002
}

declare %struct.qio_err_s* @qio_quote_string(i8 zeroext, i8 zeroext, i8 zeroext, i8*, i64, i8**, %struct.qio_truncate_info_*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @qio_strdup(i8* %arg) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp1 = alloca i64, align 8
  %tmp2 = alloca i8*, align 8
  store i8* %arg, i8** %tmp, align 8
  %tmp3 = load i8*, i8** %tmp, align 8
  %tmp4 = call i64 @strlen(i8* %tmp3) #11
  %tmp5 = add i64 %tmp4, 1
  store i64 %tmp5, i64* %tmp1, align 8
  %tmp6 = load i64, i64* %tmp1, align 8
  %tmp7 = call i8* @chpl_mem_alloc(i64 %tmp6, i16 signext 39, i32 489, i32 0)
  store i8* %tmp7, i8** %tmp2, align 8
  %tmp8 = load i8*, i8** %tmp2, align 8
  %tmp9 = icmp ne i8* %tmp8, null
  br i1 %tmp9, label %bb10, label %bb15

bb10:                                             ; preds = %bb
  %tmp11 = load i8*, i8** %tmp2, align 8
  %tmp12 = load i8*, i8** %tmp, align 8
  %tmp13 = load i64, i64* %tmp1, align 8
  %tmp14 = call i8* @chpl_memcpy(i8* %tmp11, i8* %tmp12, i64 %tmp13)
  br label %bb15

bb15:                                             ; preds = %bb10, %bb
  %tmp16 = load i8*, i8** %tmp2, align 8
  ret i8* %tmp16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_memcpy(i8* %arg, i8* %arg1, i64 %arg2) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp3 = alloca i8*, align 8
  %tmp4 = alloca i64, align 8
  store i8* %arg, i8** %tmp, align 8
  store i8* %arg1, i8** %tmp3, align 8
  store i64 %arg2, i64* %tmp4, align 8
  %tmp5 = load i8*, i8** %tmp, align 8
  %tmp6 = load i8*, i8** %tmp3, align 8
  %tmp7 = icmp ne i8* %tmp5, %tmp6
  br i1 %tmp7, label %bb11, label %bb8

bb8:                                              ; preds = %bb
  %tmp9 = load i64, i64* %tmp4, align 8
  %tmp10 = icmp eq i64 %tmp9, 0
  br i1 %tmp10, label %bb11, label %bb12

bb11:                                             ; preds = %bb8, %bb
  br label %bb14

bb12:                                             ; preds = %bb8
  call void @__assert_fail(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.1, i32 0, i32 0), i32 143, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__PRETTY_FUNCTION__.chpl_memcpy, i32 0, i32 0)) #12
  unreachable

bb13:                                             ; No predecessors!
  br label %bb14

bb14:                                             ; preds = %bb13, %bb11
  %tmp15 = load i8*, i8** %tmp, align 8
  %tmp16 = load i8*, i8** %tmp3, align 8
  %tmp17 = load i64, i64* %tmp4, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %tmp15, i8* align 1 %tmp16, i64 %tmp17, i1 false)
  ret i8* %tmp15
}

declare void @chpl_comm_get(i8*, i32, i8*, i64, i32, i32, i32, i32) #0

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_rmem_consist_release(i32 %arg, i32 %arg1) #3 {
bb:
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i32 %arg, i32* %tmp, align 4
  store i32 %arg1, i32* %tmp2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_rmem_consist_acquire(i32 %arg, i32 %arg1) #3 {
bb:
  %tmp = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  store i32 %arg, i32* %tmp, align 4
  store i32 %arg1, i32* %tmp2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_memhook_free_pre(i8* %arg, i32 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp3 = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i32 %arg1, i32* %tmp3, align 4
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i32, i32* %tmp3, align 4
  %tmp6 = load i32, i32* %tmp4, align 4
  call void @chpl_memhook_check_pre(i64 0, i64 0, i16 signext 0, i32 %tmp5, i32 %tmp6)
  %tmp7 = load i8*, i8** %tmp, align 8
  %tmp8 = load i32, i32* %tmp3, align 4
  %tmp9 = load i32, i32* %tmp4, align 4
  call void @chpl_track_free(i8* %tmp7, i32 %tmp8, i32 %tmp9)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @chpl_mem_size_justifies_comm_alloc(i64 %arg) #3 {
bb:
  %tmp = alloca i64, align 8
  store i64 %arg, i64* %tmp, align 8
  %tmp1 = load i64, i64* %tmp, align 8
  %tmp2 = call i64 @chpl_comm_regMemAllocThreshold()
  %tmp3 = icmp uge i64 %tmp1, %tmp2
  br i1 %tmp3, label %bb4, label %bb9

bb4:                                              ; preds = %bb
  %tmp5 = load i64, i64* %tmp, align 8
  %tmp6 = call i64 @chpl_comm_regMemHeapPageSize()
  %tmp7 = mul i64 2, %tmp6
  %tmp8 = icmp uge i64 %tmp5, %tmp7
  br label %bb9

bb9:                                              ; preds = %bb4, %bb
  %tmp10 = phi i1 [ false, %bb ], [ %tmp8, %bb4 ]
  ret i1 %tmp10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @chpl_comm_regMemFree(i8* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp2 = alloca i64, align 8
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  ret i1 false
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_free(i8* %arg) #3 {
bb:
  %tmp = alloca i8*, align 8
  store i8* %arg, i8** %tmp, align 8
  %tmp1 = load i8*, i8** %tmp, align 8
  call void @chpl_je_free(i8* %tmp1) #10
  ret void
}

declare void @chpl_memhook_check_pre(i64, i64, i16 signext, i32, i32) #0

declare void @chpl_track_free(i8*, i32, i32) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @chpl_comm_regMemAllocThreshold() #3 {
bb:
  ret i64 -1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @chpl_comm_regMemHeapPageSize() #3 {
bb:
  %tmp = call i64 @chpl_getSysPageSize()
  ret i64 %tmp
}

declare i64 @chpl_getSysPageSize() #0

; Function Attrs: nounwind
declare void @chpl_je_free(i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_memhook_malloc_pre(i64 %arg, i64 %arg1, i16 signext %arg2, i32 %arg3, i32 %arg4) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp5 = alloca i64, align 8
  %tmp6 = alloca i16, align 2
  %tmp7 = alloca i32, align 4
  %tmp8 = alloca i32, align 4
  store i64 %arg, i64* %tmp, align 8
  store i64 %arg1, i64* %tmp5, align 8
  store i16 %arg2, i16* %tmp6, align 2
  store i32 %arg3, i32* %tmp7, align 4
  store i32 %arg4, i32* %tmp8, align 4
  %tmp9 = load i64, i64* %tmp, align 8
  %tmp10 = load i64, i64* %tmp5, align 8
  %tmp11 = load i16, i16* %tmp6, align 2
  %tmp12 = load i32, i32* %tmp7, align 4
  %tmp13 = load i32, i32* %tmp8, align 4
  call void @chpl_memhook_check_pre(i64 %tmp9, i64 %tmp10, i16 signext %tmp11, i32 %tmp12, i32 %tmp13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_comm_regMemAlloc(i64 %arg, i16 signext %arg1, i32 %arg2, i32 %arg3) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp4 = alloca i16, align 2
  %tmp5 = alloca i32, align 4
  %tmp6 = alloca i32, align 4
  store i64 %arg, i64* %tmp, align 8
  store i16 %arg1, i16* %tmp4, align 2
  store i32 %arg2, i32* %tmp5, align 4
  store i32 %arg3, i32* %tmp6, align 4
  ret i8* null
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_malloc(i64 %arg) #3 {
bb:
  %tmp = alloca i64, align 8
  store i64 %arg, i64* %tmp, align 8
  %tmp1 = load i64, i64* %tmp, align 8
  %tmp2 = call noalias i8* @chpl_je_malloc(i64 %tmp1) #14
  ret i8* %tmp2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_memhook_malloc_post(i8* %arg, i64 %arg1, i64 %arg2, i16 signext %arg3, i32 %arg4, i32 %arg5) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp6 = alloca i64, align 8
  %tmp7 = alloca i64, align 8
  %tmp8 = alloca i16, align 2
  %tmp9 = alloca i32, align 4
  %tmp10 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp6, align 8
  store i64 %arg2, i64* %tmp7, align 8
  store i16 %arg3, i16* %tmp8, align 2
  store i32 %arg4, i32* %tmp9, align 4
  store i32 %arg5, i32* %tmp10, align 4
  %tmp11 = load i8*, i8** %tmp, align 8
  %tmp12 = load i16, i16* %tmp8, align 2
  %tmp13 = load i32, i32* %tmp9, align 4
  %tmp14 = load i32, i32* %tmp10, align 4
  call void @chpl_memhook_check_post(i8* %tmp11, i16 signext %tmp12, i32 %tmp13, i32 %tmp14)
  %tmp15 = load i8*, i8** %tmp, align 8
  %tmp16 = load i64, i64* %tmp6, align 8
  %tmp17 = load i64, i64* %tmp7, align 8
  %tmp18 = load i16, i16* %tmp8, align 2
  %tmp19 = load i32, i32* %tmp9, align 4
  %tmp20 = load i32, i32* %tmp10, align 4
  call void @chpl_track_malloc(i8* %tmp15, i64 %tmp16, i64 %tmp17, i16 signext %tmp18, i32 %tmp19, i32 %tmp20)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_comm_regMemPostAlloc(i8* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp2 = alloca i64, align 8
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  ret void
}

; Function Attrs: nounwind allocsize(0)
declare noalias i8* @chpl_je_malloc(i64) #7

declare void @chpl_memhook_check_post(i8*, i16 signext, i32, i32) #0

declare void @chpl_track_malloc(i8*, i64, i64, i16 signext, i32, i32) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.chpl_task_bundle_t* @chpl_task_getPrvBundle() #3 {
bb:
  %tmp = alloca %struct.chpl_task_bundle_t*, align 8
  %tmp1 = alloca %struct.chpl_qthread_tls_s*, align 8
  %tmp2 = call %struct.chpl_qthread_tls_s* @chpl_qthread_get_tasklocal()
  store %struct.chpl_qthread_tls_s* %tmp2, %struct.chpl_qthread_tls_s** %tmp1, align 8
  %tmp3 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp1, align 8
  %tmp4 = icmp ne %struct.chpl_qthread_tls_s* %tmp3, null
  br i1 %tmp4, label %bb5, label %bb14

bb5:                                              ; preds = %bb
  %tmp6 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp1, align 8
  %tmp7 = getelementptr inbounds %struct.chpl_qthread_tls_s, %struct.chpl_qthread_tls_s* %tmp6, i32 0, i32 0
  %tmp8 = load %struct.chpl_task_bundle_t*, %struct.chpl_task_bundle_t** %tmp7, align 8
  %tmp9 = icmp ne %struct.chpl_task_bundle_t* %tmp8, null
  br i1 %tmp9, label %bb10, label %bb14

bb10:                                             ; preds = %bb5
  %tmp11 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp1, align 8
  %tmp12 = getelementptr inbounds %struct.chpl_qthread_tls_s, %struct.chpl_qthread_tls_s* %tmp11, i32 0, i32 0
  %tmp13 = load %struct.chpl_task_bundle_t*, %struct.chpl_task_bundle_t** %tmp12, align 8
  store %struct.chpl_task_bundle_t* %tmp13, %struct.chpl_task_bundle_t** %tmp, align 8
  br label %bb26

bb14:                                             ; preds = %bb5, %bb
  %tmp15 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp1, align 8
  %tmp16 = icmp ne %struct.chpl_qthread_tls_s* %tmp15, null
  br i1 %tmp16, label %bb17, label %bb23

bb17:                                             ; preds = %bb14
  %tmp18 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp1, align 8
  %tmp19 = getelementptr inbounds %struct.chpl_qthread_tls_s, %struct.chpl_qthread_tls_s* %tmp18, i32 0, i32 0
  %tmp20 = load %struct.chpl_task_bundle_t*, %struct.chpl_task_bundle_t** %tmp19, align 8
  %tmp21 = icmp ne %struct.chpl_task_bundle_t* %tmp20, null
  br i1 %tmp21, label %bb22, label %bb23

bb22:                                             ; preds = %bb17
  br label %bb25

bb23:                                             ; preds = %bb17, %bb14
  call void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.3, i32 0, i32 0), i32 161, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__PRETTY_FUNCTION__.chpl_task_getPrvBundle, i32 0, i32 0)) #12
  unreachable

bb24:                                             ; No predecessors!
  br label %bb25

bb25:                                             ; preds = %bb24, %bb22
  store %struct.chpl_task_bundle_t* null, %struct.chpl_task_bundle_t** %tmp, align 8
  br label %bb26

bb26:                                             ; preds = %bb25, %bb10
  %tmp27 = load %struct.chpl_task_bundle_t*, %struct.chpl_task_bundle_t** %tmp, align 8
  ret %struct.chpl_task_bundle_t* %tmp27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.chpl_qthread_tls_s* @chpl_qthread_get_tasklocal() #3 {
bb:
  %tmp = alloca %struct.chpl_qthread_tls_s*, align 8
  %tmp1 = alloca i64, align 8
  %tmp2 = load volatile i32, i32* @chpl_qthread_done_initializing, align 4
  %tmp3 = icmp ne i32 %tmp2, 0
  br i1 %tmp3, label %bb4, label %bb31

bb4:                                              ; preds = %bb
  %tmp5 = call i8* @qthread_get_tasklocal(i32 16)
  %tmp6 = bitcast i8* %tmp5 to %struct.chpl_qthread_tls_s*
  store %struct.chpl_qthread_tls_s* %tmp6, %struct.chpl_qthread_tls_s** %tmp, align 8
  %tmp7 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp, align 8
  %tmp8 = icmp eq %struct.chpl_qthread_tls_s* %tmp7, null
  br i1 %tmp8, label %bb9, label %bb24

bb9:                                              ; preds = %bb4
  %tmp10 = call i64 @pthread_self() #13
  store i64 %tmp10, i64* %tmp1, align 8
  %tmp11 = load i64, i64* %tmp1, align 8
  %tmp12 = load i64, i64* @chpl_qthread_comm_pthread, align 8
  %tmp13 = call i32 @pthread_equal(i64 %tmp11, i64 %tmp12) #13
  %tmp14 = icmp ne i32 %tmp13, 0
  br i1 %tmp14, label %bb15, label %bb16

bb15:                                             ; preds = %bb9
  store %struct.chpl_qthread_tls_s* @chpl_qthread_comm_task_tls, %struct.chpl_qthread_tls_s** %tmp, align 8
  br label %bb23

bb16:                                             ; preds = %bb9
  %tmp17 = load i64, i64* %tmp1, align 8
  %tmp18 = load i64, i64* @chpl_qthread_process_pthread, align 8
  %tmp19 = call i32 @pthread_equal(i64 %tmp17, i64 %tmp18) #13
  %tmp20 = icmp ne i32 %tmp19, 0
  br i1 %tmp20, label %bb21, label %bb22

bb21:                                             ; preds = %bb16
  store %struct.chpl_qthread_tls_s* @chpl_qthread_process_tls, %struct.chpl_qthread_tls_s** %tmp, align 8
  br label %bb22

bb22:                                             ; preds = %bb21, %bb16
  br label %bb23

bb23:                                             ; preds = %bb22, %bb15
  br label %bb24

bb24:                                             ; preds = %bb23, %bb4
  %tmp25 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp, align 8
  %tmp26 = icmp ne %struct.chpl_qthread_tls_s* %tmp25, null
  br i1 %tmp26, label %bb27, label %bb28

bb27:                                             ; preds = %bb24
  br label %bb30

bb28:                                             ; preds = %bb24
  call void @__assert_fail(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.3, i32 0, i32 0), i32 127, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__.chpl_qthread_get_tasklocal, i32 0, i32 0)) #12
  unreachable

bb29:                                             ; No predecessors!
  br label %bb30

bb30:                                             ; preds = %bb29, %bb27
  br label %bb32

bb31:                                             ; preds = %bb
  store %struct.chpl_qthread_tls_s* null, %struct.chpl_qthread_tls_s** %tmp, align 8
  br label %bb32

bb32:                                             ; preds = %bb31, %bb30
  %tmp33 = load %struct.chpl_qthread_tls_s*, %struct.chpl_qthread_tls_s** %tmp, align 8
  ret %struct.chpl_qthread_tls_s* %tmp33
}

declare i8* @qthread_get_tasklocal(i32) #0

; Function Attrs: nounwind readnone
declare i64 @pthread_self() #8

; Function Attrs: nounwind readnone
declare i32 @pthread_equal(i64, i64) #8

declare void @chpl_task_taskCallFTable(i16 signext, %struct.chpl_task_bundle_t*, i64, i32, i32, i32) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_mem_allocMany(i64 %arg, i64 %arg1, i16 signext %arg2, i32 %arg3, i32 %arg4) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp5 = alloca i64, align 8
  %tmp6 = alloca i16, align 2
  %tmp7 = alloca i32, align 4
  %tmp8 = alloca i32, align 4
  %tmp9 = alloca i8*, align 8
  store i64 %arg, i64* %tmp, align 8
  store i64 %arg1, i64* %tmp5, align 8
  store i16 %arg2, i16* %tmp6, align 2
  store i32 %arg3, i32* %tmp7, align 4
  store i32 %arg4, i32* %tmp8, align 4
  %tmp10 = load i64, i64* %tmp, align 8
  %tmp11 = load i64, i64* %tmp5, align 8
  %tmp12 = load i16, i16* %tmp6, align 2
  %tmp13 = load i32, i32* %tmp7, align 4
  %tmp14 = load i32, i32* %tmp8, align 4
  call void @chpl_memhook_malloc_pre(i64 %tmp10, i64 %tmp11, i16 signext %tmp12, i32 %tmp13, i32 %tmp14)
  %tmp15 = load i64, i64* %tmp, align 8
  %tmp16 = load i64, i64* %tmp5, align 8
  %tmp17 = mul i64 %tmp15, %tmp16
  %tmp18 = call i8* @chpl_malloc(i64 %tmp17)
  store i8* %tmp18, i8** %tmp9, align 8
  %tmp19 = load i8*, i8** %tmp9, align 8
  %tmp20 = load i64, i64* %tmp, align 8
  %tmp21 = load i64, i64* %tmp5, align 8
  %tmp22 = load i16, i16* %tmp6, align 2
  %tmp23 = load i32, i32* %tmp7, align 4
  %tmp24 = load i32, i32* %tmp8, align 4
  call void @chpl_memhook_malloc_post(i8* %tmp19, i64 %tmp20, i64 %tmp21, i16 signext %tmp22, i32 %tmp23, i32 %tmp24)
  %tmp25 = load i8*, i8** %tmp9, align 8
  ret i8* %tmp25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_memhook_realloc_pre(i8* %arg, i64 %arg1, i16 signext %arg2, i32 %arg3, i32 %arg4) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp5 = alloca i64, align 8
  %tmp6 = alloca i16, align 2
  %tmp7 = alloca i32, align 4
  %tmp8 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp5, align 8
  store i16 %arg2, i16* %tmp6, align 2
  store i32 %arg3, i32* %tmp7, align 4
  store i32 %arg4, i32* %tmp8, align 4
  %tmp9 = load i64, i64* %tmp5, align 8
  %tmp10 = load i16, i16* %tmp6, align 2
  %tmp11 = load i32, i32* %tmp7, align 4
  %tmp12 = load i32, i32* %tmp8, align 4
  call void @chpl_memhook_check_pre(i64 1, i64 %tmp9, i16 signext %tmp10, i32 %tmp11, i32 %tmp12)
  %tmp13 = load i8*, i8** %tmp, align 8
  %tmp14 = load i64, i64* %tmp5, align 8
  %tmp15 = load i16, i16* %tmp6, align 2
  %tmp16 = load i32, i32* %tmp7, align 4
  %tmp17 = load i32, i32* %tmp8, align 4
  call void @chpl_track_realloc_pre(i8* %tmp13, i64 %tmp14, i16 signext %tmp15, i32 %tmp16, i32 %tmp17)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @chpl_realloc(i8* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp2 = alloca i64, align 8
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  %tmp3 = load i8*, i8** %tmp, align 8
  %tmp4 = load i64, i64* %tmp2, align 8
  %tmp5 = call i8* @chpl_je_realloc(i8* %tmp3, i64 %tmp4) #15
  ret i8* %tmp5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @chpl_memhook_realloc_post(i8* %arg, i8* %arg1, i64 %arg2, i16 signext %arg3, i32 %arg4, i32 %arg5) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp6 = alloca i8*, align 8
  %tmp7 = alloca i64, align 8
  %tmp8 = alloca i16, align 2
  %tmp9 = alloca i32, align 4
  %tmp10 = alloca i32, align 4
  store i8* %arg, i8** %tmp, align 8
  store i8* %arg1, i8** %tmp6, align 8
  store i64 %arg2, i64* %tmp7, align 8
  store i16 %arg3, i16* %tmp8, align 2
  store i32 %arg4, i32* %tmp9, align 4
  store i32 %arg5, i32* %tmp10, align 4
  %tmp11 = load i8*, i8** %tmp, align 8
  %tmp12 = load i16, i16* %tmp8, align 2
  %tmp13 = load i32, i32* %tmp9, align 4
  %tmp14 = load i32, i32* %tmp10, align 4
  call void @chpl_memhook_check_post(i8* %tmp11, i16 signext %tmp12, i32 %tmp13, i32 %tmp14)
  %tmp15 = load i8*, i8** %tmp, align 8
  %tmp16 = load i8*, i8** %tmp6, align 8
  %tmp17 = load i64, i64* %tmp7, align 8
  %tmp18 = load i16, i16* %tmp8, align 2
  %tmp19 = load i32, i32* %tmp9, align 4
  %tmp20 = load i32, i32* %tmp10, align 4
  call void @chpl_track_realloc_post(i8* %tmp15, i8* %tmp16, i64 %tmp17, i16 signext %tmp18, i32 %tmp19, i32 %tmp20)
  ret void
}

declare void @chpl_track_realloc_pre(i8*, i64, i16 signext, i32, i32) #0

; Function Attrs: nounwind allocsize(1)
declare i8* @chpl_je_realloc(i8*, i64) #9

declare void @chpl_track_realloc_post(i8*, i8*, i64, i16 signext, i32, i32) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @chpl_good_alloc_size(i64 %arg) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp1 = alloca i64, align 8
  store i64 %arg, i64* %tmp1, align 8
  %tmp2 = load i64, i64* %tmp1, align 8
  %tmp3 = icmp eq i64 %tmp2, 0
  br i1 %tmp3, label %bb4, label %bb5

bb4:                                              ; preds = %bb
  store i64 0, i64* %tmp, align 8
  br label %bb8

bb5:                                              ; preds = %bb
  %tmp6 = load i64, i64* %tmp1, align 8
  %tmp7 = call i64 @chpl_je_nallocx(i64 %tmp6, i32 0) #11
  store i64 %tmp7, i64* %tmp, align 8
  br label %bb8

bb8:                                              ; preds = %bb5, %bb4
  %tmp9 = load i64, i64* %tmp, align 8
  ret i64 %tmp9
}

; Function Attrs: nounwind readonly
declare i64 @chpl_je_nallocx(i64, i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_fetch_sub_uint_least64_t(i64* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp2 = alloca i64, align 8
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  %tmp3 = load i64*, i64** %tmp, align 8
  %tmp4 = load i64, i64* %tmp2, align 8
  %tmp5 = call i64 @atomic_fetch_sub_explicit_uint_least64_t(i64* %tmp3, i64 %tmp4, i32 5)
  ret i64 %tmp5
}

declare void @_qio_file_destroy(%struct.qio_file_s*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_fetch_sub_explicit_uint_least64_t(i64* %arg, i64 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp3 = alloca i64, align 8
  %tmp4 = alloca i32, align 4
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp3, align 8
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i64*, i64** %tmp, align 8
  %tmp6 = load i64, i64* %tmp3, align 8
  %tmp7 = atomicrmw sub i64* %tmp5, i64 %tmp6 seq_cst
  ret i64 %tmp7
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_fetch_add_uint_least64_t(i64* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp2 = alloca i64, align 8
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  %tmp3 = load i64*, i64** %tmp, align 8
  %tmp4 = load i64, i64* %tmp2, align 8
  %tmp5 = call i64 @atomic_fetch_add_explicit_uint_least64_t(i64* %tmp3, i64 %tmp4, i32 5)
  ret i64 %tmp5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @atomic_fetch_add_explicit_uint_least64_t(i64* %arg, i64 %arg1, i32 %arg2) #3 {
bb:
  %tmp = alloca i64*, align 8
  %tmp3 = alloca i64, align 8
  %tmp4 = alloca i32, align 4
  store i64* %arg, i64** %tmp, align 8
  store i64 %arg1, i64* %tmp3, align 8
  store i32 %arg2, i32* %tmp4, align 4
  %tmp5 = load i64*, i64** %tmp, align 8
  %tmp6 = load i64, i64* %tmp3, align 8
  %tmp7 = atomicrmw add i64* %tmp5, i64 %tmp6 seq_cst
  ret i64 %tmp7
}

declare void @_qio_channel_destroy(%struct.qio_channel_s*) #0

declare %struct.qio_err_s* @qio_lock(%struct.qio_lock_t*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @qio_space_in_ptr_diff(i64 %arg, i8* %arg1, i8* %arg2) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp3 = alloca i8*, align 8
  %tmp4 = alloca i8*, align 8
  store i64 %arg, i64* %tmp, align 8
  store i8* %arg1, i8** %tmp3, align 8
  store i8* %arg2, i8** %tmp4, align 8
  %tmp5 = load i64, i64* %tmp, align 8
  %tmp6 = load i8*, i8** %tmp3, align 8
  %tmp7 = load i8*, i8** %tmp4, align 8
  %tmp8 = call i64 @qio_ptr_diff(i8* %tmp6, i8* %tmp7)
  %tmp9 = icmp sle i64 %tmp5, %tmp8
  %tmp10 = zext i1 %tmp9 to i32
  ret i32 %tmp10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @qio_ptr_add(i8* %arg, i64 %arg1) #3 {
bb:
  %tmp = alloca i8*, align 8
  %tmp2 = alloca i64, align 8
  store i8* %arg, i8** %tmp, align 8
  store i64 %arg1, i64* %tmp2, align 8
  %tmp3 = load i8*, i8** %tmp, align 8
  %tmp4 = load i64, i64* %tmp2, align 8
  %tmp5 = getelementptr inbounds i8, i8* %tmp3, i64 %tmp4
  ret i8* %tmp5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.qio_err_s* @_qio_channel_post_cached_write(%struct.qio_channel_s* noalias %arg) #3 {
bb:
  %tmp = alloca %struct.qio_channel_s*, align 8
  %tmp1 = alloca %struct.qio_err_s*, align 8
  store %struct.qio_channel_s* %arg, %struct.qio_channel_s** %tmp, align 8
  store %struct.qio_err_s* null, %struct.qio_err_s** %tmp1, align 8
  %tmp2 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp3 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp2, i32 0, i32 10
  %tmp4 = load i32, i32* %tmp3, align 8
  %tmp5 = and i32 %tmp4, 240
  %tmp6 = icmp eq i32 %tmp5, 48
  br i1 %tmp6, label %bb7, label %bb24

bb7:                                              ; preds = %bb
  %tmp8 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp9 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp8, i32 0, i32 13
  %tmp10 = call i32 @qbuffer_is_initialized(%struct.qbuffer_s* %tmp9)
  %tmp11 = icmp ne i32 %tmp10, 0
  br i1 %tmp11, label %bb12, label %bb23

bb12:                                             ; preds = %bb7
  %tmp13 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp14 = getelementptr inbounds %struct.qio_channel_s, %struct.qio_channel_s* %tmp13, i32 0, i32 18
  %tmp15 = load i64, i64* %tmp14, align 8
  %tmp16 = icmp eq i64 %tmp15, 0
  br i1 %tmp16, label %bb17, label %bb22

bb17:                                             ; preds = %bb12
  %tmp18 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp19 = call %struct.qio_err_s* @_qio_channel_flush_qio_unlocked(%struct.qio_channel_s* %tmp18)
  store %struct.qio_err_s* %tmp19, %struct.qio_err_s** %tmp1, align 8
  %tmp20 = load %struct.qio_channel_s*, %struct.qio_channel_s** %tmp, align 8
  %tmp21 = load %struct.qio_err_s*, %struct.qio_err_s** %tmp1, align 8
  call void @_qio_channel_set_error_unlocked(%struct.qio_channel_s* %tmp20, %struct.qio_err_s* %tmp21)
  br label %bb22

bb22:                                             ; preds = %bb17, %bb12
  br label %bb23

bb23:                                             ; preds = %bb22, %bb7
  br label %bb24

bb24:                                             ; preds = %bb23, %bb
  ret %struct.qio_err_s* null
}

declare %struct.qio_err_s* @_qio_slow_write(%struct.qio_channel_s*, i8*, i64, i64*) #0

declare void @qio_unlock(%struct.qio_lock_t*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @qio_ptr_diff(i8* %arg, i8* %arg1) #3 {
bb:
  %tmp = alloca i64, align 8
  %tmp2 = alloca i8*, align 8
  %tmp3 = alloca i8*, align 8
  store i8* %arg, i8** %tmp2, align 8
  store i8* %arg1, i8** %tmp3, align 8
  %tmp4 = load i8*, i8** %tmp2, align 8
  %tmp5 = icmp eq i8* %tmp4, null
  br i1 %tmp5, label %bb9, label %bb6

bb6:                                              ; preds = %bb
  %tmp7 = load i8*, i8** %tmp3, align 8
  %tmp8 = icmp eq i8* %tmp7, null
  br i1 %tmp8, label %bb9, label %bb10

bb9:                                              ; preds = %bb6, %bb
  store i64 0, i64* %tmp, align 8
  br label %bb16

bb10:                                             ; preds = %bb6
  %tmp11 = load i8*, i8** %tmp2, align 8
  %tmp12 = ptrtoint i8* %tmp11 to i64
  %tmp13 = load i8*, i8** %tmp3, align 8
  %tmp14 = ptrtoint i8* %tmp13 to i64
  %tmp15 = sub nsw i64 %tmp12, %tmp14
  store i64 %tmp15, i64* %tmp, align 8
  br label %bb16

bb16:                                             ; preds = %bb10, %bb9
  %tmp17 = load i64, i64* %tmp, align 8
  ret i64 %tmp17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @qbuffer_is_initialized(%struct.qbuffer_s* %arg) #3 {
bb:
  %tmp = alloca %struct.qbuffer_s*, align 8
  store %struct.qbuffer_s* %arg, %struct.qbuffer_s** %tmp, align 8
  %tmp1 = load %struct.qbuffer_s*, %struct.qbuffer_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.qbuffer_s, %struct.qbuffer_s* %tmp1, i32 0, i32 1
  %tmp3 = call i32 @deque_is_initialized(%struct.deque_s* %tmp2)
  ret i32 %tmp3
}

declare %struct.qio_err_s* @_qio_channel_flush_qio_unlocked(%struct.qio_channel_s*) #0

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @deque_is_initialized(%struct.deque_s* %arg) #3 {
bb:
  %tmp = alloca %struct.deque_s*, align 8
  store %struct.deque_s* %arg, %struct.deque_s** %tmp, align 8
  %tmp1 = load %struct.deque_s*, %struct.deque_s** %tmp, align 8
  %tmp2 = getelementptr inbounds %struct.deque_s, %struct.deque_s* %tmp1, i32 0, i32 0
  %tmp3 = load %struct.deque_node_s*, %struct.deque_node_s** %tmp2, align 8
  %tmp4 = icmp ne %struct.deque_node_s* %tmp3, null
  %tmp5 = zext i1 %tmp4 to i32
  ret i32 %tmp5
}

declare %struct.qio_err_s* @qio_err_local_ptr(%struct.qio_err_s*) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #2

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #2

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { readnone }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readnone }
attributes #14 = { nounwind allocsize(0) }
attributes #15 = { nounwind allocsize(1) }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.1 (https://git.llvm.org/git/clang.git 2f27999df400d17b33cdd412fdd606a88208dfcc) (https://git.llvm.org/git/llvm.git 5136df4d089a086b70d452160ad5451861269498)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"chpl_bool", !4, i64 0}
!4 = !{!"all unions", !5, i64 0}
!5 = !{!"Chapel types"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int32_t", !4, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"uint8_t", !4, i64 0}
!10 = !{!11, !12, i64 0}
!11 = !{!"atomicbool", !12, i64 0}
!12 = !{!"atomic_bool", !4, i64 0}
!13 = !{!14, !15, i64 0}
!14 = !{!"atomic_uint64", !15, i64 0}
!15 = !{!"atomic_uint_least64_t", !4, i64 0}
!16 = !{!17, !18, i64 0}
!17 = !{!"atomic_int64", !18, i64 0}
!18 = !{!"atomic_int_least64_t", !4, i64 0}
!19 = !{!18, !18, i64 0}
!20 = !{!15, !15, i64 0}
!21 = !{!22, !23, i64 0}
!22 = !{!"_distribution_DefaultDist", !23, i64 0, !24, i64 8, !3, i64 16}
!23 = !{!"int64_t", !4, i64 0}
!24 = !{!"DefaultDist", !25, i64 0}
!25 = !{!"BaseDist", !26, i64 0}
!26 = !{!"object", !27, i64 0}
!27 = !{!"C void ptr", !4, i64 0}
!28 = !{!22, !24, i64 8}
!29 = !{!22, !3, i64 16}
!30 = !{!31, !23, i64 0}
!31 = !{!"_domain_DefaultRectangularDom_2_int64_t_F", !23, i64 0, !32, i64 8, !3, i64 16}
!32 = !{!"DefaultRectangularDom_2_int64_t_F", !33, i64 0}
!33 = !{!"BaseRectangularDom_2_int64_t_F", !34, i64 0}
!34 = !{!"BaseDom", !26, i64 0}
!35 = !{!31, !32, i64 8}
!36 = !{!31, !3, i64 16}
!37 = !{!38, !23, i64 0}
!38 = !{!"_domain_DefaultRectangularDom_1_int64_t_F", !23, i64 0, !39, i64 8, !3, i64 16}
!39 = !{!"DefaultRectangularDom_1_int64_t_F", !40, i64 0}
!40 = !{!"BaseRectangularDom_1_int64_t_F", !34, i64 0}
!41 = !{!38, !39, i64 8}
!42 = !{!38, !3, i64 16}
!43 = !{!44, !34, i64 0}
!44 = !{!"_tuple_2_BaseDom_BaseDist", !34, i64 0, !25, i64 8}
!45 = !{!44, !25, i64 8}
!46 = !{!47, !24, i64 56}
!47 = !{!"chpl_DefaultRectangularDom_2_int64_t_F_object", !48, i64 0, !24, i64 56, !53, i64 64}
!48 = !{!"chpl_BaseRectangularDom_2_int64_t_F_object", !49, i64 0}
!49 = !{!"chpl_BaseDom_object", !50, i64 0, !51, i64 8, !23, i64 32, !11, i64 40, !3, i64 41, !23, i64 48}
!50 = !{!"chpl_object_object", !7, i64 0}
!51 = !{!"list_BaseArr_chpl", !52, i64 0, !52, i64 8, !23, i64 16}
!52 = !{!"listNode_BaseArr_chpl", !26, i64 0}
!53 = !{!"_tuple_2_star_range_int64_t_bounded_F", !4, i64 0}
!54 = !{!55, !24, i64 56}
!55 = !{!"chpl_DefaultRectangularDom_1_int64_t_F_object", !56, i64 0, !24, i64 56, !57, i64 64}
!56 = !{!"chpl_BaseRectangularDom_1_int64_t_F_object", !49, i64 0}
!57 = !{!"_tuple_1_star_range_int64_t_bounded_F", !4, i64 0}
!58 = !{!59, !59, i64 0}
!59 = !{!"DefaultRectangularArr_1_int64_t_F_locale_int64_t", !60, i64 0}
!60 = !{!"BaseRectangularArr_1_int64_t_F_locale", !61, i64 0}
!61 = !{!"BaseArrOverRectangularDom_1_int64_t_F", !62, i64 0}
!62 = !{!"BaseArr", !26, i64 0}
!63 = !{!64, !64, i64 0}
!64 = !{!"DefaultRectangularArr_2_int64_t_F__real64_int64_t", !65, i64 0}
!65 = !{!"BaseRectangularArr_2_int64_t_F__real64", !66, i64 0}
!66 = !{!"BaseArrOverRectangularDom_2_int64_t_F", !62, i64 0}
!67 = !{!68, !68, i64 0}
!68 = !{!"DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t", !69, i64 0}
!69 = !{!"BaseRectangularArr_1_int64_t_F_localesSignal", !61, i64 0}
!70 = !{!71, !23, i64 0}
!71 = !{!"_array_DefaultRectangularArr_1_int64_t_F_locale_int64_t", !23, i64 0, !59, i64 8, !3, i64 16}
!72 = !{!71, !59, i64 8}
!73 = !{!71, !3, i64 16}
!74 = !{!75, !23, i64 0}
!75 = !{!"ARRTY2", !23, i64 0, !64, i64 8, !3, i64 16}
!76 = !{!75, !64, i64 8}
!77 = !{!75, !3, i64 16}
!78 = !{!79, !23, i64 0}
!79 = !{!"_array_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t", !23, i64 0, !68, i64 8, !3, i64 16}
!80 = !{!79, !68, i64 8}
!81 = !{!79, !3, i64 16}
!82 = !{!83, !62, i64 0}
!83 = !{!"_tuple_2_BaseArr_BaseDom", !62, i64 0, !34, i64 8}
!84 = !{!83, !34, i64 8}
!85 = !{!86, !39, i64 24}
!86 = !{!"chpl_DefaultRectangularArr_1_int64_t_F_locale_int64_t_object", !87, i64 0, !39, i64 24, !90, i64 32, !90, i64 40, !90, i64 48, !23, i64 56, !91, i64 64, !91, i64 72, !3, i64 80, !92, i64 88}
!87 = !{!"chpl_BaseRectangularArr_1_int64_t_F_locale_object", !88, i64 0}
!88 = !{!"chpl_BaseArrOverRectangularDom_1_int64_t_F_object", !89, i64 0}
!89 = !{!"chpl_BaseArr_object", !50, i64 0, !23, i64 8, !3, i64 16}
!90 = !{!"_tuple_1_star_int64_t", !4, i64 0}
!91 = !{!"_ref_locale", !27, i64 0}
!92 = !{!"range_int64_t_bounded_F", !23, i64 0, !23, i64 8}
!93 = !{!94, !32, i64 24}
!94 = !{!"ARRTY", !95, i64 0, !32, i64 24, !97, i64 32, !97, i64 48, !97, i64 64, !23, i64 80, !98, i64 88, !98, i64 96, !3, i64 104, !92, i64 112}
!95 = !{!"chpl_BaseRectangularArr_2_int64_t_F__real64_object", !96, i64 0}
!96 = !{!"chpl_BaseArrOverRectangularDom_2_int64_t_F_object", !89, i64 0}
!97 = !{!"_tuple_2_star_int64_t", !4, i64 0}
!98 = !{!"_ref__real64", !27, i64 0}
!99 = !{!100, !39, i64 24}
!100 = !{!"chpl_DefaultRectangularArr_1_int64_t_F_localesSignal_int64_t_object", !101, i64 0, !39, i64 24, !90, i64 32, !90, i64 40, !90, i64 48, !23, i64 56, !102, i64 64, !102, i64 72, !3, i64 80, !92, i64 88}
!101 = !{!"chpl_BaseRectangularArr_1_int64_t_F_localesSignal_object", !88, i64 0}
!102 = !{!"_ref_localesSignal", !27, i64 0}
!103 = !{!104, !104, i64 0}
!104 = !{!"ArrayInit", !4, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"chpl_ModuleDeinit", !26, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"DummyLocale", !109, i64 0}
!109 = !{!"locale", !26, i64 0}
!110 = !{!4, !4, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"_real64", !4, i64 0}
!113 = !{!114, !23, i64 72}
!114 = !{!"chpl__class_localscoforall_fn3_object", !4, i64 0, !23, i64 72, !23, i64 80, !92, i64 88, !23, i64 104, !115, i64 112, !98, i64 120, !23, i64 128, !7, i64 136}
!115 = !{!"chpl___EndCount_atomic_int64_int64_t", !116, i64 0}
!116 = !{!"chpl___EndCountBase", !26, i64 0}
!117 = !{!114, !23, i64 80}
!118 = !{!114, !23, i64 104}
!119 = !{!114, !115, i64 112}
!120 = !{!114, !98, i64 120}
!121 = !{!114, !23, i64 128}
!122 = !{!114, !7, i64 136}
!123 = !{!124, !124, i64 0}
!124 = !{!"_nilType", !27, i64 0}
!125 = !{!126, !126, i64 0}
!126 = !{!"Error", !26, i64 0}
!127 = !{!128, !128, i64 0}
!128 = !{!"uint64_t", !4, i64 0}
!129 = !{!130, !23, i64 72}
!130 = !{!"chpl__class_localscoforall_fn5_object", !4, i64 0, !23, i64 72, !23, i64 80, !92, i64 88, !23, i64 104, !115, i64 112, !131, i64 120, !23, i64 128, !7, i64 136}
!131 = !{!"_ref_uint64_t", !27, i64 0}
!132 = !{!130, !23, i64 80}
!133 = !{!130, !23, i64 104}
!134 = !{!130, !115, i64 112}
!135 = !{!130, !131, i64 120}
!136 = !{!130, !23, i64 128}
!137 = !{!130, !7, i64 136}
!138 = !{!23, !23, i64 0}
!139 = !{!140, !23, i64 72}
!140 = !{!"chpl__class_localscoforall_fn4_object", !4, i64 0, !23, i64 72, !23, i64 80, !92, i64 88, !23, i64 104, !115, i64 112, !141, i64 120, !23, i64 128, !7, i64 136}
!141 = !{!"_ref_int64_t", !27, i64 0}
!142 = !{!140, !23, i64 80}
!143 = !{!140, !23, i64 104}
!144 = !{!140, !115, i64 112}
!145 = !{!140, !141, i64 120}
!146 = !{!140, !23, i64 128}
!147 = !{!140, !7, i64 136}
!148 = !{!149, !149, i64 0}
!149 = !{!"localesSignal", !26, i64 0}
!150 = !{!151, !23, i64 72}
!151 = !{!"chpl__class_localscoforall_fn2_object", !4, i64 0, !23, i64 72, !23, i64 80, !92, i64 88, !23, i64 104, !115, i64 112, !102, i64 120, !23, i64 128, !7, i64 136}
!152 = !{!151, !23, i64 80}
!153 = !{!151, !23, i64 104}
!154 = !{!151, !115, i64 112}
!155 = !{!151, !102, i64 120}
!156 = !{!151, !23, i64 128}
!157 = !{!151, !7, i64 136}
!158 = !{!109, !109, i64 0}
!159 = !{!160, !23, i64 72}
!160 = !{!"chpl__class_localscoforall_fn_object", !4, i64 0, !23, i64 72, !23, i64 80, !92, i64 88, !23, i64 104, !115, i64 112, !91, i64 120, !23, i64 128, !7, i64 136}
!161 = !{!160, !23, i64 80}
!162 = !{!160, !23, i64 104}
!163 = !{!160, !115, i64 112}
!164 = !{!160, !91, i64 120}
!165 = !{!160, !23, i64 128}
!166 = !{!160, !7, i64 136}
!167 = !{!168, !126, i64 0}
!168 = !{!"chpl_TaskErrors", !126, i64 0, !11, i64 8}
!169 = !{!12, !12, i64 0}
!170 = !{!50, !7, i64 0}
!171 = !{!172, !27, i64 24}
!172 = !{!"chpl_chpl___EndCountBase_object", !50, i64 0, !168, i64 8, !27, i64 24}
!173 = !{!174, !23, i64 40}
!174 = !{!"chpl_chpl___EndCount_atomic_int64_int64_t_object", !172, i64 0, !17, i64 32, !23, i64 40}
!175 = !{!176, !23, i64 0}
!176 = !{!"string", !23, i64 0, !23, i64 8, !177, i64 16, !3, i64 24, !7, i64 28}
!177 = !{!"_ref_uint8_t", !27, i64 0}
!178 = !{!176, !7, i64 28}
!179 = !{!176, !177, i64 16}
!180 = !{!181, !27, i64 8}
!181 = !{!"chpl_chpl_ModuleDeinit_object", !50, i64 0, !27, i64 8, !182, i64 16, !106, i64 24}
!182 = !{!"C fn ptr", !27, i64 0}
!183 = !{!181, !182, i64 16}
!184 = !{!181, !106, i64 24}
!185 = !{!186, !3, i64 33}
!186 = !{!"chpl_BaseDist_object", !50, i64 0, !187, i64 8, !11, i64 32, !3, i64 33, !23, i64 40}
!187 = !{!"list_BaseDom_chpl", !188, i64 0, !188, i64 8, !23, i64 16}
!188 = !{!"listNode_BaseDom_chpl", !26, i64 0}
!189 = !{!49, !23, i64 32}
!190 = !{!49, !3, i64 41}
!191 = !{!49, !23, i64 48}
!192 = !{!89, !23, i64 8}
!193 = !{!89, !3, i64 16}
!194 = !{!51, !52, i64 0}
!195 = !{!196, !62, i64 8}
!196 = !{!"chpl_listNode_BaseArr_chpl_object", !50, i64 0, !62, i64 8, !52, i64 16}
!197 = !{!196, !52, i64 16}
!198 = !{!199, !126, i64 8}
!199 = !{!"chpl_Error_object", !50, i64 0, !126, i64 8, !23, i64 16, !7, i64 24}
!200 = !{!199, !23, i64 16}
!201 = !{!199, !7, i64 24}
!202 = !{!203, !126, i64 32}
!203 = !{!"chpl_TaskErrors_object", !199, i64 0, !126, i64 32}
!204 = !{!205, !109, i64 8}
!205 = !{!"chpl_locale_object", !50, i64 0, !109, i64 8, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !23, i64 48, !128, i64 56, !17, i64 64}
!206 = !{!205, !23, i64 16}
!207 = !{!205, !23, i64 24}
!208 = !{!205, !23, i64 32}
!209 = !{!205, !23, i64 40}
!210 = !{!205, !23, i64 48}
!211 = !{!205, !128, i64 56}
!212 = !{!100, !102, i64 72}
!213 = !{!86, !91, i64 72}
!214 = !{!215, !215, i64 0}
!215 = !{!"_ref__array_DefaultRectangularArr_1_int64_t_F_locale_int64_t", !27, i64 0}
!216 = !{!217, !23, i64 0}
!217 = !{!"range_int64_t_boundedLow_F", !23, i64 0, !23, i64 8}
!218 = !{!217, !23, i64 8}
!219 = !{!92, !23, i64 0}
!220 = !{!92, !23, i64 8}
!221 = !{!222, !23, i64 0}
!222 = !{!"range_int64_t_bounded_T", !23, i64 0, !23, i64 8, !23, i64 16, !23, i64 24, !3, i64 32}
!223 = !{!222, !23, i64 8}
!224 = !{!222, !23, i64 16}
!225 = !{!222, !23, i64 24}
!226 = !{!222, !3, i64 32}
!227 = !{!27, !27, i64 0}
!228 = !{!186, !23, i64 40}
!229 = !{!94, !23, i64 80}
!230 = !{!94, !98, i64 88}
!231 = !{!94, !98, i64 96}
!232 = !{!94, !3, i64 104}
!233 = !{!86, !23, i64 56}
!234 = !{!86, !91, i64 64}
!235 = !{!86, !3, i64 80}
!236 = !{!237, !39, i64 24}
!237 = !{!"chpl_DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t_object", !238, i64 0, !39, i64 24, !90, i64 32, !90, i64 40, !90, i64 48, !23, i64 56, !131, i64 64, !131, i64 72, !3, i64 80, !92, i64 88}
!238 = !{!"chpl_BaseRectangularArr_1_int64_t_F_uint64_t_object", !88, i64 0}
!239 = !{!237, !23, i64 56}
!240 = !{!237, !131, i64 64}
!241 = !{!237, !131, i64 72}
!242 = !{!237, !3, i64 80}
!243 = !{!100, !23, i64 56}
!244 = !{!100, !102, i64 64}
!245 = !{!100, !3, i64 80}
!246 = !{!247, !39, i64 24}
!247 = !{!"chpl_DefaultRectangularArr_1_int64_t_F_int64_t_int64_t_object", !248, i64 0, !39, i64 24, !90, i64 32, !90, i64 40, !90, i64 48, !23, i64 56, !141, i64 64, !141, i64 72, !3, i64 80, !92, i64 88}
!248 = !{!"chpl_BaseRectangularArr_1_int64_t_F_int64_t_object", !88, i64 0}
!249 = !{!247, !23, i64 56}
!250 = !{!247, !141, i64 64}
!251 = !{!247, !141, i64 72}
!252 = !{!247, !3, i64 80}
!253 = !{!254, !23, i64 104}
!254 = !{!"chpl__class_localscoforall_fn6_object", !4, i64 0, !53, i64 72, !23, i64 104, !23, i64 112, !23, i64 120, !32, i64 128, !115, i64 136, !64, i64 144, !64, i64 152, !23, i64 160, !7, i64 168}
!255 = !{!254, !23, i64 112}
!256 = !{!254, !23, i64 120}
!257 = !{!254, !32, i64 128}
!258 = !{!254, !115, i64 136}
!259 = !{!254, !64, i64 144}
!260 = !{!254, !64, i64 152}
!261 = !{!254, !23, i64 160}
!262 = !{!254, !7, i64 168}
!263 = !{!264, !23, i64 88}
!264 = !{!"chpl__class_localscoforall_fn7_object", !4, i64 0, !57, i64 72, !23, i64 88, !23, i64 96, !23, i64 104, !39, i64 112, !115, i64 120, !59, i64 128, !59, i64 136, !23, i64 144, !7, i64 152}
!265 = !{!264, !23, i64 96}
!266 = !{!264, !23, i64 104}
!267 = !{!264, !39, i64 112}
!268 = !{!264, !115, i64 120}
!269 = !{!264, !59, i64 128}
!270 = !{!264, !59, i64 136}
!271 = !{!264, !23, i64 144}
!272 = !{!264, !7, i64 152}
!273 = !{!274, !23, i64 88}
!274 = !{!"chpl__class_localscoforall_fn8_object", !4, i64 0, !57, i64 72, !23, i64 88, !23, i64 96, !23, i64 104, !39, i64 112, !115, i64 120, !68, i64 128, !68, i64 136, !23, i64 144, !7, i64 152}
!275 = !{!274, !23, i64 96}
!276 = !{!274, !23, i64 104}
!277 = !{!274, !39, i64 112}
!278 = !{!274, !115, i64 120}
!279 = !{!274, !68, i64 128}
!280 = !{!274, !68, i64 136}
!281 = !{!274, !23, i64 144}
!282 = !{!274, !7, i64 152}
!283 = !{!284, !23, i64 88}
!284 = !{!"chpl__class_localscoforall_fn9_object", !4, i64 0, !57, i64 72, !23, i64 88, !23, i64 96, !23, i64 104, !39, i64 112, !115, i64 120, !285, i64 128, !285, i64 136, !23, i64 144, !7, i64 152}
!285 = !{!"DefaultRectangularArr_1_int64_t_F_uint64_t_int64_t", !286, i64 0}
!286 = !{!"BaseRectangularArr_1_int64_t_F_uint64_t", !61, i64 0}
!287 = !{!284, !23, i64 96}
!288 = !{!284, !23, i64 104}
!289 = !{!284, !39, i64 112}
!290 = !{!284, !115, i64 120}
!291 = !{!284, !285, i64 128}
!292 = !{!284, !285, i64 136}
!293 = !{!284, !23, i64 144}
!294 = !{!284, !7, i64 152}
!295 = !{!296, !23, i64 88}
!296 = !{!"chpl__class_localscoforall_fn10_object", !4, i64 0, !57, i64 72, !23, i64 88, !23, i64 96, !23, i64 104, !39, i64 112, !115, i64 120, !297, i64 128, !297, i64 136, !23, i64 144, !7, i64 152}
!297 = !{!"DefaultRectangularArr_1_int64_t_F_int64_t_int64_t", !298, i64 0}
!298 = !{!"BaseRectangularArr_1_int64_t_F_int64_t", !61, i64 0}
!299 = !{!296, !23, i64 96}
!300 = !{!296, !23, i64 104}
!301 = !{!296, !39, i64 112}
!302 = !{!296, !115, i64 120}
!303 = !{!296, !297, i64 128}
!304 = !{!296, !297, i64 136}
!305 = !{!296, !23, i64 144}
!306 = !{!296, !7, i64 152}
!307 = !{!308, !309, i64 32}
!308 = !{!"chpl_SystemError_chpl_object", !199, i64 0, !309, i64 32, !176, i64 40}
!309 = !{!"syserr", !27, i64 0}
!310 = !{!311, !311, i64 0}
!311 = !{!"ExternDist", !25, i64 0}
!312 = !{!313, !23, i64 72}
!313 = !{!"chpl_LocaleModel_object", !314, i64 0, !23, i64 72, !176, i64 80}
!314 = !{!"chpl_AbstractLocaleModel_object", !205, i64 0}
!315 = !{!316, !4, i64 72}
!316 = !{!"chpl__class_localscoforall_fn11_object", !4, i64 0, !4, i64 72, !79, i64 80, !23, i64 104, !115, i64 112, !317, i64 120, !319, i64 128, !23, i64 136, !7, i64 144}
!317 = !{!"RootLocale", !318, i64 0}
!318 = !{!"AbstractRootLocale", !109, i64 0}
!319 = !{!"_ref_chpl_root_locale_accum", !27, i64 0}
!320 = !{!316, !23, i64 104}
!321 = !{!316, !115, i64 112}
!322 = !{!316, !317, i64 120}
!323 = !{!316, !319, i64 128}
!324 = !{!316, !23, i64 136}
!325 = !{!316, !7, i64 144}
!326 = !{!327, !109, i64 0}
!327 = !{!"chpl_localeTreeRecord", !109, i64 0, !109, i64 8}
!328 = !{!327, !109, i64 8}
!329 = !{!176, !3, i64 24}
!330 = !{!176, !23, i64 8}
!331 = !{!332, !109, i64 0}
!332 = !{!"file_chpl", !109, i64 0, !333, i64 8}
!333 = !{!"qio_file_ptr_t", !27, i64 0}
!334 = !{!332, !333, i64 8}
!335 = !{!336, !337, i64 8}
!336 = !{!"channel_T_dynamic_T_chpl", !109, i64 0, !337, i64 8, !109, i64 16}
!337 = !{!"qio_channel_ptr_t", !27, i64 0}
!338 = !{!336, !109, i64 0}
!339 = !{!340, !337, i64 8}
!340 = !{!"channel_F_dynamic_T_chpl", !109, i64 0, !337, i64 8, !109, i64 16}
!341 = !{!340, !109, i64 0}
!342 = !{!340, !109, i64 16}
!343 = !{!336, !109, i64 16}
!344 = !{!345, !109, i64 0}
!345 = !{!"channel_T_dynamic_F_chpl", !109, i64 0, !337, i64 8, !109, i64 16}
!346 = !{!345, !337, i64 8}
!347 = !{!345, !109, i64 16}
!348 = !{!309, !309, i64 0}
!349 = !{!350, !3, i64 0}
!350 = !{!"ioNewline_chpl", !3, i64 0}
!351 = !{!352, !3, i64 32}
!352 = !{!"ioLiteral_chpl", !176, i64 0, !3, i64 32}
!353 = !{!51, !52, i64 8}
!354 = !{!51, !23, i64 16}
!355 = !{!187, !188, i64 0}
!356 = !{!187, !188, i64 8}
!357 = !{!187, !23, i64 16}
!358 = !{!359, !34, i64 8}
!359 = !{!"chpl_listNode_BaseDom_chpl_object", !50, i64 0, !34, i64 8, !188, i64 16}
!360 = !{!359, !188, i64 16}
!361 = !{!362, !4, i64 0}
!362 = !{!"ReverseComparator_DefaultComparator_chpl", !4, i64 0}
!363 = !{i32 -2145522689}
